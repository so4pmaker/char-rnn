:- use_rendering(chess).


:- use_module(library(clpfd)).

n_queens(N, Qs) :-
	length(Qs, N),
	Qs ins 1..N,
	safe_queens(Qs).

safe_queens([]).
safe_queens([Q|Qs]) :-
	safe_queens(Qs, Q, 1),
	safe_queens(Qs).

safe_queens([], _, _).
safe_queens([Q|Qs], Q0, D0) :-
	Q0 #\= Q,
	abs(Q0 - Q) #\= D0,
	D1 #= D0 + 1,
	safe_queens(Qs, Q0, D1).



:- use_rendering(sudoku).

:- use_module(library(clpfd)).


sudoku(Rows) :-
        length(Rows, 9), maplist(same_length(Rows), Rows),
        append(Rows, Vs), Vs ins 1..9,
        maplist(all_distinct, Rows),
        transpose(Rows, Columns),
        maplist(all_distinct, Columns),
        Rows = [A,B,C,D,E,F,G,H,I],
        blocks(A, B, C), blocks(D, E, F), blocks(G, H, I).

blocks([], [], []).
blocks([A,B,C|Bs1], [D,E,F|Bs2], [G,H,I|Bs3]) :-
        all_distinct([A,B,C,D,E,F,G,H,I]),
        blocks(Bs1, Bs2, Bs3).

problem(1, [[_,_,_, _,_,_, _,_,_],
            [_,_,_, _,_,3, _,8,5],
            [_,_,1, _,2,_, _,_,_],

            [_,_,_, 5,_,7, _,_,_],
            [_,_,4, _,_,_, 1,_,_],
            [_,9,_, _,_,_, _,_,_],

            [5,_,_, _,_,_, _,7,3],
            [_,_,2, _,1,_, _,_,_],
            [_,_,_, _,4,_, _,_,9]]).




:- dynamic p/1.

assert_and_retract :-
    forall(between(1, 10, X), assert(p(X))),
    forall(retract(p(X)), writeln(X)).

assert_many(Count) :-
    forall(between(1, Count, X), assert(p(X))),
    retractall(p(_)).



eliza(Stimuli, Response) :-
    template(InternalStimuli, InternalResponse),
    match(InternalStimuli, Stimuli),
    match(InternalResponse, Response),
    !.

template([s([i,am]),s(X)], [s([why,are,you]),s(X),w('?')]).
template([w(i),s(X),w(you)], [s([why,do,you]),s(X),w(me),w('?')]).


match([],[]).
match([Item|Items],[Word|Words]) :-
    match(Item, Items, Word, Words).

match(w(Word), Items, Word, Words) :-
    match(Items, Words).
match(s([Word|Seg]), Items, Word, Words0) :-
    append(Seg, Words1, Words0),
    match(Items, Words1).





prove(true) :- !.
prove((B, Bs)) :- !,
    prove(B),
    prove(Bs).
prove(H) :-
    clause(H, B),
    prove(B).
prove(H) :-
    askable(H),
    writeln(H),
    read(Answer),
	Answer == yes.


good_pet(X) :- bird(X), small(X).
good_pet(X) :- cuddly(X), yellow(X).

bird(X) :- has_feathers(X), tweets(X).

yellow(tweety).

askable(tweets(_)).
askable(small(_)).
askable(cuddly(_)).
askable(has_feathers(_)).



:- use_rendering(svgtree, [list(false)]).


s(s(NP,VP)) --> np(NP, Num), vp(VP, Num).

np(NP, Num) --> pn(NP, Num).
np(np(Det,N), Num) --> det(Det, Num), n(N, Num).
np(np(Det,N,PP), Num) --> det(Det, Num), n(N, Num), pp(PP).

vp(vp(V,NP), Num) --> v(V, Num), np(NP, _).
vp(vp(V,NP,PP), Num) --> v(V, Num), np(NP, _), pp(PP).

pp(pp(P,NP)) --> p(P), np(NP, _).

det(det(a), sg) --> [a].
det(det(the), _) --> [the].

pn(pn(john), sg) --> [john].

n(n(man), sg) --> [man].
n(n(men), pl) --> [men].
n(n(telescope), sg) --> [telescope].

v(v(sees), sg) --> [sees].
v(v(see), pl) --> [see].
v(v(saw), _) --> [saw].

p(p(with)) --> [with].







:- use_rendering(table,
		 [header(h('Owner', 'Pet', 'Cigarette', 'Drink', 'Color'))]).

zebra_owner(Owner) :-
	houses(Hs),
	member(h(Owner,zebra,_,_,_), Hs).

water_drinker(Drinker) :-
	houses(Hs),
	member(h(Drinker,_,_,water,_), Hs).


houses(Hs) :-
			length(Hs, 5),                                            	member(h(english,_,_,_,red), Hs),                         	member(h(spanish,dog,_,_,_), Hs),                         	member(h(_,_,_,coffee,green), Hs),                        	member(h(ukrainian,_,_,tea,_), Hs),                       	next(h(_,_,_,_,green), h(_,_,_,_,white), Hs),             	member(h(_,snake,winston,_,_), Hs),                       	member(h(_,_,kool,_,yellow), Hs),                         	Hs = [_,_,h(_,_,_,milk,_),_,_],                           	Hs = [h(norwegian,_,_,_,_)|_],                            	next(h(_,fox,_,_,_), h(_,_,chesterfield,_,_), Hs),        	next(h(_,_,kool,_,_), h(_,horse,_,_,_), Hs),              	member(h(_,_,lucky,juice,_), Hs),                         	member(h(japonese,_,kent,_,_), Hs),                       	next(h(norwegian,_,_,_,_), h(_,_,_,_,blue), Hs),          	member(h(_,_,_,water,_), Hs),			member(h(_,zebra,_,_,_), Hs).		
next(A, B, Ls) :- append(_, [A,B|_], Ls).
next(A, B, Ls) :- append(_, [B,A|_], Ls).



hello_world :-
    writeln('Hello World!'),
    sleep(1),
    hello_world.

read_and_write :-
    prompt(_, 'Type a term or \'stop\''),
    read(Something),
    (   Something == stop
    ->  true
    ;   writeln(Something),
        read_and_write
    ).




親子(波平,サザエ).
親子(ふね,サザエ).
親子(波平,カツオ).
親子(ふね,カツオ).
親子(波平,ワカメ).
親子(ふね,ワカメ).
親子(マスオ,タラオ).
親子(サザエ,タラオ).

夫婦(波平,ふね).
夫婦(マスオ,サザエ).




loves(vincent, mia).
loves(marcellus, mia).
loves(pumpkin, honey_bunny).
loves(honey_bunny, pumpkin).

jealous(X, Y) :-
    loves(X, Z),
    loves(Y, Z).







:- use_module(library(clpb)).





example_knights(1, [A,B]) :-
        sat(A=:=(~A + B)).



example_knights(2, [A,B]) :-
        sat(A=:=(~A * B)).



example_knights(3, [A,B]) :-
        sat(A=:=card([1,2],[~A,~B])).



example_knights(4, Ks) :-
        Ks = [A,B,C],
        sat(A=:=(~A * ~B * ~C)),
        sat(B=:=card([1],Ks)).



example_knights(5, [A,B,C]) :-
        sat(A=:= ~B),
        sat(B=:=(A=:=C)).




suffix(Xs, Ys) :-
    append(_, Ys, Xs).

prefix(Xs, Ys) :-
    append(Ys, _, Xs).

sublist(Xs, Ys) :-
    suffix(Xs, Zs),
    prefix(Zs, Ys).

nrev([], []).
nrev([H|T0], L) :-
	nrev(T0, T),
	append(T, [H], L).













:- discontiguous
        movie/2,
        director/2,
        actor/3,
        actress/3.

movie(american_beauty, 1999).
director(american_beauty, sam_mendes).
actor(american_beauty, kevin_spacey, lester_burnham).
actress(american_beauty, annette_bening, carolyn_burnham).
actress(american_beauty, thora_birch, jane_burnham).
actor(american_beauty, wes_bentley, ricky_fitts).
actress(american_beauty, mena_suvari, angela_hayes).
actor(american_beauty, chris_cooper, col_frank_fitts_usmc).
actor(american_beauty, peter_gallagher, buddy_kane).
actress(american_beauty, allison_janney, barbara_fitts).
actor(american_beauty, scott_bakula, jim_olmeyer).
actor(american_beauty, sam_robards, jim_berkley).
actor(american_beauty, barry_del_sherman, brad_dupree).
actress(american_beauty, ara_celi, sale_house_woman_1).
actor(american_beauty, john_cho, sale_house_man_1).
actor(american_beauty, fort_atkinson, sale_house_man_2).
actress(american_beauty, sue_casey, sale_house_woman_2).
actor(american_beauty, kent_faulcon, sale_house_man_3).
actress(american_beauty, brenda_wehle, sale_house_woman_4).
actress(american_beauty, lisa_cloud, sale_house_woman_5).
actress(american_beauty, alison_faulk, spartanette_1).
actress(american_beauty, krista_goodsitt, spartanette_2).
actress(american_beauty, lily_houtkin, spartanette_3).
actress(american_beauty, carolina_lancaster, spartanette_4).
actress(american_beauty, romana_leah, spartanette_5).
actress(american_beauty, chekeshka_van_putten, spartanette_6).
actress(american_beauty, emily_zachary, spartanette_7).
actress(american_beauty, nancy_anderson, spartanette_8).
actress(american_beauty, reshma_gajjar, spartanette_9).
actress(american_beauty, stephanie_rizzo, spartanette_10).
actress(american_beauty, heather_joy_sher, playground_girl_1).
actress(american_beauty, chelsea_hertford, playground_girl_2).
actress(american_beauty, amber_smith, christy_kane).
actor(american_beauty, joel_mccrary, catering_boss).
actress(american_beauty, marissa_jaret_winokur, mr_smiley_s_counter_girl).
actor(american_beauty, dennis_anderson, mr_smiley_s_manager).
actor(american_beauty, matthew_kimbrough, firing_range_attendant).
actress(american_beauty, erin_cathryn_strubbe, young_jane_burnham).
actress(american_beauty, elaine_corral_kendall, newscaster).

movie(anna, 1987).
director(anna, yurek_bogayevicz).
actress(anna, sally_kirkland, anna).
actor(anna, robert_fields, daniel).
actress(anna, paulina_porizkova, krystyna).
actor(anna, gibby_brand, director_1).
actor(anna, john_robert_tillotson, director_2).
actress(anna, julianne_gilliam, woman_author).
actor(anna, joe_aufiery, stage_manager).
actor(anna, lance_davis, assistant_1).
actress(anna, deirdre_o_connell, assistant_2).
actress(anna, ruth_maleczech, woman_1_woman_named_gloria).
actress(anna, holly_villaire, woman_2_woman_with_bird).
actress(anna, shirl_bernheim, woman_3_woman_in_white_veil).
actress(anna, ren_e_coleman, woman_4_woman_in_bonnet).
actress(anna, gabriela_farrar, woman_5_woman_in_black).
actress(anna, jordana_levine, woman_6_woman_in_turban).
actress(anna, rosalie_traina, woman_7_woman_in_gold).
actress(anna, maggie_wagner, actress_d).
actor(anna, charles_randall, agent).
actress(anna, mimi_weddell, agent_s_secretary).
actor(anna, larry_pine, baskin).
actress(anna, lola_pashalinski, producer).
actor(anna, stefan_schnabel, professor).
actor(anna, steven_gilborn, tonda).
actor(anna, rand_stone, george).
actress(anna, geena_goodwin, daniel_s_mother).
actor(anna, david_r_ellis, daniel_s_father).
actor(anna, brian_kohn, jonathan).
actress(anna, caroline_aaron, interviewer).
actor(anna, vasek_simek, czech_demonstrator_1).
actor(anna, paul_leski, czech_demonstrator_2).
actor(anna, larry_attile, czech_demonstrator_3).
actress(anna, sofia_coppola, noodle).
actor(anna, theo_mayes, dancing_dishwasher).
actress(anna, nina_port, dancing_dishwasher).

movie(barton_fink, 1991).
director(barton_fink, ethan_coen).
director(barton_fink, joel_coen).
actor(barton_fink, john_turturro, barton_fink).
actor(barton_fink, john_goodman, charlie_meadows).
actress(barton_fink, judy_davis, audrey_taylor).
actor(barton_fink, michael_lerner, jack_lipnick).
actor(barton_fink, john_mahoney, w_p_mayhew).
actor(barton_fink, tony_shalhoub, ben_geisler).
actor(barton_fink, jon_polito, lou_breeze).
actor(barton_fink, steve_buscemi, chet).
actor(barton_fink, david_warrilow, garland_stanford).
actor(barton_fink, richard_portnow, detective_mastrionotti).
actor(barton_fink, christopher_murney, detective_deutsch).
actor(barton_fink, i_m_hobson, derek).
actress(barton_fink, meagen_fay, poppy_carnahan).
actor(barton_fink, lance_davis, richard_st_claire).
actor(barton_fink, harry_bugin, pete).
actor(barton_fink, anthony_gordon, maitre_d).
actor(barton_fink, jack_denbo, stagehand).
actor(barton_fink, max_grod_nchik, clapper_boy).
actor(barton_fink, robert_beecher, referee).
actor(barton_fink, darwyn_swalve, wrestler).
actress(barton_fink, gayle_vance, geisler_s_secretary).
actor(barton_fink, johnny_judkins, sailor).
actress(barton_fink, jana_marie_hupp, uso_girl).
actress(barton_fink, isabelle_townsend, beauty).
actor(barton_fink, william_preston_robertson, voice).

movie(the_big_lebowski, 1998).
director(the_big_lebowski, joel_coen).
actor(the_big_lebowski, jeff_bridges, jeffrey_lebowski__the_dude).
actor(the_big_lebowski, john_goodman, walter_sobchak).
actress(the_big_lebowski, julianne_moore, maude_lebowski).
actor(the_big_lebowski, steve_buscemi, theodore_donald_donny_kerabatsos).
actor(the_big_lebowski, david_huddleston, jeffrey_lebowski__the_big_lebowski).
actor(the_big_lebowski, philip_seymour_hoffman, brandt).
actress(the_big_lebowski, tara_reid, bunny_lebowski).
actor(the_big_lebowski, philip_moon, woo_treehorn_thug).
actor(the_big_lebowski, mark_pellegrino, blond_treehorn_thug).
actor(the_big_lebowski, peter_stormare, uli_kunkel_nihilist_1__karl_hungus).
actor(the_big_lebowski, flea, nihilist_2).
actor(the_big_lebowski, torsten_voges, nihilist_3).
actor(the_big_lebowski, jimmie_dale_gilmore, smokey).
actor(the_big_lebowski, jack_kehler, marty).
actor(the_big_lebowski, john_turturro, jesus_quintana).
actor(the_big_lebowski, james_g_hoosier, liam_o_brien).
actor(the_big_lebowski, carlos_leon, maude_s_thug).
actor(the_big_lebowski, terrence_burton, maude_s_thug).
actor(the_big_lebowski, richard_gant, older_cop).
actor(the_big_lebowski, christian_clemenson, younger_cop).
actor(the_big_lebowski, dom_irrera, tony_the_chauffeur).
actor(the_big_lebowski, g_rard_l_heureux, lebowski_s_chauffeur).
actor(the_big_lebowski, david_thewlis, knox_harrington).
actress(the_big_lebowski, lu_elrod, coffee_shop_waitress).
actor(the_big_lebowski, mike_gomez, auto_circus_cop).
actor(the_big_lebowski, peter_siragusa, gary_the_bartender).
actor(the_big_lebowski, sam_elliott, the_stranger).
actor(the_big_lebowski, marshall_manesh, doctor).
actor(the_big_lebowski, harry_bugin, arthur_digby_sellers).
actor(the_big_lebowski, jesse_flanagan, little_larry_sellers).
actress(the_big_lebowski, irene_olga_l_pez, pilar_sellers_housekeeper).
actor(the_big_lebowski, luis_colina, corvette_owner).
actor(the_big_lebowski, ben_gazzara, jackie_treehorn).
actor(the_big_lebowski, leon_russom, malibu_police_chief).
actor(the_big_lebowski, ajgie_kirkland, cab_driver).
actor(the_big_lebowski, jon_polito, da_fino).
actress(the_big_lebowski, aimee_mann, nihilist_woman).
actor(the_big_lebowski, jerry_haleva, saddam_hussein).
actress(the_big_lebowski, jennifer_lamb, pancake_waitress).
actor(the_big_lebowski, warren_keith, funeral_director).
actress(the_big_lebowski, wendy_braun, chorine_dancer).
actress(the_big_lebowski, asia_carrera, sherry_in_logjammin).
actress(the_big_lebowski, kiva_dawson, dancer).
actress(the_big_lebowski, robin_jones, checker_at_ralph_s).
actor(the_big_lebowski, paris_themmen, '').

movie(blade_runner, 1997).
director(blade_runner, joseph_d_kucan).
actor(blade_runner, martin_azarow, dino_klein).
actor(blade_runner, lloyd_bell, additional_voices).
actor(blade_runner, mark_benninghoffen, ray_mccoy).
actor(blade_runner, warren_burton, runciter).
actress(blade_runner, gwen_castaldi, dispatcher_and_newscaster).
actress(blade_runner, signy_coleman, dektora).
actor(blade_runner, gary_columbo, general_doll).
actor(blade_runner, jason_cottle, luthur_lance_photographer).
actor(blade_runner, timothy_dang, izo).
actor(blade_runner, gerald_deloff, additional_voices).
actress(blade_runner, lisa_edelstein, crystal_steele).
actor(blade_runner, gary_l_freeman, additional_voices).
actor(blade_runner, jeff_garlin, lieutenant_edison_guzza).
actor(blade_runner, eric_gooch, additional_voices).
actor(blade_runner, javier_grajeda, gaff).
actor(blade_runner, mike_grayford, additional_voices).
actress(blade_runner, gloria_hoffmann, mia).
actor(blade_runner, james_hong, dr_chew).
actress(blade_runner, kia_huntzinger, additional_voices).
actor(blade_runner, anthony_izzo, officer_leary).
actor(blade_runner, brion_james, leon).
actress(blade_runner, shelly_johnson, additional_voices).
actor(blade_runner, terry_jourden, spencer_grigorian).
actor(blade_runner, jerry_kernion, holloway).
actor(blade_runner, joseph_d_kucan, crazylegs_larry).
actor(blade_runner, jerry_lan, murray).
actor(blade_runner, michael_b_legg, additional_voices).
actor(blade_runner, demarlo_lewis, additional_voices).
actor(blade_runner, tse_cheng_lo, additional_voices).
actress(blade_runner, etsuko_mader, additional_voices).
actor(blade_runner, mohanned_mansour, additional_voices).
actress(blade_runner, karen_maruyama, fish_dealer).
actor(blade_runner, michael_mcshane, marcus_eisenduller).
actor(blade_runner, alexander_mervin, sadik).
actor(blade_runner, tony_mitch, governor_kolvig).
actor(blade_runner, toru_nagai, howie_lee).
actor(blade_runner, dwight_k_okahara, additional_voices).
actor(blade_runner, gerald_okamura, zuben).
actor(blade_runner, bruno_oliver, gordo_frizz).
actress(blade_runner, pauley_perrette, lucy_devlin).
actor(blade_runner, mark_rolston, clovis).
actor(blade_runner, stephen_root, early_q).
actor(blade_runner, william_sanderson, j_f_sebastian).
actor(blade_runner, vincent_schiavelli, bullet_bob).
actress(blade_runner, rosalyn_sidewater, isabella).
actor(blade_runner, ron_snow, blimp_announcer).
actor(blade_runner, stephen_sorrentino, shoeshine_man_hasan).
actress(blade_runner, jessica_straus, answering_machine_female_announcer).
actress(blade_runner, melonie_sung, additional_voices).
actor(blade_runner, iqbal_theba, moraji).
actress(blade_runner, myriam_tubert, insect_dealer).
actor(blade_runner, joe_turkel, eldon_tyrell).
actor(blade_runner, bill_wade, hanoi).
actor(blade_runner, jim_walls, additional_voices).
actress(blade_runner, sandra_wang, additional_voices).
actor(blade_runner, marc_worden, baker).
actress(blade_runner, sean_young, rachael).
actor(blade_runner, joe_tippy_zeoli, officer_grayford).

movie(blood_simple, 1984).
director(blood_simple, ethan_coen).
director(blood_simple, joel_coen).
actor(blood_simple, john_getz, ray).
actress(blood_simple, frances_mcdormand, abby).
actor(blood_simple, dan_hedaya, julian_marty).
actor(blood_simple, m_emmet_walsh, loren_visser_private_detective).
actor(blood_simple, samm_art_williams, meurice).
actress(blood_simple, deborah_neumann, debra).
actress(blood_simple, raquel_gavia, landlady).
actor(blood_simple, van_brooks, man_from_lubbock).
actor(blood_simple, se_or_marco, mr_garcia).
actor(blood_simple, william_creamer, old_cracker).
actor(blood_simple, loren_bivens, strip_bar_exhorter).
actor(blood_simple, bob_mcadams, strip_bar_exhorter).
actress(blood_simple, shannon_sedwick, stripper).
actress(blood_simple, nancy_finger, girl_on_overlook).
actor(blood_simple, william_preston_robertson, radio_evangelist).
actress(blood_simple, holly_hunter, helene_trend).
actor(blood_simple, barry_sonnenfeld, marty_s_vomiting).

movie(the_cotton_club, 1984).
director(the_cotton_club, francis_ford_coppola).
actor(the_cotton_club, richard_gere, michael_dixie_dwyer).
actor(the_cotton_club, gregory_hines, sandman_williams).
actress(the_cotton_club, diane_lane, vera_cicero).
actress(the_cotton_club, lonette_mckee, lila_rose_oliver).
actor(the_cotton_club, bob_hoskins, owney_madden).
actor(the_cotton_club, james_remar, dutch_schultz).
actor(the_cotton_club, nicolas_cage, vincent_dwyer).
actor(the_cotton_club, allen_garfield, abbadabba_berman).
actor(the_cotton_club, fred_gwynne, frenchy_demange).
actress(the_cotton_club, gwen_verdon, tish_dwyer).
actress(the_cotton_club, lisa_jane_persky, frances_flegenheimer).
actor(the_cotton_club, maurice_hines, clay_williams).
actor(the_cotton_club, julian_beck, sol_weinstein).
actress(the_cotton_club, novella_nelson, madame_st_clair).
actor(the_cotton_club, laurence_fishburne, bumpy_rhodes).
actor(the_cotton_club, john_p_ryan, joe_flynn).
actor(the_cotton_club, tom_waits, irving_stark).
actor(the_cotton_club, ron_karabatsos, mike_best).
actor(the_cotton_club, glenn_withrow, ed_popke).
actress(the_cotton_club, jennifer_grey, patsy_dwyer).
actress(the_cotton_club, wynonna_smith, winnie_williams).
actress(the_cotton_club, thelma_carpenter, norma_williams).
actor(the_cotton_club, charles_honi_coles, suger_coates).
actor(the_cotton_club, larry_marshall, cab_calloway_minnie_the_moocher__lady_with_the_fan_and_jitterbug_sung_by).
actor(the_cotton_club, joe_dallesandro, charles_lucky_luciano).
actor(the_cotton_club, ed_o_ross, monk).
actor(the_cotton_club, frederick_downs_jr, sullen_man).
actress(the_cotton_club, diane_venora, gloria_swanson).
actor(the_cotton_club, tucker_smallwood, kid_griffin).
actor(the_cotton_club, woody_strode, holmes).
actor(the_cotton_club, bill_graham, j_w).
actor(the_cotton_club, dayton_allen, solly).
actor(the_cotton_club, kim_chan, ling).
actor(the_cotton_club, ed_rowan, messiah).
actor(the_cotton_club, leonard_termo, danny).
actor(the_cotton_club, george_cantero, vince_hood).
actor(the_cotton_club, brian_tarantina, vince_hood).
actor(the_cotton_club, bruce_macvittie, vince_hood).
actor(the_cotton_club, james_russo, vince_hood).
actor(the_cotton_club, giancarlo_esposito, bumpy_hood).
actor(the_cotton_club, bruce_hubbard, bumpy_hood).
actor(the_cotton_club, rony_clanton, caspar_holstein).
actor(the_cotton_club, damien_leake, bub_jewett).
actor(the_cotton_club, bill_cobbs, big_joe_ison).
actor(the_cotton_club, joe_lynn, marcial_flores).
actor(the_cotton_club, oscar_barnes, spanish_henry).
actor(the_cotton_club, ed_zang, hotel_clerk).
actress(the_cotton_club, sandra_beall, myrtle_fay).
actor(the_cotton_club, zane_mark, duke_ellington).
actor(the_cotton_club, tom_signorelli, butch_murdock).
actor(the_cotton_club, paul_herman, policeman_1).
actor(the_cotton_club, randle_mell, policeman_2).
actor(the_cotton_club, steve_vignari, trigger_mike_coppola).
actress(the_cotton_club, susan_mechsner, gypsie).
actor(the_cotton_club, gregory_rozakis, charlie_chaplin).
actor(the_cotton_club, marc_coppola, ted_husing).
actress(the_cotton_club, norma_jean_darden, elda_webb).
actor(the_cotton_club, robert_earl_jones, stage_door_joe).
actor(the_cotton_club, vincent_jerosa, james_cagney).
actress(the_cotton_club, rosalind_harris, fanny_brice).
actor(the_cotton_club, steve_cafiso, child_in_street).
actor(the_cotton_club, john_cafiso, child_in_street).
actress(the_cotton_club, sofia_coppola, child_in_street).
actress(the_cotton_club, ninon_digiorgio, child_in_street).
actress(the_cotton_club, daria_hines, child_in_street).
actress(the_cotton_club, patricia_letang, child_in_street).
actor(the_cotton_club, christopher_lewis, child_in_street).
actress(the_cotton_club, danielle_osborne, child_in_street).
actor(the_cotton_club, jason_papalardo, child_in_street).
actor(the_cotton_club, demetrius_pena, child_in_street).
actress(the_cotton_club, priscilla_baskerville, creole_love_call_sung_by).
actress(the_cotton_club, ethel_beatty, bandana_babies_lead_vocal_dancer).
actress(the_cotton_club, sydney_goldsmith, barbecue_bess_sung_by).
actor(the_cotton_club, james_buster_brown, hoofer).
actor(the_cotton_club, ralph_brown, hoofer).
actor(the_cotton_club, harold_cromer, hoofer).
actor(the_cotton_club, bubba_gaines, hoofer).
actor(the_cotton_club, george_hillman, hoofer).
actor(the_cotton_club, henry_phace_roberts, hoofer).
actor(the_cotton_club, howard_sandman_sims, hoofer).
actor(the_cotton_club, jimmy_slyde, hoofer).
actor(the_cotton_club, henry_letang, hoofer).
actor(the_cotton_club, charles_young, hoofer).
actor(the_cotton_club, skip_cunningham, tip_tap__toe).
actor(the_cotton_club, luther_fontaine, tip_tap__toe).
actor(the_cotton_club, jan_mickens, tip_tap__toe).
actress(the_cotton_club, lydia_abarca, dancer).
actress(the_cotton_club, sarita_allen, dancer).
actress(the_cotton_club, tracey_bass, dancer).
actress(the_cotton_club, jacquelyn_bird, dancer).
actress(the_cotton_club, shirley_black_brown, dancer).
actress(the_cotton_club, jhoe_breedlove, dancer).
actor(the_cotton_club, lester_brown, dancer).
actress(the_cotton_club, leslie_caldwell, dancer).
actress(the_cotton_club, melanie_caldwell, dancer).
actor(the_cotton_club, benny_clorey, dancer).
actress(the_cotton_club, sheri_cowart, dancer).
actress(the_cotton_club, karen_dibianco, dancer).
actress(the_cotton_club, cisco_drayton, dancer).
actress(the_cotton_club, anne_duquesnay, dancer).
actress(the_cotton_club, carla_earle, dancer).
actress(the_cotton_club, wendy_edmead, dancer).
actress(the_cotton_club, debbie_fitts, dancer).
actor(the_cotton_club, ruddy_l_garner, dancer).
actress(the_cotton_club, ruthanna_graves, dancer).
actress(the_cotton_club, terri_griffin, dancer).
actress(the_cotton_club, robin_harmon, dancer).
actress(the_cotton_club, jackee_harree, dancer).
actress(the_cotton_club, sonya_hensley, dancer).
actor(the_cotton_club, dave_jackson, dancer).
actress(the_cotton_club, gail_kendricks, dancer).
actress(the_cotton_club, christina_kumi_kimball, dancer).
actress(the_cotton_club, mary_beth_kurdock, dancer).
actor(the_cotton_club, alde_lewis, dancer).
actress(the_cotton_club, paula_lynn, dancer).
actor(the_cotton_club, bernard_manners, dancer).
actor(the_cotton_club, bernard_marsh, dancer).
actor(the_cotton_club, david_mcharris, dancer).
actress(the_cotton_club, delores_mcharris, dancer).
actress(the_cotton_club, vody_najac, dancer).
actress(the_cotton_club, vya_negromonte, dancer).
actress(the_cotton_club, alice_anne_oates, dancer).
actress(the_cotton_club, anne_palmer, dancer).
actress(the_cotton_club, julie_pars, dancer).
actress(the_cotton_club, antonia_pettiford, dancer).
actress(the_cotton_club, valarie_pettiford, dancer).
actress(the_cotton_club, janet_powell, dancer).
actress(the_cotton_club, renee_rodriguez, dancer).
actress(the_cotton_club, tracey_ross, dancer).
actress(the_cotton_club, kiki_shepard, dancer).
actor(the_cotton_club, gary_thomas, dancer).
actor(the_cotton_club, mario_van_peebles, dancer).
actress(the_cotton_club, rima_vetter, dancer).
actress(the_cotton_club, karen_wadkins, dancer).
actor(the_cotton_club, ivery_wheeler, dancer).
actor(the_cotton_club, donald_williams, dancer).
actress(the_cotton_club, alexis_wilson, dancer).
actor(the_cotton_club, george_coutoupis, gangster).
actor(the_cotton_club, nicholas_j_giangiulio, screen_test_thug).
actress(the_cotton_club, suzanne_kaaren, the_duchess_of_park_avenue).
actor(the_cotton_club, mark_margolis, gunman_sooting_cage_s_character).
actor(the_cotton_club, kirk_taylor, cotton_club_waiter).
actor(the_cotton_club, stan_tracy, legs_diamond_s_bodyguard).
actor(the_cotton_club, rick_washburn, hitman).

movie(cq, 2001).
director(cq, roman_coppola).
actor(cq, jeremy_davies, paul).
actress(cq, angela_lindvall, dragonfly_valentine).
actress(cq, lodie_bouchez, marlene).
actor(cq, g_rard_depardieu, andrezej).
actor(cq, giancarlo_giannini, enzo).
actor(cq, massimo_ghini, fabrizio).
actor(cq, jason_schwartzman, felix_demarco).
actor(cq, billy_zane, mr_e).
actor(cq, john_phillip_law, chairman).
actor(cq, silvio_muccino, pippo).
actor(cq, dean_stockwell, dr_ballard).
actress(cq, natalia_vodianova, brigit).
actor(cq, bernard_verley, trailer_voiceover_actor).
actor(cq, l_m_kit_carson, fantasy_critic).
actor(cq, chris_bearne, fantasy_critic).
actor(cq, jean_paul_scarpitta, fantasy_critic).
actor(cq, nicolas_saada, fantasy_critic).
actor(cq, remi_fourquin, fantasy_critic).
actor(cq, jean_claude_schlim, fantasy_critic).
actress(cq, sascha_ley, fantasy_critic).
actor(cq, jacques_deglas, fantasy_critic).
actor(cq, gilles_soeder, fantasy_critic).
actor(cq, julian_nest, festival_critic).
actress(cq, greta_seacat, festival_critic).
actress(cq, barbara_sarafian, festival_critic).
actor(cq, leslie_woodhall, board_member).
actor(cq, jean_baptiste_kremer, board_member).
actor(cq, franck_sasonoff, angry_man_at_riots).
actor(cq, jean_fran_ois_wolff, party_man).
actor(cq, eric_connor, long_haired_actor_at_party).
actress(cq, diana_gartner, cute_model_at_party).
actress(cq, st_phanie_gesnel, actress_at_party).
actor(cq, fr_d_ric_de_brabant, steward).
actor(cq, shawn_mortensen, revolutionary_guard).
actor(cq, matthieu_tonetti, revolutionary_guard).
actress(cq, ann_maes, vampire_actress).
actress(cq, gintare_parulyte, vampire_actress).
actress(cq, caroline_lies, vampire_actress).
actress(cq, stoyanka_tanya_gospodinova, vampire_actress).
actress(cq, magali_dahan, vampire_actress).
actress(cq, natalie_broker, vampire_actress).
actress(cq, wanda_perdelwitz, vampire_actress).
actor(cq, mark_thompson_ashworth, lead_ghoul).
actor(cq, pieter_riemens, assistant_director).
actress(cq, federica_citarella, talkative_girl).
actor(cq, andrea_cormaci, soldier_boy).
actress(cq, corinne_terenzi, teen_lover).
actress(cq, sofia_coppola, enzo_s_mistress).
actor(cq, emidio_la_vella, italian_actor).
actor(cq, massimo_schina, friendly_guy_at_party).
actress(cq, caroline_colombini, girl_in_miniskirt).
actress(cq, rosa_pianeta, woman_in_fiat).
actor(cq, christophe_chrompin, jealous_boyfriend).
actor(cq, romain_duris, hippie_filmmaker).
actor(cq, chris_anthony, second_assistant_director).
actor(cq, dean_tavoularis, man_at_screening).

movie(crimewave, 1985).
director(crimewave, sam_raimi).
actress(crimewave, louise_lasser, helene_trend).
actor(crimewave, paul_l_smith, faron_crush).
actor(crimewave, brion_james, arthur_coddish).
actress(crimewave, sheree_j_wilson, nancy).
actor(crimewave, edward_r_pressman, ernest_trend).
actor(crimewave, bruce_campbell, renaldo_the_heel).
actor(crimewave, reed_birney, vic_ajax).
actor(crimewave, richard_bright, officer_brennan).
actor(crimewave, antonio_fargas, blind_man).
actor(crimewave, hamid_dana, donald_odegard).
actor(crimewave, john_hardy, mr_yarman).
actor(crimewave, emil_sitka, colonel_rodgers).
actor(crimewave, hal_youngblood, jack_elroy).
actor(crimewave, sean_farley, jack_elroy_jr).
actor(crimewave, richard_demanincor, officer_garvey).
actress(crimewave, carrie_hall, cheap_dish).
actor(crimewave, wiley_harker, governor).
actor(crimewave, julius_harris, hardened_convict).
actor(crimewave, ralph_drischell, executioner).
actor(crimewave, robert_symonds, guard_1).
actor(crimewave, patrick_stack, guard_2).
actor(crimewave, philip_a_gillis, priest).
actress(crimewave, bridget_hoffman, nun).
actress(crimewave, ann_marie_gillis, nun).
actress(crimewave, frances_mcdormand, nun).
actress(crimewave, carol_brinn, old_woman).
actor(crimewave, matthew_taylor, muscleman).
actor(crimewave, perry_mallette, grizzled_veteran).
actor(crimewave, chuck_gaidica, weatherman).
actor(crimewave, jimmie_launce, announcer).
actor(crimewave, joseph_french, bandleader).
actor(crimewave, ted_raimi, waiter).
actor(crimewave, dennis_chaitlin, fat_waiter).
actor(crimewave, joel_coen, reporter_at_execution).
actress(crimewave, julie_harris, '').
actor(crimewave, dan_nelson, waiter).

movie(down_from_the_mountain, 2000).
director(down_from_the_mountain, nick_doob).
director(down_from_the_mountain, chris_hegedus).
director(down_from_the_mountain, d_a_pennebaker).
actress(down_from_the_mountain, evelyn_cox, herself).
actor(down_from_the_mountain, sidney_cox, himself).
actress(down_from_the_mountain, suzanne_cox, herself).
actor(down_from_the_mountain, willard_cox, himself).
actor(down_from_the_mountain, nathan_best, himself).
actor(down_from_the_mountain, issac_freeman, himself).
actor(down_from_the_mountain, robert_hamlett, himself).
actor(down_from_the_mountain, joseph_rice, himself).
actor(down_from_the_mountain, wilson_waters_jr, himself).
actor(down_from_the_mountain, john_hartford, himself).
actor(down_from_the_mountain, larry_perkins, himself).
actress(down_from_the_mountain, emmylou_harris, herself).
actor(down_from_the_mountain, chris_thomas_king, himself).
actress(down_from_the_mountain, alison_krauss, herself).
actor(down_from_the_mountain, colin_linden, himself).
actor(down_from_the_mountain, pat_enright, himself).
actor(down_from_the_mountain, gene_libbea, himself).
actor(down_from_the_mountain, alan_o_bryant, himself).
actor(down_from_the_mountain, roland_white, himself).
actress(down_from_the_mountain, hannah_peasall, herself).
actress(down_from_the_mountain, leah_peasall, herself).
actress(down_from_the_mountain, sarah_peasall, herself).
actor(down_from_the_mountain, ralph_stanley, himself).
actress(down_from_the_mountain, gillian_welch, herself).
actor(down_from_the_mountain, david_rawlings, himself).
actor(down_from_the_mountain, buck_white, himself).
actress(down_from_the_mountain, cheryl_white, herself).
actress(down_from_the_mountain, sharon_white, herself).
actor(down_from_the_mountain, barry_bales, house_band_bass).
actor(down_from_the_mountain, ron_block, house_band_banjo).
actor(down_from_the_mountain, mike_compton, house_band_mandolin).
actor(down_from_the_mountain, jerry_douglas, house_band_dobro).
actor(down_from_the_mountain, stuart_duncan, house_band_fiddle).
actor(down_from_the_mountain, chris_sharp, house_band_guitar).
actor(down_from_the_mountain, dan_tyminski, house_band_guitar).
actor(down_from_the_mountain, t_bone_burnett, himself).
actor(down_from_the_mountain, ethan_coen, himself).
actor(down_from_the_mountain, joel_coen, himself).
actress(down_from_the_mountain, holly_hunter, herself).
actor(down_from_the_mountain, tim_blake_nelson, himself).
actor(down_from_the_mountain, billy_bob_thornton, audience_member).
actor(down_from_the_mountain, wes_motley, audience_member).
actress(down_from_the_mountain, tamara_trexler, audience_member).

movie(fargo, 1996).
director(fargo, ethan_coen).
director(fargo, joel_coen).
actor(fargo, william_h_macy, jerry_lundegaard).
actor(fargo, steve_buscemi, carl_showalter).
actor(fargo, peter_stormare, gaear_grimsrud).
actress(fargo, kristin_rudr_d, jean_lundegaard).
actor(fargo, harve_presnell, wade_gustafson).
actor(fargo, tony_denman, scotty_lundegaard).
actor(fargo, gary_houston, irate_customer).
actress(fargo, sally_wingert, irate_customer_s_wife).
actor(fargo, kurt_schweickhardt, car_salesman).
actress(fargo, larissa_kokernot, hooker_1).
actress(fargo, melissa_peterman, hooker_2).
actor(fargo, steve_reevis, shep_proudfoot).
actor(fargo, warren_keith, reilly_diefenbach).
actor(fargo, steve_edelman, morning_show_host).
actress(fargo, sharon_anderson, morning_show_hostess).
actor(fargo, larry_brandenburg, stan_grossman).
actor(fargo, james_gaulke, state_trooper).
actor(fargo, j_todd_anderson, victim_in_the_field).
actress(fargo, michelle_suzanne_ledoux, victim_in_car).
actress(fargo, frances_mcdormand, marge_gunderson).
actor(fargo, john_carroll_lynch, norm_gunderson).
actor(fargo, bruce_bohne, lou).
actress(fargo, petra_boden, cashier).
actor(fargo, steve_park, mike_yanagita).
actor(fargo, wayne_a_evenson, customer).
actor(fargo, cliff_rakerd, officer_olson).
actress(fargo, jessica_shepherd, hotel_clerk).
actor(fargo, peter_schmitz, airport_lot_attendant).
actor(fargo, steven_i_schafer, mechanic).
actress(fargo, michelle_hutchison, escort).
actor(fargo, david_s_lomax, man_in_hallway).
actor(fargo, jos_feliciano, himself).
actor(fargo, bix_skahill, night_parking_attendant).
actor(fargo, bain_boehlke, mr_mohra).
actress(fargo, rose_stockton, valerie).
actor(fargo, robert_ozasky, bismarck_cop_1).
actor(fargo, john_bandemer, bismarck_cop_2).
actor(fargo, don_wescott, bark_beetle_narrator).
actor(fargo, bruce_campbell, soap_opera_actor).
actor(fargo, clifford_nelson, heavyset_man_in_bar).

movie(the_firm, 1993).
director(the_firm, sydney_pollack).
actor(the_firm, tom_cruise, mitch_mcdeere).
actress(the_firm, jeanne_tripplehorn, abby_mcdeere).
actor(the_firm, gene_hackman, avery_tolar).
actor(the_firm, hal_holbrook, oliver_lambert).
actor(the_firm, terry_kinney, lamar_quinn).
actor(the_firm, wilford_brimley, william_devasher).
actor(the_firm, ed_harris, wayne_tarrance).
actress(the_firm, holly_hunter, tammy_hemphill).
actor(the_firm, david_strathairn, ray_mcdeere).
actor(the_firm, gary_busey, eddie_lomax).
actor(the_firm, steven_hill, f_denton_voyles).
actor(the_firm, tobin_bell, the_nordic_man).
actress(the_firm, barbara_garrick, kay_quinn).
actor(the_firm, jerry_hardin, royce_mcknight).
actor(the_firm, paul_calderon, thomas_richie).
actor(the_firm, jerry_weintraub, sonny_capps).
actor(the_firm, sullivan_walker, barry_abanks).
actress(the_firm, karina_lombard, young_woman_on_beach).
actress(the_firm, margo_martindale, nina_huff).
actor(the_firm, john_beal, nathan_locke).
actor(the_firm, dean_norris, the_squat_man).
actor(the_firm, lou_walker, frank_mulholland).
actress(the_firm, debbie_turner, rental_agent).
actor(the_firm, tommy_cresswell, wally_hudson).
actor(the_firm, david_a_kimball, randall_dunbar).
actor(the_firm, don_jones, attorney).
actor(the_firm, michael_allen, attorney).
actor(the_firm, levi_frazier_jr, restaurant_waiter).
actor(the_firm, brian_casey, telephone_installer).
actor(the_firm, reverend_william_j_parham, minister).
actor(the_firm, victor_nelson, cafe_waiter).
actor(the_firm, richard_ranta, congressman_billings).
actress(the_firm, janie_paris, madge).
actor(the_firm, frank_crawford, judge).
actor(the_firm, bart_whiteman, dutch).
actor(the_firm, david_dwyer, prison_guard).
actor(the_firm, mark_w_johnson, fbi_agent).
actor(the_firm, jerry_chipman, fbi_agent).
actor(the_firm, jimmy_lackie, technician).
actor(the_firm, afemo_omilami, cotton_truck_driver).
actor(the_firm, clint_smith, cotton_truck_driver).
actress(the_firm, susan_elliott, river_museum_guide).
actress(the_firm, erin_branham, river_museum_guide).
actor(the_firm, ed_connelly, pilot).
actress(the_firm, joey_anderson, ruth).
actress(the_firm, deborah_thomas, quinns_maid).
actor(the_firm, tommy_matthews, elvis_aaron_hemphill).
actor(the_firm, chris_schadrack, lawyer_recruiter).
actor(the_firm, buck_ford, lawyer_recruiter).
actor(the_firm, jonathan_kaplan, lawyer_recruiter).
actress(the_firm, rebecca_glenn, young_woman_at_patio_bar).
actress(the_firm, terri_welles, woman_dancing_with_avery).
actor(the_firm, greg_goossen, vietnam_veteran).
actress(the_firm, jeane_aufdenberg, car_rental_agent).
actor(the_firm, william_r_booth, seaplane_pilot).
actor(the_firm, ollie_nightingale, restaurant_singer).
actor(the_firm, teenie_hodges, restaurant_lead_guitarist).
actor(the_firm, little_jimmy_king, memphis_street_musician).
actor(the_firm, james_white, singer_at_hyatt).
actor(the_firm, shan_brisendine, furniture_mover).
actor(the_firm, harry_dach, garbage_truck_driver).
actress(the_firm, julia_hayes, girl_in_bar).
actor(the_firm, tom_mccrory, associate).
actor(the_firm, paul_sorvino, tommie_morolto).
actor(the_firm, joe_viterelli, joey_morolto).

movie(frankenweenie, 1984).
director(frankenweenie, tim_burton).
actress(frankenweenie, shelley_duvall, susan_frankenstein).
actor(frankenweenie, daniel_stern, ben_frankenstein).
actor(frankenweenie, barret_oliver, victor_frankenstein).
actor(frankenweenie, joseph_maher, mr_chambers).
actress(frankenweenie, roz_braverman, mrs_epstein).
actor(frankenweenie, paul_bartel, mr_walsh).
actress(frankenweenie, sofia_coppola, anne_chambers).
actor(frankenweenie, jason_hervey, frank_dale).
actor(frankenweenie, paul_c_scott, mike_anderson).
actress(frankenweenie, helen_boll, mrs_curtis).
actor(frankenweenie, sparky, sparky).
actor(frankenweenie, rusty_james, raymond).

movie(ghost_busters, 1984).
director(ghost_busters, ivan_reitman).
actor(ghost_busters, bill_murray, dr_peter_venkman).
actor(ghost_busters, dan_aykroyd, dr_raymond_stantz).
actress(ghost_busters, sigourney_weaver, dana_barrett).
actor(ghost_busters, harold_ramis, dr_egon_spengler).
actor(ghost_busters, rick_moranis, louis_tully).
actress(ghost_busters, annie_potts, janine_melnitz).
actor(ghost_busters, william_atherton, walter_peck_wally_wick).
actor(ghost_busters, ernie_hudson, winston_zeddmore).
actor(ghost_busters, david_margulies, mayor).
actor(ghost_busters, steven_tash, male_student).
actress(ghost_busters, jennifer_runyon, female_student).
actress(ghost_busters, slavitza_jovan, gozer).
actor(ghost_busters, michael_ensign, hotel_manager).
actress(ghost_busters, alice_drummond, librarian).
actor(ghost_busters, jordan_charney, dean_yeager).
actor(ghost_busters, timothy_carhart, violinist).
actor(ghost_busters, john_rothman, library_administrator).
actor(ghost_busters, tom_mcdermott, archbishop).
actor(ghost_busters, roger_grimsby, himself).
actor(ghost_busters, larry_king, himself).
actor(ghost_busters, joe_franklin, himself).
actor(ghost_busters, casey_kasem, himself).
actor(ghost_busters, john_ring, fire_commissioner).
actor(ghost_busters, norman_matlock, police_commissioner).
actor(ghost_busters, joe_cirillo, police_captain).
actor(ghost_busters, joe_schmieg, police_seargeant).
actor(ghost_busters, reginald_veljohnson, jail_guard).
actress(ghost_busters, rhoda_gemignani, real_estate_woman).
actor(ghost_busters, murray_rubin, man_at_elevator).
actor(ghost_busters, larry_dilg, con_edison_man).
actor(ghost_busters, danny_stone, coachman).
actress(ghost_busters, patty_dworkin, woman_at_party).
actress(ghost_busters, jean_kasem, tall_woman_at_party).
actor(ghost_busters, lenny_del_genio, doorman).
actress(ghost_busters, frances_e_nealy, chambermaid).
actor(ghost_busters, sam_moses, hot_dog_vendor).
actor(ghost_busters, christopher_wynkoop, tv_reporter).
actor(ghost_busters, winston_may, businessman_in_cab).
actor(ghost_busters, tommy_hollis, mayor_s_aide).
actress(ghost_busters, eda_reiss_merin, louis_s_neighbor).
actor(ghost_busters, ric_mancini, policeman_at_apartment).
actress(ghost_busters, kathryn_janssen, mrs_van_hoffman).
actor(ghost_busters, stanley_grover, reporter).
actress(ghost_busters, carol_ann_henry, reporter).
actor(ghost_busters, james_hardie, reporter).
actress(ghost_busters, frances_turner, reporter).
actress(ghost_busters, nancy_kelly, reporter).
actor(ghost_busters, paul_trafas, ted_fleming).
actress(ghost_busters, cheryl_birchenfield, annette_fleming).
actress(ghost_busters, ruth_oliver, library_ghost).
actress(ghost_busters, kymberly_herrin, dream_ghost).
actor(ghost_busters, larry_bilzarian, prisoner).
actor(ghost_busters, matteo_cafiso, boy_at_hot_dog_stand).
actress(ghost_busters, paddi_edwards, gozer).
actress(ghost_busters, deborah_gibson, birthday_girl_in_tavern_on_the_green).
actor(ghost_busters, charles_levin, honeymooner).
actor(ghost_busters, joseph_marzano, man_in_taxi).
actor(ghost_busters, joe_medjuck, man_at_library).
actor(ghost_busters, frank_patton, city_hall_cop).
actor(ghost_busters, harrison_ray, terror_dog).
actor(ghost_busters, ivan_reitman, zuul_slimer).
actor(ghost_busters, mario_todisco, prisoner).
actor(ghost_busters, bill_walton, himself).

movie(girl_with_a_pearl_earring, 2003).
director(girl_with_a_pearl_earring, peter_webber).
actor(girl_with_a_pearl_earring, colin_firth, johannes_vermeer).
actress(girl_with_a_pearl_earring, scarlett_johansson, griet).
actor(girl_with_a_pearl_earring, tom_wilkinson, van_ruijven).
actress(girl_with_a_pearl_earring, judy_parfitt, maria_thins).
actor(girl_with_a_pearl_earring, cillian_murphy, pieter).
actress(girl_with_a_pearl_earring, essie_davis, catharina_vermeer).
actress(girl_with_a_pearl_earring, joanna_scanlan, tanneke).
actress(girl_with_a_pearl_earring, alakina_mann, cornelia_vermeer).
actor(girl_with_a_pearl_earring, chris_mchallem, griet_s_father).
actress(girl_with_a_pearl_earring, gabrielle_reidy, griet_s_mother).
actor(girl_with_a_pearl_earring, rollo_weeks, frans).
actress(girl_with_a_pearl_earring, anna_popplewell, maertge).
actress(girl_with_a_pearl_earring, ana_s_nepper, lisbeth).
actress(girl_with_a_pearl_earring, melanie_meyfroid, aleydis).
actor(girl_with_a_pearl_earring, nathan_nepper, johannes).
actress(girl_with_a_pearl_earring, lola_carpenter, baby_franciscus).
actress(girl_with_a_pearl_earring, charlotte_carpenter, baby_franciscus).
actress(girl_with_a_pearl_earring, olivia_chauveau, baby_franciscus).
actor(girl_with_a_pearl_earring, geoff_bell, paul_the_butcher).
actress(girl_with_a_pearl_earring, virginie_colin, emilie_van_ruijven).
actress(girl_with_a_pearl_earring, sarah_drews, van_ruijven_s_daughter).
actress(girl_with_a_pearl_earring, christelle_bulckaen, wet_nurse).
actor(girl_with_a_pearl_earring, john_mcenery, apothecary).
actress(girl_with_a_pearl_earring, gintare_parulyte, model).
actress(girl_with_a_pearl_earring, claire_johnston, white_haired_woman).
actor(girl_with_a_pearl_earring, marc_maes, old_gentleman).
actor(girl_with_a_pearl_earring, robert_sibenaler, priest).
actor(girl_with_a_pearl_earring, dustin_james, servant_1).
actor(girl_with_a_pearl_earring, joe_reavis, servant_2).
actor(girl_with_a_pearl_earring, martin_serene, sergeant).
actor(girl_with_a_pearl_earring, chris_kelly, gay_blade).
actor(girl_with_a_pearl_earring, leslie_woodhall, neighbour).

movie(the_godfather, 1972).
director(the_godfather, francis_ford_coppola).
actor(the_godfather, marlon_brando, don_vito_corleone).
actor(the_godfather, al_pacino, michael_corleone).
actor(the_godfather, james_caan, santino_sonny_corleone).
actor(the_godfather, richard_s_castellano, pete_clemenza).
actor(the_godfather, robert_duvall, tom_hagen).
actor(the_godfather, sterling_hayden, capt_mark_mccluskey).
actor(the_godfather, john_marley, jack_woltz).
actor(the_godfather, richard_conte, emilio_barzini).
actor(the_godfather, al_lettieri, virgil_sollozzo).
actress(the_godfather, diane_keaton, kay_adams).
actor(the_godfather, abe_vigoda, salvadore_sally_tessio).
actress(the_godfather, talia_shire, connie).
actor(the_godfather, gianni_russo, carlo_rizzi).
actor(the_godfather, john_cazale, fredo).
actor(the_godfather, rudy_bond, ottilio_cuneo).
actor(the_godfather, al_martino, johnny_fontane).
actress(the_godfather, morgana_king, mama_corleone).
actor(the_godfather, lenny_montana, luca_brasi).
actor(the_godfather, john_martino, paulie_gatto).
actor(the_godfather, salvatore_corsitto, amerigo_bonasera).
actor(the_godfather, richard_bright, al_neri).
actor(the_godfather, alex_rocco, moe_greene).
actor(the_godfather, tony_giorgio, bruno_tattaglia).
actor(the_godfather, vito_scotti, nazorine).
actress(the_godfather, tere_livrano, theresa_hagen).
actor(the_godfather, victor_rendina, philip_tattaglia).
actress(the_godfather, jeannie_linero, lucy_mancini).
actress(the_godfather, julie_gregg, sandra_corleone).
actress(the_godfather, ardell_sheridan, mrs_clemenza).
actress(the_godfather, simonetta_stefanelli, apollonia_vitelli_corleone).
actor(the_godfather, angelo_infanti, fabrizio).
actor(the_godfather, corrado_gaipa, don_tommasino).
actor(the_godfather, franco_citti, calo).
actor(the_godfather, saro_urz, vitelli).
actor(the_godfather, carmine_coppola, piano_player_in_montage_scene).
actor(the_godfather, gian_carlo_coppola, baptism_observer).
actress(the_godfather, sofia_coppola, michael_francis_rizzi).
actor(the_godfather, ron_gilbert, usher_in_bridal_party).
actor(the_godfather, anthony_gounaris, anthony_vito_corleone).
actor(the_godfather, joe_lo_grippo, sonny_s_bodyguard).
actor(the_godfather, sonny_grosso, cop_with_capt_mccluskey_outside_hospital).
actor(the_godfather, louis_guss, don_zaluchi_outspoken_don_at_the_peace_conference).
actor(the_godfather, randy_jurgensen, sonny_s_killer_1).
actor(the_godfather, tony_lip, wedding_guest).
actor(the_godfather, frank_macetta, '').
actor(the_godfather, lou_martini_jr, boy_at_wedding).
actor(the_godfather, father_joseph_medeglia, priest_at_baptism).
actor(the_godfather, rick_petrucelli, man_in_passenger_seat_when_michael_is_driven_to_the_hospital).
actor(the_godfather, burt_richards, floral_designer).
actor(the_godfather, sal_richards, drunk).
actor(the_godfather, tom_rosqui, rocco_lampone).
actor(the_godfather, frank_sivero, extra).
actress(the_godfather, filomena_spagnuolo, extra_at_wedding_scene).
actor(the_godfather, joe_spinell, willie_cicci).
actor(the_godfather, gabriele_torrei, enzo_robutti_the_baker).
actor(the_godfather, nick_vallelonga, wedding_party_guest).
actor(the_godfather, ed_vantura, wedding_guest).
actor(the_godfather, matthew_vlahakis, clemenza_s_son_pushing_toy_car_in_driveway).

movie(the_godfather_part_ii, 1974).
director(the_godfather_part_ii, francis_ford_coppola).
actor(the_godfather_part_ii, al_pacino, don_michael_corleone).
actor(the_godfather_part_ii, robert_duvall, tom_hagen).
actress(the_godfather_part_ii, diane_keaton, kay_corleone).
actor(the_godfather_part_ii, robert_de_niro, vito_corleone).
actor(the_godfather_part_ii, john_cazale, fredo_corleone).
actress(the_godfather_part_ii, talia_shire, connie_corleone).
actor(the_godfather_part_ii, lee_strasberg, hyman_roth).
actor(the_godfather_part_ii, michael_v_gazzo, frankie_pentangeli).
actor(the_godfather_part_ii, g_d_spradlin, sen_pat_geary).
actor(the_godfather_part_ii, richard_bright, al_neri).
actor(the_godfather_part_ii, gastone_moschin, don_fanucci).
actor(the_godfather_part_ii, tom_rosqui, rocco_lampone).
actor(the_godfather_part_ii, bruno_kirby, young_clemenza_peter).
actor(the_godfather_part_ii, frank_sivero, genco_abbandando).
actress(the_godfather_part_ii, francesca_de_sapio, young_mama_corleone).
actress(the_godfather_part_ii, morgana_king, older_carmella_mama_corleone).
actress(the_godfather_part_ii, marianna_hill, deanna_dunn_corleone).
actor(the_godfather_part_ii, leopoldo_trieste, signor_roberto_landlord).
actor(the_godfather_part_ii, dominic_chianese, johnny_ola).
actor(the_godfather_part_ii, amerigo_tot, busetta_michael_s_bodyguard).
actor(the_godfather_part_ii, troy_donahue, merle_johnson).
actor(the_godfather_part_ii, john_aprea, young_sal_tessio).
actor(the_godfather_part_ii, joe_spinell, willie_cicci).
actor(the_godfather_part_ii, james_caan, sonny_corleone_special_participation).
actor(the_godfather_part_ii, abe_vigoda, sal_tessio).
actress(the_godfather_part_ii, tere_livrano, theresa_hagen).
actor(the_godfather_part_ii, gianni_russo, carlo_rizzi).
actress(the_godfather_part_ii, maria_carta, signora_andolini_vito_s_mother).
actor(the_godfather_part_ii, oreste_baldini, young_vito_andolini).
actor(the_godfather_part_ii, giuseppe_sillato, don_francesco_ciccio).
actor(the_godfather_part_ii, mario_cotone, don_tommasino).
actor(the_godfather_part_ii, james_gounaris, anthony_vito_corleone).
actress(the_godfather_part_ii, fay_spain, mrs_marcia_roth).
actor(the_godfather_part_ii, harry_dean_stanton, fbi_man_1).
actor(the_godfather_part_ii, david_baker, fbi_man_2).
actor(the_godfather_part_ii, carmine_caridi, carmine_rosato).
actor(the_godfather_part_ii, danny_aiello, tony_rosato).
actor(the_godfather_part_ii, carmine_foresta, policeman).
actor(the_godfather_part_ii, nick_discenza, bartender).
actor(the_godfather_part_ii, father_joseph_medeglia, father_carmelo).
actor(the_godfather_part_ii, william_bowers, senate_committee_chairman).
actor(the_godfather_part_ii, joseph_della_sorte, michael_s_buttonman_1).
actor(the_godfather_part_ii, carmen_argenziano, michael_s_buttonman_2).
actor(the_godfather_part_ii, joe_lo_grippo, michael_s_buttonman_3).
actor(the_godfather_part_ii, ezio_flagello, impresario).
actor(the_godfather_part_ii, livio_giorgi, tenor_in_senza_mamma).
actress(the_godfather_part_ii, kathleen_beller, girl_in_senza_mamma).
actress(the_godfather_part_ii, saveria_mazzola, signora_colombo).
actor(the_godfather_part_ii, tito_alba, cuban_pres_fulgencio_batista).
actor(the_godfather_part_ii, johnny_naranjo, cuban_translator).
actress(the_godfather_part_ii, elda_maida, pentangeli_s_wife).
actor(the_godfather_part_ii, salvatore_po, vincenzo_pentangeli).
actor(the_godfather_part_ii, ignazio_pappalardo, mosca_assassin_in_sicily).
actor(the_godfather_part_ii, andrea_maugeri, strollo).
actor(the_godfather_part_ii, peter_lacorte, signor_abbandando).
actor(the_godfather_part_ii, vincent_coppola, street_vendor).
actor(the_godfather_part_ii, peter_donat, questadt).
actor(the_godfather_part_ii, tom_dahlgren, fred_corngold).
actor(the_godfather_part_ii, paul_b_brown, sen_ream).
actor(the_godfather_part_ii, phil_feldman, senator_1).
actor(the_godfather_part_ii, roger_corman, senator_2).
actress(the_godfather_part_ii, ivonne_coll, yolanda).
actor(the_godfather_part_ii, joe_de_nicola, attendant_at_brothel).
actor(the_godfather_part_ii, edward_van_sickle, ellis_island_doctor).
actress(the_godfather_part_ii, gabriella_belloni, ellis_island_nurse).
actor(the_godfather_part_ii, richard_watson, customs_official).
actress(the_godfather_part_ii, venancia_grangerard, cuban_nurse).
actress(the_godfather_part_ii, erica_yohn, governess).
actress(the_godfather_part_ii, theresa_tirelli, midwife).
actor(the_godfather_part_ii, roman_coppola, sonny_corleone_as_a_boy).
actress(the_godfather_part_ii, sofia_coppola, child_on_steamship_in_ny_harbor).
actor(the_godfather_part_ii, larry_guardino, vito_s_uncle).
actor(the_godfather_part_ii, gary_kurtz, photographer_in_court).
actress(the_godfather_part_ii, laura_lyons, '').
actress(the_godfather_part_ii, connie_mason, extra).
actor(the_godfather_part_ii, john_megna, young_hyman_roth).
actor(the_godfather_part_ii, frank_pesce, extra).
actress(the_godfather_part_ii, filomena_spagnuolo, extra_in_little_italy).

movie(the_godfather_part_iii, 1990).
director(the_godfather_part_iii, francis_ford_coppola).
actor(the_godfather_part_iii, al_pacino, don_michael_corleone).
actress(the_godfather_part_iii, diane_keaton, kay_adams_mitchelson).
actress(the_godfather_part_iii, talia_shire, connie_corleone_rizzi).
actor(the_godfather_part_iii, andy_garcia, don_vincent_vinnie_mancini_corleone).
actor(the_godfather_part_iii, eli_wallach, don_altobello).
actor(the_godfather_part_iii, joe_mantegna, joey_zasa).
actor(the_godfather_part_iii, george_hamilton, b_j_harrison).
actress(the_godfather_part_iii, bridget_fonda, grace_hamilton).
actress(the_godfather_part_iii, sofia_coppola, mary_corleone).
actor(the_godfather_part_iii, raf_vallone, cardinal_lamberto).
actor(the_godfather_part_iii, franc_d_ambrosio, anthony_vito_corleone_turiddu_sequence_cavalleria_rusticana).
actor(the_godfather_part_iii, donal_donnelly, archbishop_gilday).
actor(the_godfather_part_iii, richard_bright, al_neri).
actor(the_godfather_part_iii, helmut_berger, frederick_keinszig).
actor(the_godfather_part_iii, don_novello, dominic_abbandando).
actor(the_godfather_part_iii, john_savage, father_andrew_hagen).
actor(the_godfather_part_iii, franco_citti, calo).
actor(the_godfather_part_iii, mario_donatone, mosca).
actor(the_godfather_part_iii, vittorio_duse, don_tommasino).
actor(the_godfather_part_iii, enzo_robutti, don_licio_lucchesi).
actor(the_godfather_part_iii, michele_russo, spara).
actor(the_godfather_part_iii, al_martino, johnny_fontane).
actor(the_godfather_part_iii, robert_cicchini, lou_penning).
actor(the_godfather_part_iii, rogerio_miranda, twin_bodyguard_armand).
actor(the_godfather_part_iii, carlos_miranda, twin_bodyguard_francesco).
actor(the_godfather_part_iii, vito_antuofermo, anthony_the_ant_squigliaro_joey_zaza_s_bulldog).
actor(the_godfather_part_iii, robert_vento, father_john).
actor(the_godfather_part_iii, willie_brown, party_politician).
actress(the_godfather_part_iii, jeannie_linero, lucy_mancini).
actor(the_godfather_part_iii, remo_remotti, camerlengo_cardinal_cardinal__sistine).
actress(the_godfather_part_iii, jeanne_savarino_pesch, francesca_corleone).
actress(the_godfather_part_iii, janet_savarino_smith, kathryn_corleone).
actress(the_godfather_part_iii, tere_livrano, teresa_hagen).
actor(the_godfather_part_iii, carmine_caridi, albert_volpe).
actor(the_godfather_part_iii, don_costello, frank_romano).
actor(the_godfather_part_iii, al_ruscio, leo_cuneo).
actor(the_godfather_part_iii, mickey_knox, marty_parisi).
actor(the_godfather_part_iii, rick_aviles, mask_1).
actor(the_godfather_part_iii, michael_bowen, mask_2).
actor(the_godfather_part_iii, brett_halsey, douglas_michelson).
actor(the_godfather_part_iii, gabriele_torrei, enzo_the_baker).
actor(the_godfather_part_iii, john_abineri, hamilton_banker).
actor(the_godfather_part_iii, brian_freilino, stockholder).
actor(the_godfather_part_iii, gregory_corso, unruly_stockholder).
actor(the_godfather_part_iii, marino_mas, lupo).
actor(the_godfather_part_iii, dado_ruspoli, vanni).
actress(the_godfather_part_iii, valeria_sabel, sister_vincenza).
actor(the_godfather_part_iii, luigi_laezza, keinszig_killer).
actor(the_godfather_part_iii, beppe_pianviti, keinszig_killer).
actor(the_godfather_part_iii, santo_indelicato, guardia_del_corpo).
actor(the_godfather_part_iii, francesco_paolo_bellante, autista_di_don_tommasino).
actor(the_godfather_part_iii, paco_reconti, gesu).
actor(the_godfather_part_iii, mimmo_cuticchio, puppet_narrator).
actor(the_godfather_part_iii, richard_honigman, party_reporter).
actor(the_godfather_part_iii, nicky_blair, nicky_the_casino_host).
actor(the_godfather_part_iii, anthony_guidera, anthony_the_bodyguard).
actor(the_godfather_part_iii, frank_tarsia, frankie_the_bodyguard).
actress(the_godfather_part_iii, diane_agostini, woman_with_child_at_street_fair).
actress(the_godfather_part_iii, jessica_di_cicco, child).
actress(the_godfather_part_iii, catherine_scorsese, woman_in_cafe).
actress(the_godfather_part_iii, ida_bernardini, woman_in_cafe).
actor(the_godfather_part_iii, joe_drago, party_security).
actor(the_godfather_part_iii, david_hume_kennerly, party_photographer).
actor(the_godfather_part_iii, james_d_damiano, son_playing_soccer).
actor(the_godfather_part_iii, michael_boccio, father_of_soccer_player).
actor(the_godfather_part_iii, anton_coppola, conductor_sequence_cavalleria_rusticana).
actress(the_godfather_part_iii, elena_lo_forte, santuzza_played_by_sequence_cavalleria_rusticana).
actress(the_godfather_part_iii, madelyn_ren_e_monti, santuzza_sung_by_lola_sequence_cavalleria_rusticana).
actress(the_godfather_part_iii, corinna_vozza, lucia_sequence_cavalleria_rusticana).
actor(the_godfather_part_iii, angelo_romero, alfio_played_by_sequence_cavalleria_rusticana).
actor(the_godfather_part_iii, paolo_gavanelli, alfio_sung_by_sequence_cavalleria_rusticana).
actor(the_godfather_part_iii, salvatore_billa, hired_assassin).
actor(the_godfather_part_iii, sal_borgese, lucchesi_s_door_guard).
actor(the_godfather_part_iii, james_caan, sonny_corleone).
actor(the_godfather_part_iii, richard_s_castellano, peter_clemenza).
actor(the_godfather_part_iii, john_cazale, fredo_corleone).
actor(the_godfather_part_iii, tony_devon, mob_family_lawyer_at_the_church).
actor(the_godfather_part_iii, andrea_girolami, extra).
actress(the_godfather_part_iii, simonetta_stefanelli, apollonia_vitelli_corleone).
actor(the_godfather_part_iii, lee_strasberg, hyman_roth_stukowski).
actor(the_godfather_part_iii, f_x_vitolo, pasquale).

movie(groundhog_day, 1993).
director(groundhog_day, harold_ramis).
actor(groundhog_day, bill_murray, phil_connors).
actress(groundhog_day, andie_macdowell, rita).
actor(groundhog_day, chris_elliott, larry).
actor(groundhog_day, stephen_tobolowsky, ned_ryerson).
actor(groundhog_day, brian_doyle_murray, buster_green).
actress(groundhog_day, marita_geraghty, nancy_taylor).
actress(groundhog_day, angela_paton, mrs_lancaster).
actor(groundhog_day, rick_ducommun, gus).
actor(groundhog_day, rick_overton, ralph).
actress(groundhog_day, robin_duke, doris_the_waitress).
actress(groundhog_day, carol_bivins, anchorwoman).
actor(groundhog_day, willie_garson, kenny).
actor(groundhog_day, ken_hudson_campbell, man_in_hallway).
actor(groundhog_day, les_podewell, old_man).
actor(groundhog_day, rod_sell, groundhog_official).
actor(groundhog_day, tom_milanovich, state_trooper).
actor(groundhog_day, john_m_watson_sr, bartender).
actress(groundhog_day, peggy_roeder, piano_teacher).
actor(groundhog_day, harold_ramis, neurologist).
actor(groundhog_day, david_pasquesi, psychiatrist).
actor(groundhog_day, lee_r_sellars, cop).
actor(groundhog_day, chet_dubowski, felix_bank_guard).
actor(groundhog_day, doc_erickson, herman_bank_guard).
actress(groundhog_day, sandy_maschmeyer, phil_s_movie_date).
actress(groundhog_day, leighanne_o_neil, fan_on_street).
actress(groundhog_day, evangeline_binkley, jeopardy__viewer).
actor(groundhog_day, samuel_mages, jeopardy__viewer).
actor(groundhog_day, ben_zwick, jeopardy__viewer).
actress(groundhog_day, hynden_walch, debbie_kleiser).
actor(groundhog_day, michael_shannon, fred_kleiser).
actor(groundhog_day, timothy_hendrickson, bill_waiter).
actress(groundhog_day, martha_webster, alice_waitress).
actress(groundhog_day, angela_gollan, piano_student).
actor(groundhog_day, shaun_chaiyabhat, boy_in_tree).
actress(groundhog_day, dianne_b_shaw, e_r_nurse).
actress(groundhog_day, barbara_ann_grimes, flat_tire_lady).
actress(groundhog_day, ann_heekin, flat_tire_lady).
actress(groundhog_day, lucina_paquet, flat_tire_lady).
actress(groundhog_day, brenda_pickleman, buster_s_wife).
actress(groundhog_day, amy_murdoch, buster_s_daughter).
actor(groundhog_day, eric_saiet, buster_s_son).
actress(groundhog_day, lindsay_albert, woman_with_cigarette).
actor(groundhog_day, roger_adler, guitarist).
actor(groundhog_day, ben_a_fish, bassist).
actor(groundhog_day, don_riozz_mcnichols, drummer).
actor(groundhog_day, brian_willig, saxophonist).
actor(groundhog_day, richard_henzel, dj).
actor(groundhog_day, rob_riley, dj).
actor(groundhog_day, scooter, the_groundhog).
actor(groundhog_day, douglas_blakeslee, man_with_snow_shovel).
actress(groundhog_day, leslie_frates, herself__jeopardy__contestant).
actor(groundhog_day, mason_gamble, '').
actor(groundhog_day, simon_harvey, news_reporter).
actor(groundhog_day, grady_hutt, '').
actress(groundhog_day, regina_prokop, polka_dancer).
actor(groundhog_day, daniel_riggs, bachelor).
actor(groundhog_day, paul_terrien, groundhog_official).

movie(hail_caesar, 2006).
director(hail_caesar, ethan_coen).
director(hail_caesar, joel_coen).

movie(hearts_of_darkness_a_filmmaker_s_apocalypse, 1991).
director(hearts_of_darkness_a_filmmaker_s_apocalypse, fax_bahr).
director(hearts_of_darkness_a_filmmaker_s_apocalypse, eleanor_coppola).
director(hearts_of_darkness_a_filmmaker_s_apocalypse, george_hickenlooper).
actor(hearts_of_darkness_a_filmmaker_s_apocalypse, john_milius, himself).
actor(hearts_of_darkness_a_filmmaker_s_apocalypse, sam_bottoms, himself).
actor(hearts_of_darkness_a_filmmaker_s_apocalypse, marlon_brando, himself).
actress(hearts_of_darkness_a_filmmaker_s_apocalypse, colleen_camp, herself).
actress(hearts_of_darkness_a_filmmaker_s_apocalypse, eleanor_coppola, herself).
actor(hearts_of_darkness_a_filmmaker_s_apocalypse, francis_ford_coppola, himself).
actress(hearts_of_darkness_a_filmmaker_s_apocalypse, gia_coppola, herself).
actor(hearts_of_darkness_a_filmmaker_s_apocalypse, roman_coppola, himself).
actress(hearts_of_darkness_a_filmmaker_s_apocalypse, sofia_coppola, herself).
actor(hearts_of_darkness_a_filmmaker_s_apocalypse, robert_de_niro, himself).
actor(hearts_of_darkness_a_filmmaker_s_apocalypse, robert_duvall, himself).
actor(hearts_of_darkness_a_filmmaker_s_apocalypse, laurence_fishburne, himself).
actor(hearts_of_darkness_a_filmmaker_s_apocalypse, harrison_ford, '').
actor(hearts_of_darkness_a_filmmaker_s_apocalypse, frederic_forrest, himself).
actor(hearts_of_darkness_a_filmmaker_s_apocalypse, albert_hall, himself).
actor(hearts_of_darkness_a_filmmaker_s_apocalypse, dennis_hopper, himself).
actor(hearts_of_darkness_a_filmmaker_s_apocalypse, george_lucas, himself).
actor(hearts_of_darkness_a_filmmaker_s_apocalypse, martin_sheen, himself).
actor(hearts_of_darkness_a_filmmaker_s_apocalypse, g_d_spradlin, himself).
actor(hearts_of_darkness_a_filmmaker_s_apocalypse, orson_welles, himself_from_1938_radio_broadcast).

movie(the_hudsucker_proxy, 1994).
director(the_hudsucker_proxy, ethan_coen).
director(the_hudsucker_proxy, joel_coen).
actor(the_hudsucker_proxy, tim_robbins, norville_barnes).
actress(the_hudsucker_proxy, jennifer_jason_leigh, amy_archer).
actor(the_hudsucker_proxy, paul_newman, sidney_j_mussburger).
actor(the_hudsucker_proxy, charles_durning, waring_hudsucker).
actor(the_hudsucker_proxy, john_mahoney, chief_editor_manhattan_argus).
actor(the_hudsucker_proxy, jim_true_frost, buzz_the_elevator_operator).
actor(the_hudsucker_proxy, bill_cobbs, moses_the_clock_man).
actor(the_hudsucker_proxy, bruce_campbell, smitty_argus_reporter).
actor(the_hudsucker_proxy, harry_bugin, aloysius_mussburger_s_spy).
actor(the_hudsucker_proxy, john_seitz, bennie_the_cabbie).
actor(the_hudsucker_proxy, joe_grifasi, lou_the_cabbie).
actor(the_hudsucker_proxy, roy_brocksmith, board_member).
actor(the_hudsucker_proxy, john_wylie, board_member).
actor(the_hudsucker_proxy, i_m_hobson, board_member).
actor(the_hudsucker_proxy, gary_allen, board_member).
actor(the_hudsucker_proxy, john_scanlan, board_member).
actor(the_hudsucker_proxy, richard_woods, board_member).
actor(the_hudsucker_proxy, jerome_dempsey, board_member).
actor(the_hudsucker_proxy, peter_mcpherson, board_member).
actor(the_hudsucker_proxy, david_byrd, dr_hugo_bronfenbrenner).
actor(the_hudsucker_proxy, christopher_darga, mail_room_orienter).
actor(the_hudsucker_proxy, patrick_cranshaw, ancient_sorter).
actor(the_hudsucker_proxy, robert_weil, mail_room_boss).
actress(the_hudsucker_proxy, mary_lou_rosato, mussburger_s_secretary).
actor(the_hudsucker_proxy, ernest_sarracino, luigi_the_tailor).
actress(the_hudsucker_proxy, eleanor_glockner, mrs_mussburger).
actress(the_hudsucker_proxy, kathleen_perkins, mrs_braithwaite).
actor(the_hudsucker_proxy, joseph_marcus, sears_braithwaite_of_bullard).
actor(the_hudsucker_proxy, peter_gallagher, vic_tenetta_party_singer).
actor(the_hudsucker_proxy, noble_willingham, zebulon_cardoza).
actress(the_hudsucker_proxy, barbara_ann_grimes, mrs_cardoza).
actor(the_hudsucker_proxy, thom_noble, thorstenson_finlandson_finnish_stockholder).
actor(the_hudsucker_proxy, steve_buscemi, beatnik_barman_at_ann_s_440).
actor(the_hudsucker_proxy, william_duff_griffin, newsreel_scientist).
actress(the_hudsucker_proxy, anna_nicole_smith, za_za).
actress(the_hudsucker_proxy, pamela_everett, dream_dancer).
actor(the_hudsucker_proxy, arthur_bridgers, the_hula_hoop_kid).
actor(the_hudsucker_proxy, sam_raimi, hudsucker_brainstormer).
actor(the_hudsucker_proxy, john_cameron, hudsucker_brainstormer).
actor(the_hudsucker_proxy, skipper_duke, mr_grier).
actor(the_hudsucker_proxy, jay_kapner, mr_levin).
actor(the_hudsucker_proxy, jon_polito, mr_bumstead).
actor(the_hudsucker_proxy, richard_whiting, ancient_puzzler).
actress(the_hudsucker_proxy, linda_mccoy, coffee_shop_waitress).
actor(the_hudsucker_proxy, stan_adams, emcee).
actor(the_hudsucker_proxy, john_goodman, rockwell_newsreel_anouncer).
actress(the_hudsucker_proxy, joanne_pankow, newsreel_secretary).
actor(the_hudsucker_proxy, mario_todisco, norville_s_goon).
actor(the_hudsucker_proxy, colin_fickes, newsboy).
actor(the_hudsucker_proxy, dick_sasso, drunk_in_alley).
actor(the_hudsucker_proxy, jesse_brewer, mailroom_screamer).
actor(the_hudsucker_proxy, philip_loch, mailroom_screamer).
actor(the_hudsucker_proxy, stan_lichtenstein, mailroom_screamer).
actor(the_hudsucker_proxy, todd_alcott, mailroom_screamer).
actor(the_hudsucker_proxy, ace_o_connell, mailroom_screamer).
actor(the_hudsucker_proxy, richard_schiff, mailroom_screamer).
actor(the_hudsucker_proxy, frank_jeffries, mailroom_screamer).
actor(the_hudsucker_proxy, lou_criscuolo, mailroom_screamer).
actor(the_hudsucker_proxy, michael_earl_reid, mailroom_screamer).
actor(the_hudsucker_proxy, mike_starr, newsroom_reporter).
actor(the_hudsucker_proxy, david_hagar, newsroom_reporter).
actor(the_hudsucker_proxy, willie_reale, newsroom_reporter).
actor(the_hudsucker_proxy, harvey_meyer, newsroom_reporter).
actor(the_hudsucker_proxy, tom_toner, newsroom_reporter).
actor(the_hudsucker_proxy, david_fawcett, newsroom_reporter).
actor(the_hudsucker_proxy, jeff_still, newsreel_reporter).
actor(the_hudsucker_proxy, david_gould, newsreel_reporter).
actor(the_hudsucker_proxy, gil_pearson, newsreel_reporter).
actor(the_hudsucker_proxy, marc_garber, newsreel_reporter).
actor(the_hudsucker_proxy, david_massie, newsreel_reporter).
actor(the_hudsucker_proxy, mark_jeffrey_miller, newsreel_reporter).
actor(the_hudsucker_proxy, peter_siragusa, newsreel_reporter).
actor(the_hudsucker_proxy, nelson_george, newsreel_reporter).
actor(the_hudsucker_proxy, michael_houlihan, newsreel_reporter).
actor(the_hudsucker_proxy, ed_lillard, newsreel_reporter).
actor(the_hudsucker_proxy, wantland_sandel, new_year_s_mob).
actor(the_hudsucker_proxy, james_deuter, new_year_s_mob).
actor(the_hudsucker_proxy, roderick_peeples, new_year_s_mob).
actress(the_hudsucker_proxy, cynthia_baker, new_year_s_mob).
actor(the_hudsucker_proxy, jack_rooney, man_at_merchandise_mart).
actor(the_hudsucker_proxy, keith_schrader, businessman).

movie(inside_monkey_zetterland, 1992).
director(inside_monkey_zetterland, jefery_levy).
actor(inside_monkey_zetterland, steve_antin, monkey_zetterland).
actress(inside_monkey_zetterland, patricia_arquette, grace_zetterland).
actress(inside_monkey_zetterland, sandra_bernhard, imogene).
actress(inside_monkey_zetterland, sofia_coppola, cindy).
actor(inside_monkey_zetterland, tate_donovan, brent_zetterland).
actor(inside_monkey_zetterland, rupert_everett, sasha).
actress(inside_monkey_zetterland, katherine_helmond, honor_zetterland).
actor(inside_monkey_zetterland, bo_hopkins, mike_zetterland).
actress(inside_monkey_zetterland, ricki_lake, bella_the_stalker).
actress(inside_monkey_zetterland, debi_mazar, daphne).
actress(inside_monkey_zetterland, martha_plimpton, sofie).
actress(inside_monkey_zetterland, robin_antin, waitress).
actress(inside_monkey_zetterland, frances_bay, grandma).
actor(inside_monkey_zetterland, luca_bercovici, boot_guy).
actress(inside_monkey_zetterland, melissa_lechner, observation_psychiatrist).
actor(inside_monkey_zetterland, lance_loud, psychiatrist).
actor(inside_monkey_zetterland, chris_nash, police_officer).
actress(inside_monkey_zetterland, vivian_schilling, network_producer).
actress(inside_monkey_zetterland, blair_tefkin, brent_s_assistant).

movie(intolerable_cruelty, 2003).
director(intolerable_cruelty, ethan_coen).
director(intolerable_cruelty, joel_coen).
actor(intolerable_cruelty, george_clooney, miles_massey).
actress(intolerable_cruelty, catherine_zeta_jones, marylin_rexroth).
actor(intolerable_cruelty, geoffrey_rush, donovan_donaly).
actor(intolerable_cruelty, cedric_the_entertainer, gus_petch).
actor(intolerable_cruelty, edward_herrmann, rex_rexroth).
actor(intolerable_cruelty, paul_adelstein, wrigley).
actor(intolerable_cruelty, richard_jenkins, freddy_bender).
actor(intolerable_cruelty, billy_bob_thornton, howard_d_doyle).
actress(intolerable_cruelty, julia_duffy, sarah_sorkin).
actor(intolerable_cruelty, jonathan_hadary, heinz_the_baron_krauss_von_espy).
actor(intolerable_cruelty, tom_aldredge, herb_myerson).
actress(intolerable_cruelty, stacey_travis, bonnie_donaly).
actor(intolerable_cruelty, jack_kyle, ollie_olerud).
actor(intolerable_cruelty, irwin_keyes, wheezy_joe).
actress(intolerable_cruelty, judith_drake, mrs_gutman).
actor(intolerable_cruelty, royce_d_applegate, mr_gutman).
actor(intolerable_cruelty, george_ives, mr_gutman_s_lawyer).
actor(intolerable_cruelty, booth_colman, gutman_trial_judge).
actress(intolerable_cruelty, kristin_dattilo, rex_s_young_woman).
actress(intolerable_cruelty, wendle_josepher, miles_receptionist).
actress(intolerable_cruelty, mary_pat_gleason, nero_s_waitress).
actress(intolerable_cruelty, mia_cottet, ramona_barcelona).
actress(intolerable_cruelty, kiersten_warren, claire_o_mara).
actor(intolerable_cruelty, rosey_brown, gus_s_pal).
actor(intolerable_cruelty, ken_sagoes, gus_s_pal).
actor(intolerable_cruelty, dale_e_turner, gus_s_pal).
actor(intolerable_cruelty, douglas_fisher, maitre_d).
actor(intolerable_cruelty, nicholas_shaffer, waiter).
actress(intolerable_cruelty, isabell_o_connor, judge_marva_munson).
actress(intolerable_cruelty, mary_gillis, court_reporter).
actor(intolerable_cruelty, colin_linden, father_scott).
actress(intolerable_cruelty, julie_osburn, stewardess).
actor(intolerable_cruelty, gary_marshal, las_vegas_waiter).
actor(intolerable_cruelty, blake_clark, convention_secretary).
actor(intolerable_cruelty, allan_trautman, convention_lawyer).
actress(intolerable_cruelty, kate_luyben, santa_fe_tart).
actress(intolerable_cruelty, kitana_baker, santa_fe_tart).
actress(intolerable_cruelty, camille_anderson, santa_fe_tart).
actress(intolerable_cruelty, tamie_sheffield, santa_fe_tart).
actress(intolerable_cruelty, bridget_marquardt, santa_fe_tart).
actress(intolerable_cruelty, emma_harrison, santa_fe_tart).
actor(intolerable_cruelty, john_bliss, mr_mackinnon).
actor(intolerable_cruelty, patrick_thomas_o_brien, bailiff).
actor(intolerable_cruelty, sean_fanton, bailiff).
actress(intolerable_cruelty, justine_baker, wedding_guest).
actor(intolerable_cruelty, bruce_campbell, soap_opera_actor_on_tv).
actress(intolerable_cruelty, barbara_kerr_condon, herb_myerson_s_private_nurse).
actor(intolerable_cruelty, jason_de_hoyos, gardener).
actor(intolerable_cruelty, larry_vigus, lawyer).
actress(intolerable_cruelty, susan_yeagley, tart_1).

movie(the_ladykillers, 2004).
director(the_ladykillers, ethan_coen).
director(the_ladykillers, joel_coen).
actor(the_ladykillers, tom_hanks, professor_g_h_dorr).
actress(the_ladykillers, irma_p_hall, marva_munson).
actor(the_ladykillers, marlon_wayans, gawain_macsam).
actor(the_ladykillers, j_k_simmons, garth_pancake).
actor(the_ladykillers, tzi_ma, the_general).
actor(the_ladykillers, ryan_hurst, lump_hudson).
actress(the_ladykillers, diane_delano, mountain_girl).
actor(the_ladykillers, george_wallace, sheriff_wyner).
actor(the_ladykillers, john_mcconnell, deputy_sheriff).
actor(the_ladykillers, jason_weaver, weemack_funthes).
actor(the_ladykillers, stephen_root, fernand_gudge).
actress(the_ladykillers, lyne_odums, rosalie_funthes).
actor(the_ladykillers, walter_k_jordan, elron).
actor(the_ladykillers, george_anthony_bell, preacher).
actor(the_ladykillers, greg_grunberg, tv_commercial_director).
actress(the_ladykillers, hallie_singleton, craft_service).
actor(the_ladykillers, robert_baker, quarterback).
actor(the_ladykillers, blake_clark, football_coach).
actor(the_ladykillers, amad_jackson, doughnut_gangster).
actor(the_ladykillers, aldis_hodge, doughnut_gangster).
actress(the_ladykillers, freda_foh_shen, doughnut_woman).
actress(the_ladykillers, paula_martin, gawain_s_mama).
actor(the_ladykillers, jeremy_suarez, li_l_gawain).
actress(the_ladykillers, te_te_benn, gawain_s_sister).
actor(the_ladykillers, khalil_east, gawain_s_brother).
actress(the_ladykillers, jennifer_echols, waffle_hut_waitress).
actress(the_ladykillers, nita_norris, tea_lady).
actress(the_ladykillers, vivian_smallwood, tea_lady).
actress(the_ladykillers, maryn_tasco, tea_lady).
actress(the_ladykillers, muriel_whitaker, tea_lady).
actress(the_ladykillers, jessie_bailey, tea_lady).
actress(the_ladykillers, louisa_abernathy, church_voice).
actress(the_ladykillers, mildred_dumas, church_voice).
actor(the_ladykillers, al_fann, church_voice).
actress(the_ladykillers, mi_mi_green_fann, church_voice).
actor(the_ladykillers, maurice_watson, othar).
actor(the_ladykillers, bruce_campbell, humane_society_worker).
actor(the_ladykillers, michael_dotson, angry_football_fan).

movie(lick_the_star, 1998).
director(lick_the_star, sofia_coppola).
actress(lick_the_star, christina_turley, kate).
actress(lick_the_star, audrey_heaven, chloe).
actress(lick_the_star, julia_vanderham, rebecca).
actress(lick_the_star, lindsy_drummer, sara).
actor(lick_the_star, robert_schwartzman, greg).
actress(lick_the_star, rachael_vanni, wendy).
actor(lick_the_star, peter_bogdanovich, principal).
actress(lick_the_star, zoe_r_cassavetes, p_e_teacher).
actress(lick_the_star, anahid_nazarian, social_studies_teacher).
actress(lick_the_star, davia_nelson, english_teacher).
actress(lick_the_star, christianna_toler, nadine).
actress(lick_the_star, hilary_fleming, taco_girl).
actress(lick_the_star, eleanor_cummings, sixth_grader_p_e_victim).
actor(lick_the_star, anthony_desimone, snack_counter_victim).
actor(lick_the_star, aron_acord, sexy_boy).

movie(lost_in_translation, 2003).
director(lost_in_translation, sofia_coppola).
actress(lost_in_translation, scarlett_johansson, charlotte).
actor(lost_in_translation, bill_murray, bob_harris).
actress(lost_in_translation, akiko_takeshita, ms_kawasaki).
actor(lost_in_translation, kazuyoshi_minamimagoe, press_agent).
actor(lost_in_translation, kazuko_shibata, press_agent).
actor(lost_in_translation, take, press_agent).
actor(lost_in_translation, ryuichiro_baba, concierge).
actor(lost_in_translation, akira_yamaguchi, bellboy).
actress(lost_in_translation, catherine_lambert, jazz_singer).
actor(lost_in_translation, fran_ois_du_bois, sausalito_piano).
actor(lost_in_translation, tim_leffman, sausalito_guitar).
actor(lost_in_translation, gregory_pekar, american_businessman_1).
actor(lost_in_translation, richard_allen, american_businessman_2).
actor(lost_in_translation, giovanni_ribisi, john).
actor(lost_in_translation, diamond_yukai, commercial_director).
actor(lost_in_translation, jun_maki, suntory_client).
actress(lost_in_translation, nao_asuka, premium_fantasy_woman).
actor(lost_in_translation, tetsuro_naka, stills_photographer).
actor(lost_in_translation, kanako_nakazato, make_up_person).
actor(lost_in_translation, fumihiro_hayashi, charlie).
actress(lost_in_translation, hiroko_kawasaki, hiroko).
actress(lost_in_translation, daikon, bambie).
actress(lost_in_translation, anna_faris, kelly).
actor(lost_in_translation, asuka_shimuzu, kelly_s_translator).
actor(lost_in_translation, ikuko_takahashi, ikebana_instructor).
actor(lost_in_translation, koichi_tanaka, bartender_ny_bar).
actor(lost_in_translation, hugo_codaro, aerobics_instructor).
actress(lost_in_translation, akiko_monou, p_chan).
actor(lost_in_translation, akimitsu_naruyama, french_japanese_nightclub_patron).
actor(lost_in_translation, hiroshi_kawashima, bartender_nightclub).
actress(lost_in_translation, toshikawa_hiromi, hiromix).
actor(lost_in_translation, nobuhiko_kitamura, nobu).
actor(lost_in_translation, nao_kitman, nao).
actor(lost_in_translation, akira, hans).
actor(lost_in_translation, kunichi_nomura, kun).
actor(lost_in_translation, yasuhiko_hattori, charlie_s_friend).
actor(lost_in_translation, shigekazu_aida, mr_valentine).
actor(lost_in_translation, kazuo_yamada, hospital_receptionist).
actor(lost_in_translation, akira_motomura, old_man).
actor(lost_in_translation, osamu_shigematu, doctor).
actor(lost_in_translation, takashi_fujii, tv_host).
actor(lost_in_translation, kei_takyo, tv_translator).
actor(lost_in_translation, ryo_kondo, politician).
actor(lost_in_translation, yumi_ikeda, politician_s_aide).
actor(lost_in_translation, yumika_saki, politician_s_aide).
actor(lost_in_translation, yuji_okabe, politician_s_aide).
actor(lost_in_translation, diedrich_bollman, german_hotel_guest).
actor(lost_in_translation, georg_o_p_eschert, german_hotel_guest).
actor(lost_in_translation, mark_willms, carl_west).
actress(lost_in_translation, lisle_wilkerson, sexy_businesswoman).
actress(lost_in_translation, nancy_steiner, lydia_harris).

movie(the_man_who_wasn_t_there, 2001).
director(the_man_who_wasn_t_there, ethan_coen).
director(the_man_who_wasn_t_there, joel_coen).
actor(the_man_who_wasn_t_there, billy_bob_thornton, ed_crane).
actress(the_man_who_wasn_t_there, frances_mcdormand, doris_crane).
actor(the_man_who_wasn_t_there, michael_badalucco, frank).
actor(the_man_who_wasn_t_there, james_gandolfini, dave_big_dave_brewster).
actress(the_man_who_wasn_t_there, katherine_borowitz, ann_nirdlinger).
actor(the_man_who_wasn_t_there, jon_polito, creighton_tolliver).
actress(the_man_who_wasn_t_there, scarlett_johansson, rachel_birdy_abundas).
actor(the_man_who_wasn_t_there, richard_jenkins, walter_abundas).
actor(the_man_who_wasn_t_there, tony_shalhoub, freddy_riedenschneider).
actor(the_man_who_wasn_t_there, christopher_kriesa, officer_persky).
actor(the_man_who_wasn_t_there, brian_haley, officer_pete_krebs).
actor(the_man_who_wasn_t_there, jack_mcgee, burns).
actor(the_man_who_wasn_t_there, gregg_binkley, the_new_man).
actor(the_man_who_wasn_t_there, alan_fudge, diedrickson).
actress(the_man_who_wasn_t_there, lilyan_chauvin, medium).
actor(the_man_who_wasn_t_there, adam_alexi_malle, jacques_carcanogues).
actor(the_man_who_wasn_t_there, ted_rooney, bingo_caller).
actor(the_man_who_wasn_t_there, abraham_benrubi, young_man).
actor(the_man_who_wasn_t_there, christian_ferratti, child).
actress(the_man_who_wasn_t_there, rhoda_gemignani, costanza).
actor(the_man_who_wasn_t_there, e_j_callahan, customer).
actress(the_man_who_wasn_t_there, brooke_smith, sobbing_prisoner).
actor(the_man_who_wasn_t_there, ron_ross, banker).
actress(the_man_who_wasn_t_there, hallie_singleton, waitress).
actor(the_man_who_wasn_t_there, jon_donnelly, gatto_eater).
actor(the_man_who_wasn_t_there, dan_martin, bailiff).
actor(the_man_who_wasn_t_there, nicholas_lanier, tony).
actor(the_man_who_wasn_t_there, tom_dahlgren, judge_1).
actor(the_man_who_wasn_t_there, booth_colman, judge_2).
actor(the_man_who_wasn_t_there, stanley_desantis, new_man_s_customer).
actor(the_man_who_wasn_t_there, peter_siragusa, bartender).
actor(the_man_who_wasn_t_there, christopher_mcdonald, macadam_salesman).
actor(the_man_who_wasn_t_there, rick_scarry, district_attorney).
actor(the_man_who_wasn_t_there, george_ives, lloyd_garroway).
actor(the_man_who_wasn_t_there, devon_cole_borisoff, swimming_boy).
actress(the_man_who_wasn_t_there, mary_bogue, prisoner_visitor).
actor(the_man_who_wasn_t_there, don_donati, pie_contest_timer).
actor(the_man_who_wasn_t_there, arthur_reeves, flophouse_clerk).
actress(the_man_who_wasn_t_there, michelle_weber, dancer).
actress(the_man_who_wasn_t_there, randi_pareira, dancer).
actor(the_man_who_wasn_t_there, robert_loftin, dancer).
actor(the_man_who_wasn_t_there, kenneth_hughes, dancer).
actor(the_man_who_wasn_t_there, gordon_hart, dancer).
actress(the_man_who_wasn_t_there, brenda_mae_hamilton, dancer).
actor(the_man_who_wasn_t_there, lloyd_gordon, dancer).
actor(the_man_who_wasn_t_there, leonard_crofoot, dancer).
actress(the_man_who_wasn_t_there, rita_bland, dancer).
actress(the_man_who_wasn_t_there, audrey_k_baranishyn, dancer).
actress(the_man_who_wasn_t_there, qyn_hughes, dancer).
actress(the_man_who_wasn_t_there, rachel_mcdonald, dancer).
actor(the_man_who_wasn_t_there, craig_berenson, jail_guy).
actress(the_man_who_wasn_t_there, joan_m_blair, prison_matron).
actor(the_man_who_wasn_t_there, geoffrey_gould, alpine_rope_toss_man).
actor(the_man_who_wasn_t_there, phil_hawn, man_in_courtroom).
actress(the_man_who_wasn_t_there, cherilyn_hayres, swing_dancer).
actor(the_man_who_wasn_t_there, john_michael_higgins, emergency_room_physician).
actress(the_man_who_wasn_t_there, monika_malmrose, crying_girl).
actor(the_man_who_wasn_t_there, peter_schrum, truck_driver).
actor(the_man_who_wasn_t_there, max_thayer, witness).

movie(marie_antoinette, 2006).
director(marie_antoinette, sofia_coppola).
actress(marie_antoinette, kirsten_dunst, marie_antoinette).
actor(marie_antoinette, jason_schwartzman, louis_xvi).
actor(marie_antoinette, rip_torn, king_louis_xv).
actress(marie_antoinette, judy_davis, comtesse_de_noailles).
actress(marie_antoinette, asia_argento, madame_du_barry).
actress(marie_antoinette, marianne_faithfull, maria_theresia).
actress(marie_antoinette, aurore_cl_ment, la_duchesse_de_chartres).
actor(marie_antoinette, guillaume_gallienne, comte_vergennes).
actress(marie_antoinette, clementine_poidatz, comtesse_de_provence).
actress(marie_antoinette, molly_shannon, anne_victoire).
actor(marie_antoinette, steve_coogan, count_mercy_d_argenteau).
actor(marie_antoinette, jamie_dornan, axel_von_fersen).
actress(marie_antoinette, shirley_henderson, aunt_sophie).
actor(marie_antoinette, jean_christophe_bouvet, duc_de_choiseul).
actor(marie_antoinette, filippo_bozotti, dimitri).
actress(marie_antoinette, sarah_adler, '').
actor(marie_antoinette, mathieu_amalric, man_at_the_masked_ball).
actress(marie_antoinette, rachel_berger, lady_m_b).
actor(marie_antoinette, xavier_bonastre, court_member).
actress(marie_antoinette, io_bottoms, lady_in_waiting_1).
actress(marie_antoinette, sol_ne_bouton, '').
actress(marie_antoinette, rose_byrne, yolande_martine_gabrielle_de_polastron_duchesse_de_polignac).
actor(marie_antoinette, alain_doutey, '').
actor(marie_antoinette, gilles_dufour, '').
actress(marie_antoinette, sabine_glaser, court_member).
actress(marie_antoinette, h_loise_godet, court_member).
actress(marie_antoinette, manon_grosset, une_page).
actor(marie_antoinette, philippe_h_li_s, king_s_aide_de_camp_2).
actor(marie_antoinette, arnaud_klein, garde_royal_royal_guard).
actress(marie_antoinette, aleksia_landeau, countesse_de_castelabjac).
actor(marie_antoinette, benjamin_lemaire, un_page).
actor(marie_antoinette, victor_loukianenko, le_valet_de_marie_antoinette).
actor(marie_antoinette, rapha_l_neal, garden_page).
actress(marie_antoinette, mary_nighy, '').
actor(marie_antoinette, al_weaver, '').

movie(miller_s_crossing, 1990).
director(miller_s_crossing, ethan_coen).
director(miller_s_crossing, joel_coen).
actor(miller_s_crossing, gabriel_byrne, tom_reagan).
actress(miller_s_crossing, marcia_gay_harden, verna).
actor(miller_s_crossing, john_turturro, bernie_bernbaum).
actor(miller_s_crossing, jon_polito, johnny_caspar).
actor(miller_s_crossing, j_e_freeman, eddie_dane).
actor(miller_s_crossing, albert_finney, leo).
actor(miller_s_crossing, mike_starr, frankie).
actor(miller_s_crossing, al_mancini, tic_tac).
actor(miller_s_crossing, richard_woods, mayor_dale_levander).
actor(miller_s_crossing, thomas_toner, o_doole).
actor(miller_s_crossing, steve_buscemi, mink).
actor(miller_s_crossing, mario_todisco, clarence_drop_johnson).
actor(miller_s_crossing, olek_krupa, tad).
actor(miller_s_crossing, michael_jeter, adolph).
actor(miller_s_crossing, lanny_flaherty, terry).
actress(miller_s_crossing, jeanette_kontomitras, mrs_caspar).
actor(miller_s_crossing, louis_charles_mounicou_iii, johnny_caspar_jr).
actor(miller_s_crossing, john_mcconnell, cop__brian).
actor(miller_s_crossing, danny_aiello_iii, cop__delahanty).
actress(miller_s_crossing, helen_jolly, screaming_lady).
actress(miller_s_crossing, hilda_mclean, landlady).
actor(miller_s_crossing, monte_starr, gunman_in_leo_s_house).
actor(miller_s_crossing, don_picard, gunman_in_leo_s_house).
actor(miller_s_crossing, salvatore_h_tornabene, rug_daniels).
actor(miller_s_crossing, kevin_dearie, street_urchin).
actor(miller_s_crossing, michael_badalucco, caspar_s_driver).
actor(miller_s_crossing, charles_ferrara, caspar_s_butler).
actor(miller_s_crossing, esteban_fern_ndez, caspar_s_cousin).
actor(miller_s_crossing, george_fernandez, caspar_s_cousin).
actor(miller_s_crossing, charles_gunning, hitman_at_verna_s).
actor(miller_s_crossing, dave_drinkx, hitman_2).
actor(miller_s_crossing, david_darlow, lazarre_s_messenger).
actor(miller_s_crossing, robert_labrosse, lazarre_s_tough).
actor(miller_s_crossing, carl_rooney, lazarre_s_tough).
actor(miller_s_crossing, jack_harris, man_with_pipe_bomb).
actor(miller_s_crossing, jery_hewitt, son_of_erin).
actor(miller_s_crossing, sam_raimi, snickering_gunman).
actor(miller_s_crossing, john_schnauder_jr, cop_with_bullhorn).
actor(miller_s_crossing, zolly_levin, rabbi).
actor(miller_s_crossing, joey_ancona, boxer).
actor(miller_s_crossing, bill_raye, boxer).
actor(miller_s_crossing, william_preston_robertson, voice).
actress(miller_s_crossing, frances_mcdormand, mayor_s_secretary).

movie(mission_impossible, 1996).
director(mission_impossible, brian_de_palma).
actor(mission_impossible, tom_cruise, ethan_hunt).
actor(mission_impossible, jon_voight, jim_phelps).
actress(mission_impossible, emmanuelle_b_art, claire_phelps).
actor(mission_impossible, henry_czerny, eugene_kittridge).
actor(mission_impossible, jean_reno, franz_krieger).
actor(mission_impossible, ving_rhames, luther_stickell).
actress(mission_impossible, kristin_scott_thomas, sarah_davies).
actress(mission_impossible, vanessa_redgrave, max).
actor(mission_impossible, dale_dye, frank_barnes).
actor(mission_impossible, marcel_iures, golitsyn).
actor(mission_impossible, ion_caramitru, zozimov).
actress(mission_impossible, ingeborga_dapkunaite, hannah_williams).
actress(mission_impossible, valentina_yakunina, drunken_female_imf_agent).
actor(mission_impossible, marek_vasut, drunken_male_imf_agent).
actor(mission_impossible, nathan_osgood, kittridge_technician).
actor(mission_impossible, john_mclaughlin, tv_interviewer).
actor(mission_impossible, rolf_saxon, cia_analyst_william_donloe).
actor(mission_impossible, karel_dobry, matthias).
actor(mission_impossible, andreas_wisniewski, max_s_companion).
actor(mission_impossible, david_shaeffer, diplomat_rand_housman).
actor(mission_impossible, rudolf_pechan, mayor_brandl).
actor(mission_impossible, gaston_subert, jaroslav_reid).
actor(mission_impossible, ricco_ross, denied_area_security_guard).
actor(mission_impossible, mark_houghton, denied_area_security_guard).
actor(mission_impossible, bob_friend, sky_news_man).
actress(mission_impossible, annabel_mullion, flight_attendant).
actor(mission_impossible, garrick_hagon, cnn_reporter).
actor(mission_impossible, olegar_fedoro, kiev_room_agent).
actor(mission_impossible, sam_douglas, kiev_room_agent).
actor(mission_impossible, andrzej_borkowski, kiev_room_agent).
actress(mission_impossible, maya_dokic, kiev_room_agent).
actress(mission_impossible, carmela_marner, kiev_room_agent).
actress(mission_impossible, mimi_potworowska, kiev_room_agent).
actress(mission_impossible, jirina_trebick, cleaning_woman).
actor(mission_impossible, david_schneider, train_engineer).
actress(mission_impossible, helen_lindsay, female_executive_in_train).
actress(mission_impossible, pat_starr, cia_agent).
actor(mission_impossible, richard_d_sharp, cia_lobby_guard).
actor(mission_impossible, randall_paul, cia_escort_guard).
actress(mission_impossible, sue_doucette, cia_agent).
actor(mission_impossible, graydon_gould, public_official).
actor(mission_impossible, tony_vogel, m_i_5).
actor(mission_impossible, michael_rogers, large_man).
actress(mission_impossible, laura_brook, margaret_hunt).
actor(mission_impossible, morgan_deare, donald_hunt).
actor(mission_impossible, david_phelan, steward_on_train).
actress(mission_impossible, melissa_knatchbull, air_stewardess).
actor(mission_impossible, keith_campbell, fireman).
actor(mission_impossible, michael_cella, student).
actor(mission_impossible, emilio_estevez, jack_harmon).
actor(mission_impossible, john_knoll, passenger_on_train_in_tunnel).

movie(no_country_for_old_men, 2007).
director(no_country_for_old_men, joel_coen).

movie(o_brother_where_art_thou, 2000).
director(o_brother_where_art_thou, ethan_coen).
director(o_brother_where_art_thou, joel_coen).
actor(o_brother_where_art_thou, george_clooney, ulysses_everett_mcgill).
actor(o_brother_where_art_thou, john_turturro, pete).
actor(o_brother_where_art_thou, tim_blake_nelson, delmar_o_donnell).
actor(o_brother_where_art_thou, john_goodman, big_dan_teague).
actress(o_brother_where_art_thou, holly_hunter, penny).
actor(o_brother_where_art_thou, chris_thomas_king, tommy_johnson).
actor(o_brother_where_art_thou, charles_durning, pappy_o_daniel).
actor(o_brother_where_art_thou, del_pentecost, junior_o_daniel).
actor(o_brother_where_art_thou, michael_badalucco, george_nelson).
actor(o_brother_where_art_thou, j_r_horne, pappy_s_staff).
actor(o_brother_where_art_thou, brian_reddy, pappy_s_staff).
actor(o_brother_where_art_thou, wayne_duvall, homer_stokes).
actor(o_brother_where_art_thou, ed_gale, the_little_man).
actor(o_brother_where_art_thou, ray_mckinnon, vernon_t_waldrip).
actor(o_brother_where_art_thou, daniel_von_bargen, sheriff_cooley_the_devil).
actor(o_brother_where_art_thou, royce_d_applegate, man_with_bullhorn).
actor(o_brother_where_art_thou, frank_collison, wash_hogwallop).
actor(o_brother_where_art_thou, quinn_gasaway, boy_hogwallop).
actor(o_brother_where_art_thou, lee_weaver, blind_seer).
actor(o_brother_where_art_thou, millford_fortenberry, pomade_vendor).
actor(o_brother_where_art_thou, stephen_root, radio_station_man).
actor(o_brother_where_art_thou, john_locke, mr_french).
actress(o_brother_where_art_thou, gillian_welch, soggy_bottom_customer).
actor(o_brother_where_art_thou, a_ray_ratliff, record_store_clerk).
actress(o_brother_where_art_thou, mia_tate, siren).
actress(o_brother_where_art_thou, musetta_vander, siren).
actress(o_brother_where_art_thou, christy_taylor, siren).
actress(o_brother_where_art_thou, april_hardcastle, waitress).
actor(o_brother_where_art_thou, michael_w_finnell, interrogator).
actress(o_brother_where_art_thou, georgia_rae_rainer, wharvey_gal).
actress(o_brother_where_art_thou, marianna_breland, wharvey_gal).
actress(o_brother_where_art_thou, lindsey_miller, wharvey_gal).
actress(o_brother_where_art_thou, natalie_shedd, wharvey_gal).
actor(o_brother_where_art_thou, john_mcconnell, woolworths_manager).
actor(o_brother_where_art_thou, issac_freeman, gravedigger).
actor(o_brother_where_art_thou, wilson_waters_jr, gravedigger).
actor(o_brother_where_art_thou, robert_hamlett, gravedigger).
actor(o_brother_where_art_thou, willard_cox, cox_family).
actress(o_brother_where_art_thou, evelyn_cox, cox_family).
actress(o_brother_where_art_thou, suzanne_cox, cox_family).
actor(o_brother_where_art_thou, sidney_cox, cox_family).
actor(o_brother_where_art_thou, buck_white, the_whites).
actress(o_brother_where_art_thou, sharon_white, the_whites).
actress(o_brother_where_art_thou, cheryl_white, the_whites).
actor(o_brother_where_art_thou, ed_snodderly, village_idiot).
actor(o_brother_where_art_thou, david_holt, village_idiot).
actor(o_brother_where_art_thou, jerry_douglas, dobro_player).
actor(o_brother_where_art_thou, christopher_francis, kkk_member).
actor(o_brother_where_art_thou, geoffrey_gould, head_of_mob).
actor(o_brother_where_art_thou, nathaniel_lee_jr, ice_boy_on_the_right_straw_hat).

movie(the_outsiders, 1983).
director(the_outsiders, francis_ford_coppola).
actor(the_outsiders, matt_dillon, dallas_dally_winston).
actor(the_outsiders, ralph_macchio, johnny_cade).
actor(the_outsiders, c_thomas_howell, ponyboy_curtis).
actor(the_outsiders, patrick_swayze, darrel_darry_curtis).
actor(the_outsiders, rob_lowe, sodapop_curtis).
actor(the_outsiders, emilio_estevez, keith_two_bit_mathews).
actor(the_outsiders, tom_cruise, steve_randle).
actor(the_outsiders, glenn_withrow, tim_shepard).
actress(the_outsiders, diane_lane, sherri_cherry_valance).
actor(the_outsiders, leif_garrett, bob_sheldon).
actor(the_outsiders, darren_dalton, randy_anderson).
actress(the_outsiders, michelle_meyrink, marcia).
actor(the_outsiders, gailard_sartain, jerry_wood).
actor(the_outsiders, tom_waits, buck_merrill).
actor(the_outsiders, william_smith, store_clerk).
actor(the_outsiders, tom_hillmann, greaser_in_concession_stand).
actor(the_outsiders, hugh_walkinshaw, soc_in_concession_stand).
actress(the_outsiders, sofia_coppola, little_girl).
actress(the_outsiders, teresa_wilkerson_hunt, woman_at_fire).
actress(the_outsiders, linda_nystedt, nurse).
actress(the_outsiders, s_e_hinton, nurse).
actor(the_outsiders, brent_beesley, suburb_guy).
actor(the_outsiders, john_meier, paul).
actor(the_outsiders, ed_jackson, motorcycle_cop).
actor(the_outsiders, daniel_r_suhart, orderly).
actress(the_outsiders, heather_langenkamp, '').

movie(paris_je_t_aime, 2006).
director(paris_je_t_aime, olivier_assayas).
director(paris_je_t_aime, fr_d_ric_auburtin).
director(paris_je_t_aime, christoffer_boe).
director(paris_je_t_aime, sylvain_chomet).
director(paris_je_t_aime, ethan_coen).
director(paris_je_t_aime, joel_coen).
director(paris_je_t_aime, isabel_coixet).
director(paris_je_t_aime, alfonso_cuar_n).
director(paris_je_t_aime, g_rard_depardieu).
director(paris_je_t_aime, jean_luc_godard).
director(paris_je_t_aime, richard_lagravenese).
director(paris_je_t_aime, anne_marie_mi_ville).
director(paris_je_t_aime, vincenzo_natali).
director(paris_je_t_aime, alexander_payne).
director(paris_je_t_aime, walter_salles).
director(paris_je_t_aime, oliver_schmitz).
director(paris_je_t_aime, ettore_scola).
director(paris_je_t_aime, nobuhiro_suwa).
director(paris_je_t_aime, daniela_thomas).
director(paris_je_t_aime, tom_tykwer).
director(paris_je_t_aime, gus_van_sant).
actress(paris_je_t_aime, emilie_ohana, the_young_parisian_recurrent_character).
actress(paris_je_t_aime, julie_bataille, julie_segment_1st_arrondissement).
actor(paris_je_t_aime, steve_buscemi, the_tourist_segment_1st_arrondissement).
actor(paris_je_t_aime, axel_kiener, axel_segment_1st_arrondissement).
actress(paris_je_t_aime, juliette_binoche, the_mother_segment_2nd_arrondissement).
actor(paris_je_t_aime, willem_dafoe, the_cow_boy_segment_2nd_arrondissement).
actress(paris_je_t_aime, marianne_faithfull, segment_4th_arrondissement).
actor(paris_je_t_aime, elias_mcconnell, eli_segment_4th_arrondissement).
actor(paris_je_t_aime, gaspard_ulliel, gaspar_segment_4th_arrondissement).
actor(paris_je_t_aime, ben_gazzara, ben_segment_6th_arrondissement).
actress(paris_je_t_aime, gena_rowlands, gena_segment_6th_arrondissement).
actress(paris_je_t_aime, yolande_moreau, female_mime_segment_7th_arrondissement).
actor(paris_je_t_aime, paul_putner, male_mime_segment_7th_arrondissement).
actress(paris_je_t_aime, olga_kurylenko, the_femme_fatale_segment_8th_arrondissement).
actress(paris_je_t_aime, fanny_ardant, fanny_forestier_segment_9th_arrondissement).
actor(paris_je_t_aime, bob_hoskins, bob_leander_segment_9th_arrondissement).
actor(paris_je_t_aime, melchior_beslon, thomas_segment_10th_arrondissement).
actress(paris_je_t_aime, natalie_portman, francine_segment_10th_arrondissement).
actor(paris_je_t_aime, javier_c_mara, the_doctor_segment_12th_arrondissement).
actress(paris_je_t_aime, isabella_rossellini, the_wife_segment_12th_arrondissement).
actress(paris_je_t_aime, leonor_watling, segment_12th_arrondissement).
actress(paris_je_t_aime, camille_japy, anna_segment_15th_arrondissement).
actor(paris_je_t_aime, nick_nolte, vincent_segment_17th_arrondissement).
actress(paris_je_t_aime, ludivine_sagnier, claire_segment_17th_arrondissement).
actor(paris_je_t_aime, seydou_boro, hassan_segment_19th_arrondissement).
actress(paris_je_t_aime, a_ssa_ma_ga, sophie_segment_19th_arrondissement).

movie(peggy_sue_got_married, 1986).
director(peggy_sue_got_married, francis_ford_coppola).
actress(peggy_sue_got_married, kathleen_turner, peggy_sue_kelcher_peggy_sue_bodell).
actor(peggy_sue_got_married, nicolas_cage, charlie_bodell).
actor(peggy_sue_got_married, barry_miller, richard_norvik).
actress(peggy_sue_got_married, catherine_hicks, carol_heath).
actress(peggy_sue_got_married, joan_allen, maddy_nagle).
actor(peggy_sue_got_married, kevin_j_o_connor, michael_fitzsimmons).
actor(peggy_sue_got_married, jim_carrey, walter_getz).
actress(peggy_sue_got_married, lisa_jane_persky, delores_dodge).
actress(peggy_sue_got_married, lucinda_jenney, rosalie_testa).
actor(peggy_sue_got_married, wil_shriner, arthur_nagle).
actress(peggy_sue_got_married, barbara_harris, evelyn_kelcher).
actor(peggy_sue_got_married, don_murray, jack_kelcher).
actress(peggy_sue_got_married, sofia_coppola, nancy_kelcher).
actress(peggy_sue_got_married, maureen_o_sullivan, elizabeth_alvorg).
actor(peggy_sue_got_married, leon_ames, barney_alvorg).
actor(peggy_sue_got_married, randy_bourne, scott_bodell).
actress(peggy_sue_got_married, helen_hunt, beth_bodell).
actor(peggy_sue_got_married, don_stark, doug_snell).
actor(peggy_sue_got_married, marshall_crenshaw, reunion_band).
actor(peggy_sue_got_married, chris_donato, reunion_band).
actor(peggy_sue_got_married, robert_crenshaw, reunion_band).
actor(peggy_sue_got_married, tom_teeley, reunion_band).
actor(peggy_sue_got_married, graham_maby, reunion_band).
actor(peggy_sue_got_married, ken_grantham, mr_snelgrove).
actress(peggy_sue_got_married, ginger_taylor, janet).
actress(peggy_sue_got_married, sigrid_wurschmidt, sharon).
actor(peggy_sue_got_married, glenn_withrow, terry).
actor(peggy_sue_got_married, harry_basil, leon).
actor(peggy_sue_got_married, john_carradine, leo).
actress(peggy_sue_got_married, sachi_parker, lisa).
actress(peggy_sue_got_married, vivien_straus, sandy).
actor(peggy_sue_got_married, morgan_upton, mr_gilford).
actor(peggy_sue_got_married, dr_lewis_leibovich, dr_daly).
actor(peggy_sue_got_married, bill_bonham, drunk).
actor(peggy_sue_got_married, joe_lerer, drunk_creep).
actress(peggy_sue_got_married, barbara_oliver, nurse).
actor(peggy_sue_got_married, martin_scott, the_four_mations).
actor(peggy_sue_got_married, marcus_scott, the_four_mations).
actor(peggy_sue_got_married, carl_lockett, the_four_mations).
actor(peggy_sue_got_married, tony_saunders, the_four_mations).
actor(peggy_sue_got_married, vincent_lars, the_four_mations).
actor(peggy_sue_got_married, larry_e_vann, the_four_mations).
actor(peggy_sue_got_married, lawrence_menkin, elderly_gentleman).
actor(peggy_sue_got_married, daniel_r_suhart, chinese_waiter).
actor(peggy_sue_got_married, leslie_hilsinger, majorette).
actor(peggy_sue_got_married, al_nalbandian, lodge_member).
actor(peggy_sue_got_married, dan_leegant, lodge_member).
actor(peggy_sue_got_married, ron_cook, lodge_member).
actress(peggy_sue_got_married, mary_leichtling, reunion_receptionist).
actress(peggy_sue_got_married, cynthia_brian, reunion_woman_2).
actor(peggy_sue_got_married, michael_x_martin, '').
actress(peggy_sue_got_married, mary_mitchel, '').

movie(raising_arizona, 1987).
director(raising_arizona, ethan_coen).
director(raising_arizona, joel_coen).
actor(raising_arizona, nicolas_cage, h_i_mcdonnough).
actress(raising_arizona, holly_hunter, edwina_ed_mcdonnough).
actor(raising_arizona, trey_wilson, nathan_arizona_huffhines_sr).
actor(raising_arizona, john_goodman, gale_snoats).
actor(raising_arizona, william_forsythe, evelle_snoats).
actor(raising_arizona, sam_mcmurray, glen).
actress(raising_arizona, frances_mcdormand, dot).
actor(raising_arizona, randall_tex_cobb, leonard_smalls).
actor(raising_arizona, t_j_kuhn, nathan_arizona_jr).
actress(raising_arizona, lynne_dumin_kitei, florence_arizona).
actor(raising_arizona, peter_benedek, prison_counselor).
actor(raising_arizona, charles_lew_smith, nice_old_grocery_man).
actor(raising_arizona, warren_keith, younger_fbi_agent).
actor(raising_arizona, henry_kendrick, older_fbi_agent).
actor(raising_arizona, sidney_dawson, moses_ear_bending_cellmate).
actor(raising_arizona, richard_blake, parole_board_chairman).
actor(raising_arizona, troy_nabors, parole_board_member).
actress(raising_arizona, mary_seibel, parole_board_member).
actor(raising_arizona, john_o_donnal, hayseed_in_the_pickup).
actor(raising_arizona, keith_jandacek, whitey).
actor(raising_arizona, warren_forsythe, minister).
actor(raising_arizona, ruben_young, trapped_convict).
actor(raising_arizona, dennis_sullivan, policeman_in_arizona_house).
actor(raising_arizona, richard_alexander, policeman_in_arizona_house).
actor(raising_arizona, rusty_lee, feisty_hayseed).
actor(raising_arizona, james_yeater, fingerprint_technician).
actor(raising_arizona, bill_andres, reporter).
actor(raising_arizona, carver_barns, reporter).
actress(raising_arizona, margaret_h_mccormack, unpainted_arizona_secretary).
actor(raising_arizona, bill_rocz, newscaster).
actress(raising_arizona, mary_f_glenn, payroll_cashier).
actor(raising_arizona, jeremy_babendure, scamp_with_squirt_gun).
actor(raising_arizona, bill_dobbins, adoption_agent).
actor(raising_arizona, ralph_norton, gynecologist).
actor(raising_arizona, henry_tank, mopping_convict).
actor(raising_arizona, frank_outlaw, supermarket_manager).
actor(raising_arizona, todd_michael_rodgers, varsity_nathan_jr).
actor(raising_arizona, m_emmet_walsh, machine_shop_ear_bender).
actor(raising_arizona, robert_gray, glen_and_dot_s_kid).
actress(raising_arizona, katie_thrasher, glen_and_dot_s_kid).
actor(raising_arizona, derek_russell, glen_and_dot_s_kid).
actress(raising_arizona, nicole_russell, glen_and_dot_s_kid).
actor(raising_arizona, zachary_sanders, glen_and_dot_s_kid).
actress(raising_arizona, noell_sanders, glen_and_dot_s_kid).
actor(raising_arizona, cody_ranger, arizona_quint).
actor(raising_arizona, jeremy_arendt, arizona_quint).
actress(raising_arizona, ashley_hammon, arizona_quint).
actress(raising_arizona, crystal_hiller, arizona_quint).
actress(raising_arizona, olivia_hughes, arizona_quint).
actress(raising_arizona, emily_malin, arizona_quint).
actress(raising_arizona, melanie_malin, arizona_quint).
actor(raising_arizona, craig_mclaughlin, arizona_quint).
actor(raising_arizona, adam_savageau, arizona_quint).
actor(raising_arizona, benjamin_savageau, arizona_quint).
actor(raising_arizona, david_schneider, arizona_quint).
actor(raising_arizona, michael_stewart, arizona_quint).
actor(raising_arizona, william_preston_robertson, amazing_voice).
actor(raising_arizona, ron_francis_cobert, reporter_1).

movie(rumble_fish, 1983).
director(rumble_fish, francis_ford_coppola).
actor(rumble_fish, matt_dillon, rusty_james).
actor(rumble_fish, mickey_rourke, the_motorcycle_boy).
actress(rumble_fish, diane_lane, patty).
actor(rumble_fish, dennis_hopper, father).
actress(rumble_fish, diana_scarwid, cassandra).
actor(rumble_fish, vincent_spano, steve).
actor(rumble_fish, nicolas_cage, smokey).
actor(rumble_fish, chris_penn, b_j_jackson).
actor(rumble_fish, laurence_fishburne, midget).
actor(rumble_fish, william_smith, patterson_the_cop).
actor(rumble_fish, michael_higgins, mr_harrigan).
actor(rumble_fish, glenn_withrow, biff_wilcox).
actor(rumble_fish, tom_waits, benny).
actor(rumble_fish, herb_rice, black_pool_player).
actress(rumble_fish, maybelle_wallace, late_pass_clerk).
actress(rumble_fish, nona_manning, patty_s_mom).
actress(rumble_fish, sofia_coppola, donna_patty_s_sister).
actor(rumble_fish, gian_carlo_coppola, cousin_james).
actress(rumble_fish, s_e_hinton, hooker_on_strip).
actor(rumble_fish, emmett_brown, mr_dobson).
actor(rumble_fish, tracey_walter, alley_mugger_1).
actor(rumble_fish, lance_guecia, alley_mugger_2).
actor(rumble_fish, bob_maras, policeman).
actor(rumble_fish, j_t_turner, math_teacher).
actress(rumble_fish, keeva_clayton, lake_girl_1).
actress(rumble_fish, kirsten_hayden, lake_girl_2).
actress(rumble_fish, karen_parker, lake_girl_3).
actress(rumble_fish, sussannah_darcy, lake_girl_4).
actress(rumble_fish, kristi_somers, lake_girl_5).
actress(rumble_fish, heather_langenkamp, '').

movie(spies_like_us, 1985).
director(spies_like_us, john_landis).
actor(spies_like_us, chevy_chase, emmett_fitz_hume).
actor(spies_like_us, dan_aykroyd, austin_millbarge).
actor(spies_like_us, steve_forrest, general_sline).
actress(spies_like_us, donna_dixon, karen_boyer).
actor(spies_like_us, bruce_davison, ruby).
actor(spies_like_us, bernie_casey, colonel_rhumbus).
actor(spies_like_us, william_prince, keyes).
actor(spies_like_us, tom_hatten, general_miegs).
actor(spies_like_us, frank_oz, test_monitor).
actor(spies_like_us, charles_mckeown, jerry_hadley).
actor(spies_like_us, james_daughton, bob_hodges).
actor(spies_like_us, jim_staahl, bud_schnelker).
actress(spies_like_us, vanessa_angel, russian_rocket_crew).
actress(spies_like_us, svetlana_plotnikova, russian_rocket_crew).
actor(spies_like_us, bjarne_thomsen, russian_rocket_crew).
actor(spies_like_us, sergei_rousakov, russian_rocket_crew).
actor(spies_like_us, garrick_dombrovski, russian_rocket_crew).
actor(spies_like_us, terry_gilliam, dr_imhaus).
actor(spies_like_us, costa_gavras, tadzhik_highway_patrol).
actor(spies_like_us, seva_novgorodtsev, tadzhik_highway_patrol).
actor(spies_like_us, stephen_hoye, captain_hefling).
actor(spies_like_us, ray_harryhausen, dr_marston).
actor(spies_like_us, mark_stewart, ace_tomato_courier).
actor(spies_like_us, sean_daniel, ace_tomato_driver).
actor(spies_like_us, jeff_harding, fitz_hume_s_associate).
actress(spies_like_us, heidi_sorenson, alice_fitz_hume_s_supervisor).
actress(spies_like_us, margo_random, reporter).
actor(spies_like_us, douglas_lambert, reporter).
actor(spies_like_us, christopher_malcolm, jumpmaster).
actor(spies_like_us, terrance_conder, soldier_1).
actor(spies_like_us, matt_frewer, soldier_2).
actor(spies_like_us, tony_cyrus, the_khan).
actress(spies_like_us, gusti_bogok, dr_la_fong).
actor(spies_like_us, derek_meddings, dr_stinson).
actor(spies_like_us, robert_paynter, dr_gill).
actor(spies_like_us, bob_hope, golfer).
actor(spies_like_us, gurdial_sira, the_khan_s_brother).
actor(spies_like_us, joel_coen, drive_in_security).
actor(spies_like_us, sam_raimi, drive_in_security).
actor(spies_like_us, michael_apted, ace_tomato_agent).
actor(spies_like_us, b_b_king, ace_tomato_agent).
actor(spies_like_us, larry_cohen, ace_tomato_agent).
actor(spies_like_us, martin_brest, drive_in_security).
actor(spies_like_us, ricco_ross, wamp_guard).
actor(spies_like_us, richard_sharpe, wamp_technician).
actor(spies_like_us, stuart_milligan, wamp_technician).
actress(spies_like_us, sally_anlauf, wamp_technician).
actor(spies_like_us, john_daveikis, russian_border_guard).
actor(spies_like_us, laurence_bilzerian, russian_border_guard).
actor(spies_like_us, richard_kruk, russian_border_guard).
actress(spies_like_us, heather_henson, teenage_girl).
actress(spies_like_us, erin_folsey, teenage_girl).
actor(spies_like_us, bob_swaim, special_forces_commander).
actor(spies_like_us, edwin_newman, himself).
actress(spies_like_us, nancy_gair, student).

movie(star_wars_episode_i__the_phantom_menace, 1999).
director(star_wars_episode_i__the_phantom_menace, george_lucas).
actor(star_wars_episode_i__the_phantom_menace, liam_neeson, qui_gon_jinn).
actor(star_wars_episode_i__the_phantom_menace, ewan_mcgregor, obi_wan_kenobi).
actress(star_wars_episode_i__the_phantom_menace, natalie_portman, queen_padm_naberrie_amidala).
actor(star_wars_episode_i__the_phantom_menace, jake_lloyd, anakin_skywalker).
actress(star_wars_episode_i__the_phantom_menace, pernilla_august, shmi_skywalker).
actor(star_wars_episode_i__the_phantom_menace, frank_oz, yoda).
actor(star_wars_episode_i__the_phantom_menace, ian_mcdiarmid, senator_palpatine).
actor(star_wars_episode_i__the_phantom_menace, oliver_ford_davies, gov_sio_bibble).
actor(star_wars_episode_i__the_phantom_menace, hugh_quarshie, capt_panaka).
actor(star_wars_episode_i__the_phantom_menace, ahmed_best, jar_jar_binks).
actor(star_wars_episode_i__the_phantom_menace, anthony_daniels, c_3po).
actor(star_wars_episode_i__the_phantom_menace, kenny_baker, r2_d2).
actor(star_wars_episode_i__the_phantom_menace, terence_stamp, supreme_chancellor_valorum).
actor(star_wars_episode_i__the_phantom_menace, brian_blessed, boss_nass).
actor(star_wars_episode_i__the_phantom_menace, andrew_secombe, watto).
actor(star_wars_episode_i__the_phantom_menace, ray_park, darth_maul).
actor(star_wars_episode_i__the_phantom_menace, lewis_macleod, sebulba).
actor(star_wars_episode_i__the_phantom_menace, steven_spiers, capt_tarpals).
actor(star_wars_episode_i__the_phantom_menace, silas_carson, viceroy_nute_gunray_ki_adi_mundi_lott_dodd_radiant_vii_pilot).
actor(star_wars_episode_i__the_phantom_menace, ralph_brown, ric_oli).
actress(star_wars_episode_i__the_phantom_menace, celia_imrie, fighter_pilot_bravo_5).
actor(star_wars_episode_i__the_phantom_menace, benedict_taylor, fighter_pilot_bravo_2).
actor(star_wars_episode_i__the_phantom_menace, clarence_smith, fighter_pilot_bravo_3).
actress(star_wars_episode_i__the_phantom_menace, karol_cristina_da_silva, rab).
actor(star_wars_episode_i__the_phantom_menace, samuel_l_jackson, mace_windu).
actor(star_wars_episode_i__the_phantom_menace, dominic_west, palace_guard).
actress(star_wars_episode_i__the_phantom_menace, liz_wilson, eirta).
actress(star_wars_episode_i__the_phantom_menace, candice_orwell, yan).
actress(star_wars_episode_i__the_phantom_menace, sofia_coppola, sach).
actress(star_wars_episode_i__the_phantom_menace, keira_knightley, sab__queen_s_decoy).
actress(star_wars_episode_i__the_phantom_menace, bronagh_gallagher, radiant_vii_captain).
actor(star_wars_episode_i__the_phantom_menace, john_fensom, tc_14).
actor(star_wars_episode_i__the_phantom_menace, greg_proops, beed).
actor(star_wars_episode_i__the_phantom_menace, scott_capurro, fode).
actress(star_wars_episode_i__the_phantom_menace, margaret_towner, jira).
actor(star_wars_episode_i__the_phantom_menace, dhruv_chanchani, kitster).
actor(star_wars_episode_i__the_phantom_menace, oliver_walpole, seek).
actress(star_wars_episode_i__the_phantom_menace, katie_lucas, amee).
actress(star_wars_episode_i__the_phantom_menace, megan_udall, melee).
actor(star_wars_episode_i__the_phantom_menace, hassani_shapi, eeth_koth).
actress(star_wars_episode_i__the_phantom_menace, gin_clarke, adi_gallia).
actor(star_wars_episode_i__the_phantom_menace, khan_bonfils, saesee_tiin).
actress(star_wars_episode_i__the_phantom_menace, michelle_taylor, yarael_poof).
actress(star_wars_episode_i__the_phantom_menace, michaela_cottrell, even_piell).
actress(star_wars_episode_i__the_phantom_menace, dipika_o_neill_joti, depa_billaba).
actor(star_wars_episode_i__the_phantom_menace, phil_eason, yaddle).
actor(star_wars_episode_i__the_phantom_menace, mark_coulier, aks_moe).
actress(star_wars_episode_i__the_phantom_menace, lindsay_duncan, tc_14).
actor(star_wars_episode_i__the_phantom_menace, peter_serafinowicz, darth_maul).
actor(star_wars_episode_i__the_phantom_menace, james_taylor, rune_haako).
actor(star_wars_episode_i__the_phantom_menace, chris_sanders, daultay_dofine).
actor(star_wars_episode_i__the_phantom_menace, toby_longworth, sen_lott_dodd_gragra).
actor(star_wars_episode_i__the_phantom_menace, marc_silk, aks_moe).
actress(star_wars_episode_i__the_phantom_menace, amanda_lucas, tey_how).
actress(star_wars_episode_i__the_phantom_menace, amy_allen, twi_lek_senatorial_aide_dvd_deleted_scenes).
actor(star_wars_episode_i__the_phantom_menace, don_bies, pod_race_mechanic).
actress(star_wars_episode_i__the_phantom_menace, trisha_biggar, orn_free_taa_s_aide).
actor(star_wars_episode_i__the_phantom_menace, jerome_blake, rune_haako_mas_amedda_oppo_rancisis_orn_free_taa).
actress(star_wars_episode_i__the_phantom_menace, michonne_bourriague, aurra_sing).
actor(star_wars_episode_i__the_phantom_menace, ben_burtt, naboo_courier).
actor(star_wars_episode_i__the_phantom_menace, doug_chiang, flag_bearer).
actor(star_wars_episode_i__the_phantom_menace, rob_coleman, pod_race_spectator).
actor(star_wars_episode_i__the_phantom_menace, roman_coppola, senate_guard).
actor(star_wars_episode_i__the_phantom_menace, warwick_davis, wald_pod_race_spectator_mos_espa_citizen).
actor(star_wars_episode_i__the_phantom_menace, c_michael_easton, pod_race_spectator).
actor(star_wars_episode_i__the_phantom_menace, john_ellis, pod_race_spectator).
actor(star_wars_episode_i__the_phantom_menace, ira_feiedman, naboo_courier).
actor(star_wars_episode_i__the_phantom_menace, joss_gower, naboo_fighter_pilot).
actor(star_wars_episode_i__the_phantom_menace, raymond_griffiths, gonk_droid).
actor(star_wars_episode_i__the_phantom_menace, nathan_hamill, pod_race_spectator_naboo_palace_guard).
actor(star_wars_episode_i__the_phantom_menace, tim_harrington, extra_naboo_security_gaurd).
actress(star_wars_episode_i__the_phantom_menace, nifa_hindes, ann_gella).
actress(star_wars_episode_i__the_phantom_menace, nishan_hindes, tann_gella).
actor(star_wars_episode_i__the_phantom_menace, john_knoll, lt_rya_kirsch_bravo_4_flag_bearer).
actress(star_wars_episode_i__the_phantom_menace, madison_lloyd, princess_ellie).
actor(star_wars_episode_i__the_phantom_menace, dan_madsen, kaadu_handler).
actor(star_wars_episode_i__the_phantom_menace, iain_mccaig, orn_free_taa_s_aide).
actor(star_wars_episode_i__the_phantom_menace, rick_mccallum, naboo_courier).
actor(star_wars_episode_i__the_phantom_menace, lorne_peterson, mos_espa_citizen).
actor(star_wars_episode_i__the_phantom_menace, alan_ruscoe, plo_koon_bib_foruna_daultay_dofine).
actor(star_wars_episode_i__the_phantom_menace, steve_sansweet, naboo_courier).
actor(star_wars_episode_i__the_phantom_menace, jeff_shay, pod_race_spectator).
actor(star_wars_episode_i__the_phantom_menace, christian_simpson, bravo_6).
actor(star_wars_episode_i__the_phantom_menace, paul_martin_smith, naboo_courier).
actor(star_wars_episode_i__the_phantom_menace, scott_squires, naboo_speeder_driver).
actor(star_wars_episode_i__the_phantom_menace, tom_sylla, battle_droid).
actor(star_wars_episode_i__the_phantom_menace, danny_wagner, mawhonic).
actor(star_wars_episode_i__the_phantom_menace, dwayne_williams, naboo_courier).
actor(star_wars_episode_i__the_phantom_menace, matthew_wood, bib_fortuna_voice_of_ody_mandrell).
actor(star_wars_episode_i__the_phantom_menace, bob_woods, naboo_courier).

movie(torrance_rises, 1999).
director(torrance_rises, lance_bangs).
director(torrance_rises, spike_jonze).
director(torrance_rises, torrance_community_dance_group).
actor(torrance_rises, spike_jonze, richard_coufey).
actress(torrance_rises, michelle_adams_meeker, herself).
actress(torrance_rises, ashley_barnett, herself).
actress(torrance_rises, dee_buchanan, herself).
actor(torrance_rises, roman_coppola, roman_coppola).
actress(torrance_rises, sofia_coppola, herself).
actress(torrance_rises, renee_diamond, herself).
actor(torrance_rises, eminem, eminem).
actor(torrance_rises, alvin_gaines_molina, himself).
actress(torrance_rises, janeane_garofalo, janeane_garofalo).
actor(torrance_rises, michael_gier, himself).
actor(torrance_rises, richard_koufey, himself).
actor(torrance_rises, byron_s_loyd, himself).
actress(torrance_rises, allison_lynch, herself).
actress(torrance_rises, madonna, madonna).
actor(torrance_rises, kevin_l_maher, himself).
actor(torrance_rises, tony_maxwell, himself).
actress(torrance_rises, lonne_g_moretton, herself).
actress(torrance_rises, joyeve_palffy, herself).
actress(torrance_rises, kristine_petrucione, herself).
actor(torrance_rises, regis_philbin, regis_philbin).
actress(torrance_rises, cynthia_m_reed, herself).
actor(torrance_rises, chris_rock, chris_rock).
actor(torrance_rises, michael_rooney, michael_rooney).
actor(torrance_rises, justin_ross, himself).
actress(torrance_rises, danette_e_sheppard, herself).
actor(torrance_rises, fatboy_slim, fatboy_slim).
actor(torrance_rises, will_smith, will_smith).
actor(torrance_rises, frank_stancati, himself).
actor(torrance_rises, tim_szczepanski, himself).
actress(torrance_rises, michelle_weber, herself).

movie(the_usual_suspects, 1995).
director(the_usual_suspects, bryan_singer).
actor(the_usual_suspects, stephen_baldwin, michael_mcmanus).
actor(the_usual_suspects, gabriel_byrne, dean_keaton).
actor(the_usual_suspects, benicio_del_toro, fred_fenster).
actor(the_usual_suspects, kevin_pollak, todd_hockney).
actor(the_usual_suspects, kevin_spacey, roger_verbal_kint).
actor(the_usual_suspects, chazz_palminteri, dave_kujan_us_customs).
actor(the_usual_suspects, pete_postlethwaite, kobayashi).
actress(the_usual_suspects, suzy_amis, edie_finneran).
actor(the_usual_suspects, giancarlo_esposito, jack_baer_fbi).
actor(the_usual_suspects, dan_hedaya, sgt_geoffrey_jeff_rabin).
actor(the_usual_suspects, paul_bartel, smuggler).
actor(the_usual_suspects, carl_bressler, saul_berg).
actor(the_usual_suspects, phillip_simon, fortier).
actor(the_usual_suspects, jack_shearer, renault).
actress(the_usual_suspects, christine_estabrook, dr_plummer).
actor(the_usual_suspects, clark_gregg, dr_walters).
actor(the_usual_suspects, morgan_hunter, arkosh_kovash).
actor(the_usual_suspects, ken_daly, translator).
actress(the_usual_suspects, michelle_clunie, sketch_artist).
actor(the_usual_suspects, louis_lombardi, strausz).
actor(the_usual_suspects, frank_medrano, rizzi).
actor(the_usual_suspects, ron_gilbert, daniel_metzheiser_dept_of_justice).
actor(the_usual_suspects, vito_d_ambrosio, arresting_officer).
actor(the_usual_suspects, gene_lythgow, cop_on_pier).
actor(the_usual_suspects, robert_elmore, bodyguard_1).
actor(the_usual_suspects, david_powledge, bodyguard_2).
actor(the_usual_suspects, bob_pennetta, bodyguard_3).
actor(the_usual_suspects, billy_bates, bodyguard_4).
actress(the_usual_suspects, smadar_hanson, keyser_s_wife).
actor(the_usual_suspects, castulo_guerra, arturro_marquez).
actor(the_usual_suspects, peter_rocca, jaime_arturro_s_bodyguard).
actor(the_usual_suspects, bert_williams, old_cop_in_property).
actor(the_usual_suspects, john_gillespie, '').
actor(the_usual_suspects, peter_greene, redfoot_the_fence).
actor(the_usual_suspects, christopher_mcquarrie, interrogation_cop).
actor(the_usual_suspects, scott_b_morgan, keyser_s_ze_in_flashback).

movie(the_virgin_suicides, 1999).
director(the_virgin_suicides, sofia_coppola).
actor(the_virgin_suicides, james_woods, mr_lisbon).
actress(the_virgin_suicides, kathleen_turner, mrs_lisbon).
actress(the_virgin_suicides, kirsten_dunst, lux_lisbon).
actor(the_virgin_suicides, josh_hartnett, trip_fontaine).
actor(the_virgin_suicides, michael_par, adult_trip_fontaine).
actor(the_virgin_suicides, scott_glenn, father_moody).
actor(the_virgin_suicides, danny_devito, dr_horniker).
actress(the_virgin_suicides, a_j_cook, mary_lisbon).
actress(the_virgin_suicides, hanna_r_hall, cecilia_lisbon).
actress(the_virgin_suicides, leslie_hayman, therese_lisbon).
actress(the_virgin_suicides, chelse_swain, bonnie_lisbon).
actor(the_virgin_suicides, anthony_desimone, chase_buell).
actor(the_virgin_suicides, lee_kagan, david_barker).
actor(the_virgin_suicides, robert_schwartzman, paul_baldino).
actor(the_virgin_suicides, noah_shebib, parkie_denton).
actor(the_virgin_suicides, jonathan_tucker, tim_weiner).
actor(the_virgin_suicides, joe_roncetti, kevin_head).
actor(the_virgin_suicides, hayden_christensen, joe_hill_conley).
actor(the_virgin_suicides, chris_hale, peter_sisten).
actor(the_virgin_suicides, joe_dinicol, dominic_palazzolo).
actress(the_virgin_suicides, suki_kaiser, lydia_perl).
actress(the_virgin_suicides, dawn_greenhalgh, mrs_scheer).
actor(the_virgin_suicides, allen_stewart_coates, mr_scheer).
actress(the_virgin_suicides, sherry_miller, mrs_buell).
actor(the_virgin_suicides, jonathon_whittaker, mr_buell).
actress(the_virgin_suicides, michelle_duquet, mrs_denton).
actor(the_virgin_suicides, murray_mcrae, mr_denton).
actress(the_virgin_suicides, roberta_hanley, mrs_weiner).
actor(the_virgin_suicides, paul_sybersma, joe_larson).
actress(the_virgin_suicides, susan_sybersma, mrs_larson).
actor(the_virgin_suicides, peter_snider, trip_s_dad).
actor(the_virgin_suicides, gary_brennan, donald).
actor(the_virgin_suicides, charles_boyland, curt_van_osdol).
actor(the_virgin_suicides, dustin_ladd, chip_willard).
actress(the_virgin_suicides, kristin_fairlie, amy_schraff).
actress(the_virgin_suicides, melody_johnson, julie).
actress(the_virgin_suicides, sheyla_molho, danielle).
actress(the_virgin_suicides, ashley_ainsworth, sheila_davis).
actress(the_virgin_suicides, courtney_hawkrigg, grace).
actor(the_virgin_suicides, fran_ois_klanfer, doctor).
actor(the_virgin_suicides, mackenzie_lawrenz, jim_czeslawski).
actor(the_virgin_suicides, tim_hall, kurt_siles).
actor(the_virgin_suicides, amos_crawley, john).
actor(the_virgin_suicides, andrew_gillies, principal_woodhouse).
actress(the_virgin_suicides, marilyn_smith, mrs_woodhouse).
actress(the_virgin_suicides, sally_cahill, mrs_hedlie).
actress(the_virgin_suicides, tracy_ferencz, nurse).
actor(the_virgin_suicides, scot_denton, mr_o_conner).
actress(the_virgin_suicides, catherine_swing, mrs_o_conner).
actor(the_virgin_suicides, timothy_adams, buzz_romano).
actor(the_virgin_suicides, michael_michaelessi, parks_department_foreman).
actress(the_virgin_suicides, sarah_minhas, wanda_brown).
actress(the_virgin_suicides, megan_kennedy, cheerleader).
actress(the_virgin_suicides, sandi_stahlbrand, meredith_thompson).
actor(the_virgin_suicides, neil_girvan, drunk_man_in_pool).
actress(the_virgin_suicides, jaya_karsemeyer, gloria).
actress(the_virgin_suicides, leah_straatsma, rannie).
actor(the_virgin_suicides, mark_polley, cemetery_worker_1).
actor(the_virgin_suicides, kirk_gonnsen, cemetery_worker_2).
actress(the_virgin_suicides, marianne_moroney, teacher).
actress(the_virgin_suicides, anne_wessels, woman_in_chiffon).
actor(the_virgin_suicides, derek_boyes, football_grieving_teacher).
actor(the_virgin_suicides, john_buchan, john_lydia_s_boss).
actress(the_virgin_suicides, mandy_lee_jones, student).
actor(the_virgin_suicides, giovanni_ribisi, narrator).

movie(an_american_rhapsody, 2001).
director(an_american_rhapsody, va_g_rdos).
actress(an_american_rhapsody, scarlett_johansson, suzanne_sandor_at_15).
actress(an_american_rhapsody, nastassja_kinski, margit_sandor).
actress(an_american_rhapsody, raffaella_b_ns_gi, suzanne_infant).
actor(an_american_rhapsody, tony_goldwyn, peter_sandor).
actress(an_american_rhapsody, gnes_b_nfalvy, helen).
actor(an_american_rhapsody, zolt_n_seress, george).
actress(an_american_rhapsody, klaudia_szab, maria_at_4).
actor(an_american_rhapsody, zsolt_zagoni, russian_soldier).
actor(an_american_rhapsody, andr_s_sz_ke, istvan).
actress(an_american_rhapsody, erzsi_p_sztor, ilus).
actor(an_american_rhapsody, carlos_laszlo_weiner, boy_on_train_boy_at_party).
actress(an_american_rhapsody, bori_kereszturi, suzanne_at_3).
actor(an_american_rhapsody, p_ter_k_lloy_moln_r, avo_officer).
actress(an_american_rhapsody, zsuzsa_czink_czi, teri).
actor(an_american_rhapsody, bal_zs_galk, jeno).
actress(an_american_rhapsody, kata_dob, claire).
actress(an_american_rhapsody, va_sz_r_nyi, eva).
actor(an_american_rhapsody, don_pugsley, cafe_supervisor).
actor(an_american_rhapsody, vladimir_mashkov, frank).
actress(an_american_rhapsody, lisa_jane_persky, pattie).
actress(an_american_rhapsody, colleen_camp, dottie).
actress(an_american_rhapsody, kelly_endresz_banlaki, suzanne_at_6).
actress(an_american_rhapsody, imola_g_sp_r, stewardess).
actress(an_american_rhapsody, tatyana_kanavka, girl_in_airport).
actress(an_american_rhapsody, mae_whitman, maria_at_10).
actress(an_american_rhapsody, lorna_scott, neighbor_with_poodle).
actress(an_american_rhapsody, sandra_staggs, saleswoman).
actress(an_american_rhapsody, jacqueline_steiger, betty).
actor(an_american_rhapsody, robert_lesser, harold).
actor(an_american_rhapsody, lou_beach, party_goer).
actress(an_american_rhapsody, marlee_jackson, sheila_at_7).
actress(an_american_rhapsody, emmy_rossum, sheila_at_15).
actor(an_american_rhapsody, timothy_everett_moore, paul).
actor(an_american_rhapsody, joshua_dov, richard).
actress(an_american_rhapsody, larisa_oleynik, maria_sandor_at_18).
actress(an_american_rhapsody, kati_b_cs, woman_1_at_market).
actress(an_american_rhapsody, zsuzsa_sz_ger, woman_2_at_market).
actor(an_american_rhapsody, andras_banlaki, '').
actress(an_american_rhapsody, va_g_rdos, suzanne_sandor_in_family_picture_age_6).
actor(an_american_rhapsody, peter_janosi, german_customs_officer).

movie(the_black_dahlia, 2006).
director(the_black_dahlia, brian_de_palma).
actor(the_black_dahlia, josh_hartnett, ofcr_dwight_bucky_bleichert).
actress(the_black_dahlia, scarlett_johansson, kay_lake).
actress(the_black_dahlia, hilary_swank, madeleine_linscott).
actor(the_black_dahlia, aaron_eckhart, sgt_leland_lee_blanchard).
actress(the_black_dahlia, mia_kirshner, elizabeth_short).
actor(the_black_dahlia, graham_norris, sgt_john_carter).
actress(the_black_dahlia, judith_benezra, '').
actor(the_black_dahlia, richard_brake, bobby_dewitt).
actor(the_black_dahlia, kevin_dunn, cleo_short).
actor(the_black_dahlia, troy_evans, '').
actor(the_black_dahlia, william_finley, '').
actor(the_black_dahlia, patrick_fischler, a_d_a_ellis_loew).
actor(the_black_dahlia, michael_p_flannigan, desk_sergeant).
actor(the_black_dahlia, gregg_henry, '').
actress(the_black_dahlia, claudia_katz, frolic_bartender).
actor(the_black_dahlia, john_kavanagh, emmet_linscott).
actress(the_black_dahlia, laura_kightlinger, hooker).
actor(the_black_dahlia, steven_koller, male_nurse).
actor(the_black_dahlia, angus_macinnes, '').
actor(the_black_dahlia, david_mcdivitt, cop).
actress(the_black_dahlia, rose_mcgowan, sheryl_saddon).
actor(the_black_dahlia, victor_mcguire, '').
actress(the_black_dahlia, rachel_miner, '').
actress(the_black_dahlia, stephanie_l_moore, pretty_girl).
actor(the_black_dahlia, james_otis, '').
actor(the_black_dahlia, david_raibon, black_man).
actress(the_black_dahlia, jemima_rooper, '').
actor(the_black_dahlia, anthony_russell, '').
actor(the_black_dahlia, joost_scholte, gi_pick_up).
actor(the_black_dahlia, pepe_serna, '').
actress(the_black_dahlia, fiona_shaw, '').
actor(the_black_dahlia, joey_slotnick, '').
actor(the_black_dahlia, mike_starr, russ_millard).

movie(fall, 1997).
director(fall, eric_schaeffer).
actor(fall, eric_schaeffer, michael).
actress(fall, amanda_de_cadenet, sarah).
actor(fall, rudolf_martin, phillipe).
actress(fall, francie_swift, robin).
actress(fall, lisa_vidal, sally).
actress(fall, roberta_maxwell, joan_alterman).
actor(fall, jose_yenque, scasse).
actor(fall, josip_kuchan, zsarko).
actress(fall, scarlett_johansson, little_girl).
actress(fall, ellen_barber, woman).
actor(fall, willis_burks_ii, baja).
actor(fall, scott_cohen, derick).
actor(fall, a_j_lopez, bellboy).
actor(fall, casper_martinez, church_goer).
actor(fall, arthur_j_nascarella, anthony_the_maitre_d).
actor(fall, john_o_nelson, guy_by_window).
actor(fall, amaury_nolasco, waiter).
actor(fall, marc_sebastian, popparazi).
actor(fall, evan_thompson, priest).
actor(fall, larry_weiss, paparazzi).

movie(eight_legged_freaks, 2002).
director(eight_legged_freaks, ellory_elkayem).
actor(eight_legged_freaks, david_arquette, chris_mccormick).
actress(eight_legged_freaks, kari_wuhrer, sheriff_samantha_parker).
actor(eight_legged_freaks, scott_terra, mike_parker).
actress(eight_legged_freaks, scarlett_johansson, ashley_parker).
actor(eight_legged_freaks, doug_e_doug, harlan_griffith).
actor(eight_legged_freaks, rick_overton, deputy_pete_willis).
actor(eight_legged_freaks, leon_rippy, wade).
actor(eight_legged_freaks, matt_czuchry, bret).
actor(eight_legged_freaks, jay_arlen_jones, leon).
actress(eight_legged_freaks, eileen_ryan, gladys).
actor(eight_legged_freaks, riley_smith, randy).
actor(eight_legged_freaks, matt_holwick, larry).
actress(eight_legged_freaks, jane_edith_wilson, emma).
actor(eight_legged_freaks, jack_moore, amos).
actor(eight_legged_freaks, roy_gaintner, floyd).
actor(eight_legged_freaks, don_champlin, leroy).
actor(eight_legged_freaks, john_storey, mark).
actor(eight_legged_freaks, david_earl_waterman, norman).
actress(eight_legged_freaks, randi_j_klein, waitress_1).
actress(eight_legged_freaks, terey_summers, waitress_2).
actor(eight_legged_freaks, john_ennis, cop_1).
actor(eight_legged_freaks, ryan_c_benson, cop_2).
actor(eight_legged_freaks, bruiser, himself).
actor(eight_legged_freaks, tom_noonan, joshua_taft).

movie(ghost_world, 2000).
director(ghost_world, terry_zwigoff).
actress(ghost_world, thora_birch, enid).
actress(ghost_world, scarlett_johansson, rebecca).
actor(ghost_world, steve_buscemi, seymour).
actor(ghost_world, brad_renfro, josh).
actress(ghost_world, illeana_douglas, roberta_allsworth).
actor(ghost_world, bob_balaban, enid_s_dad).
actress(ghost_world, stacey_travis, dana).
actor(ghost_world, charles_c_stevenson_jr, norman).
actor(ghost_world, dave_sheridan, doug).
actor(ghost_world, tom_mcgowan, joe).
actress(ghost_world, debra_azar, melora).
actor(ghost_world, brian_george, sidewinder_boss).
actor(ghost_world, pat_healy, john_ellis).
actress(ghost_world, rini_bell, graduation_speaker).
actor(ghost_world, t_j_thyne, todd).
actor(ghost_world, ezra_buzzington, weird_al).
actress(ghost_world, lindsey_girardot, vanilla__graduation_rapper).
actress(ghost_world, joy_bisco, jade__graduation_rapper).
actress(ghost_world, venus_demilo, ebony__graduation_rapper).
actress(ghost_world, ashley_peldon, margaret__art_class).
actor(ghost_world, chachi_pittman, phillip__art_class).
actress(ghost_world, janece_jordan, black_girl__art_class).
actress(ghost_world, kaileigh_martin, snotty_girl__art_class).
actor(ghost_world, alexander_fors, hippy_boy__art_class).
actor(ghost_world, marc_vann, jerome_the_angry_guy__record_collector).
actor(ghost_world, james_sie, steven_the_asian_guy__record_collector).
actor(ghost_world, paul_keith, paul_the_fussy_guy__record_collector).
actor(ghost_world, david_cross, gerrold_the_pushy_guy__record_collector).
actor(ghost_world, j_j_bad_boy_jones, fred_chatman__blues_club).
actress(ghost_world, dylan_jones, red_haired_girl__blues_club).
actor(ghost_world, martin_grey, m_c__blues_club).
actor(ghost_world, steve_pierson, blueshammer_member__blues_club).
actor(ghost_world, jake_la_botz, blueshammer_member__blues_club).
actor(ghost_world, johnny_irion, blueshammer_member__blues_club).
actor(ghost_world, nate_wood, blueshammer_member__blues_club).
actor(ghost_world, charles_schneider, joey_mccobb_the_stand_up_comic).
actor(ghost_world, sid_hillman, zine_o_phobia_creep).
actor(ghost_world, joshua_wheeler, zine_o_phobia_creep).
actor(ghost_world, patrick_fischler, masterpiece_video_clerk).
actor(ghost_world, daniel_graves, masterpiece_video_customer).
actor(ghost_world, matt_doherty, masterpiece_video_employee).
actor(ghost_world, joel_michaely, porno_cashier).
actress(ghost_world, debi_derryberry, rude_coffee_customer).
actor(ghost_world, joseph_sikora, reggae_fan).
actor(ghost_world, brett_gilbert, alien_autopsy_guy).
actor(ghost_world, alex_solowitz, cineplex_manager).
actor(ghost_world, tony_ketcham, alcoholic_customer).
actress(ghost_world, mary_bogue, popcorn_customer).
actor(ghost_world, brian_jacobs, soda_customer).
actor(ghost_world, patrick_yonally, garage_sale_hipster).
actress(ghost_world, lauren_bowles, angry_garage_sale_woman).
actress(ghost_world, lorna_scott, phyllis_the_art_show_curator).
actor(ghost_world, jeff_murray, roberta_s_colleague).
actor(ghost_world, jerry_rector, dana_s_co_worker).
actor(ghost_world, john_bunnell, seymour_s_boss).
actress(ghost_world, diane_salinger, psychiatrist).
actress(ghost_world, anna_berger, seymour_s_mother).
actor(ghost_world, bruce_glover, feldman_the_wheel_chair_guy).
actress(ghost_world, joan_m_blair, lady_crossing_street_slowly).
actor(ghost_world, michael_chanslor, orange_colored_sky_keyboarder_graduation_band).
actress(ghost_world, teri_garr, maxine).
actor(ghost_world, alan_heitz, driver).
actor(ghost_world, ernie_hernandez, orange_colored_sky_guitarist_graduation_band).
actor(ghost_world, felice_hernandez, orange_colored_sky_singer_graduation_band).
actor(ghost_world, larry_klein, orange_colored_sky_drummer_graduation_band).
actor(ghost_world, james_matusky, reggae_fan_2).
actor(ghost_world, edward_t_mcavoy, mr_satanist).
actress(ghost_world, margaret_kontra_palmer, lady_at_garage_sale).
actor(ghost_world, larry_parker, orange_colored_sky_bassist_graduation_band).
actor(ghost_world, greg_wendell_reid, yuppie_1).
actress(ghost_world, michelle_marie_white, mom_in_convenience_store).
actor(ghost_world, peter_yarrow, himself).

movie(a_good_woman, 2004).
director(a_good_woman, mike_barker).
actress(a_good_woman, helen_hunt, mrs_erlynne).
actress(a_good_woman, scarlett_johansson, meg_windermere).
actress(a_good_woman, milena_vukotic, contessa_lucchino).
actor(a_good_woman, stephen_campbell_moore, lord_darlington).
actor(a_good_woman, mark_umbers, robert_windemere).
actor(a_good_woman, roger_hammond, cecil).
actor(a_good_woman, john_standing, dumby).
actor(a_good_woman, tom_wilkinson, tuppy).
actress(a_good_woman, giorgia_massetti, alessandra).
actress(a_good_woman, diana_hardcastle, lady_plymdale).
actress(a_good_woman, shara_orano, francesca).
actress(a_good_woman, jane_how, mrs_stutfield).
actor(a_good_woman, bruce_mcguire, waiter_joe).
actor(a_good_woman, michael_stromme, hotel_desk_clerk).
actor(a_good_woman, antonio_barbaro, paulo).
actress(a_good_woman, valentina_d_uva, giuseppina_glove_shop_girl).
actor(a_good_woman, filippo_santoro, old_man).
actor(a_good_woman, augusto_zucchi, antique_shop_keeper).
actress(a_good_woman, carolina_levi, dress_shop_salesgirl).
actress(a_good_woman, daniela_stanga, dress_shop_owner).
actress(a_good_woman, arianna_mansi, stella_s_maid_1).
actress(a_good_woman, camilla_bertocci, stella_s_maid_2).
actress(a_good_woman, nichola_aigner, mrs_gowper).

movie(if_lucy_fell, 1996).
director(if_lucy_fell, eric_schaeffer).
actress(if_lucy_fell, sarah_jessica_parker, lucy_ackerman).
actor(if_lucy_fell, eric_schaeffer, joe_macgonaughgill).
actor(if_lucy_fell, ben_stiller, bwick_elias).
actress(if_lucy_fell, elle_macpherson, jane_lindquist).
actor(if_lucy_fell, james_rebhorn, simon_ackerman).
actor(if_lucy_fell, robert_john_burke, handsome_man).
actor(if_lucy_fell, david_thornton, ted).
actor(if_lucy_fell, bill_sage, dick).
actor(if_lucy_fell, dominic_chianese, al).
actress(if_lucy_fell, scarlett_johansson, emily).
actor(if_lucy_fell, michael_storms, sam).
actor(if_lucy_fell, jason_myers, billy).
actress(if_lucy_fell, emily_hart, eddy).
actor(if_lucy_fell, paul_greco, rene).
actor(if_lucy_fell, mujibur_rahman, counterman).
actor(if_lucy_fell, sirajul_islam, counterman).
actor(if_lucy_fell, ben_lin, chinese_messenger).
actress(if_lucy_fell, alice_spivak, elegant_middle_aged_woman).
actress(if_lucy_fell, lisa_gerstein, saleswoman).
actress(if_lucy_fell, molly_schulman, kid).
actor(if_lucy_fell, peter_walker, bag_man).
actor(if_lucy_fell, bradley_jenkel, neighbor).
actor(if_lucy_fell, brian_keane, man_in_gallery).
actress(if_lucy_fell, amanda_kravat, woman_in_park).

movie(home_alone_3, 1997).
director(home_alone_3, raja_gosnell).
actor(home_alone_3, alex_d_linz, alex_pruitt).
actor(home_alone_3, olek_krupa, peter_beaupre).
actress(home_alone_3, rya_kihlstedt, alice_ribbons).
actor(home_alone_3, lenny_von_dohlen, burton_jernigan).
actor(home_alone_3, david_thornton, earl_unger).
actress(home_alone_3, haviland_morris, karen_pruitt).
actor(home_alone_3, kevin_kilner, jack_pruitt).
actress(home_alone_3, marian_seldes, mrs_hess).
actor(home_alone_3, seth_smith, stan_pruitt).
actress(home_alone_3, scarlett_johansson, molly_pruitt).
actor(home_alone_3, christopher_curry, agent_stuckey).
actor(home_alone_3, baxter_harris, police_captain).
actor(home_alone_3, james_saito, chinese_mob_boss).
actor(home_alone_3, kevin_gudahl, techie).
actor(home_alone_3, richard_hamilton, taxi_driver).
actor(home_alone_3, freeman_coffey, recruiting_officer).
actress(home_alone_3, krista_lally, dispatcher).
actor(home_alone_3, neil_flynn, police_officer_1).
actor(home_alone_3, tony_mockus_jr, police_officer_2).
actor(home_alone_3, pat_healy, agent_rogers).
actor(home_alone_3, james_chisem, police_officer_3).
actor(home_alone_3, darwin_harris, photographer).
actress(home_alone_3, adrianne_duncan, flight_attendant).
actress(home_alone_3, sharon_sachs, annoying_woman).
actor(home_alone_3, joseph_luis_caballero, security_guard).
actor(home_alone_3, larry_c_tankson, cart_driver).
actress(home_alone_3, jennifer_a_daley, police_photographer_2).
actor(home_alone_3, darren_t_knaus, parrot).
actress(home_alone_3, caryn_cheever, ticketing_agent).
actress(home_alone_3, sarah_godshaw, latchkey_girl).
actor(home_alone_3, andy_john_g_kalkounos, police_officer_1).
actor(home_alone_3, zachary_lee, johnny_allen).
actress(home_alone_3, kelly_ann_marquart, girl_on_sidewalk).

movie(the_horse_whisperer, 1998).
director(the_horse_whisperer, robert_redford).
actor(the_horse_whisperer, robert_redford, tom_booker).
actress(the_horse_whisperer, kristin_scott_thomas, annie_maclean).
actor(the_horse_whisperer, sam_neill, robert_maclean).
actress(the_horse_whisperer, dianne_wiest, diane_booker).
actress(the_horse_whisperer, scarlett_johansson, grace_maclean).
actor(the_horse_whisperer, chris_cooper, frank_booker).
actress(the_horse_whisperer, cherry_jones, liz_hammond).
actor(the_horse_whisperer, ty_hillman, joe_booker).
actress(the_horse_whisperer, kate_bosworth, judith).
actor(the_horse_whisperer, austin_schwarz, twin_1).
actor(the_horse_whisperer, dustin_schwarz, twin_2).
actress(the_horse_whisperer, jeanette_nolan, ellen_booker).
actor(the_horse_whisperer, steve_frye, hank).
actor(the_horse_whisperer, don_edwards, smokey).
actress(the_horse_whisperer, jessalyn_gilsig, lucy_annie_s_assistant).
actor(the_horse_whisperer, william_buddy_byrd, lester_petersen).
actor(the_horse_whisperer, john_hogarty, local_tracker).
actor(the_horse_whisperer, michel_lalonde, park_ranger).
actor(the_horse_whisperer, c_j_byrnes, doctor).
actress(the_horse_whisperer, kathy_baldwin_keenan, nurse_1).
actress(the_horse_whisperer, allison_moorer, barn_dance_vocalist).
actor(the_horse_whisperer, george_a_sack_jr, truck_driver).
actress(the_horse_whisperer, kellee_sweeney, nurse_2).
actor(the_horse_whisperer, stephen_pearlman, david_gottschalk).
actress(the_horse_whisperer, joelle_carter, office_worker_1).
actress(the_horse_whisperer, sunny_chae, office_worker_2).
actress(the_horse_whisperer, anne_joyce, office_worker_3).
actress(the_horse_whisperer, tara_sobeck, schoolgirl_1).
actress(the_horse_whisperer, kristy_ann_servidio, schoolgirl_2).
actress(the_horse_whisperer, marie_engle, neighbor).
actor(the_horse_whisperer, curt_pate, handsome_cowboy).
actor(the_horse_whisperer, steven_brian_conard, ranch_hand).
actress(the_horse_whisperer, tammy_pate, roper).
actress(the_horse_whisperer, gloria_lynne_henry, member_of_magazine_staff).
actor(the_horse_whisperer, lance_r_jones, ranch_hand).
actor(the_horse_whisperer, donnie_saylor, rugged_cowboy).
actor(the_horse_whisperer, george_strait, himself).

movie(in_good_company, 2004).
director(in_good_company, paul_weitz).
actor(in_good_company, dennis_quaid, dan_foreman).
actor(in_good_company, topher_grace, carter_duryea).
actress(in_good_company, scarlett_johansson, alex_foreman).
actress(in_good_company, marg_helgenberger, ann_foreman).
actor(in_good_company, david_paymer, morty).
actor(in_good_company, clark_gregg, mark_steckle).
actor(in_good_company, philip_baker_hall, eugene_kalb).
actress(in_good_company, selma_blair, kimberly).
actor(in_good_company, frankie_faison, corwin).
actor(in_good_company, ty_burrell, enrique_colon).
actor(in_good_company, kevin_chapman, lou).
actress(in_good_company, amy_aquino, alicia).
actress(in_good_company, zena_grey, jana_foreman).
actress(in_good_company, colleen_camp, receptionist).
actress(in_good_company, lauren_tom, obstetrician).
actor(in_good_company, ron_bottitta, porsche_dealer).
actor(in_good_company, jon_collin, waiter).
actor(in_good_company, shishir_kurup, maitre_d).
actor(in_good_company, tim_edward_rhoze, theo).
actor(in_good_company, enrique_castillo, hector).
actor(in_good_company, john_cho, petey).
actor(in_good_company, chris_ausnit, young_executive).
actress(in_good_company, francesca_roberts, loan_officer).
actor(in_good_company, gregory_north, lawyer).
actor(in_good_company, gregory_hinton, moving_man).
actor(in_good_company, todd_lyon, moving_man).
actor(in_good_company, thomas_j_dooley, moving_man).
actor(in_good_company, robin_t_kirksey, basketball_ringer).
actress(in_good_company, katherine_ellis, maya__roommate).
actor(in_good_company, nick_schutt, carter_s_assistant).
actor(in_good_company, john_kepley, salesman).
actor(in_good_company, mobin_khan, salesman).
actress(in_good_company, jeanne_kort, saleswoman).
actor(in_good_company, dean_a_parker, mike).
actor(in_good_company, richard_hotson, fired_employee).
actress(in_good_company, shar_washington, fired_employee).
actress(in_good_company, rebecca_hedrick, teddy_k_s_assistant).
actor(in_good_company, miguel_arteta, globecom_technician).
actor(in_good_company, sam_tippe, kid_at_party).
actress(in_good_company, roma_torre, anchorwoman).
actor(in_good_company, andre_cablayan, legally_dedd).
actor(in_good_company, dante_powell, legally_dedd).
actress(in_good_company, michalina_almindo, hector_s_date).
actor(in_good_company, bennett_andrews, greensman).
actress(in_good_company, claudia_barroso, bar_patron).
actress(in_good_company, jaclynn_tiffany_brown, basketball_player).
actor(in_good_company, malcolm_mcdowell, teddy_k__globecom_ceo).
actor(in_good_company, scott_sahadi, moving_man).
actress(in_good_company, loretta_shenosky, kalb_s_assistant).
actor(in_good_company, trevor_stynes, man_on_street).

movie(just_cause, 1995).
director(just_cause, arne_glimcher).
actor(just_cause, sean_connery, paul_armstrong).
actor(just_cause, laurence_fishburne, sheriff_tanny_brown).
actress(just_cause, kate_capshaw, laurie_armstrong).
actor(just_cause, blair_underwood, bobby_earl).
actor(just_cause, ed_harris, blair_sullivan).
actor(just_cause, christopher_murray, detective_t_j_wilcox).
actress(just_cause, ruby_dee, evangeline).
actress(just_cause, scarlett_johansson, kate_armstrong).
actor(just_cause, daniel_j_travanti, warden).
actor(just_cause, ned_beatty, mcnair).
actress(just_cause, liz_torres, delores_rodriguez).
actress(just_cause, lynne_thigpen, ida_conklin).
actress(just_cause, taral_hicks, lena_brown).
actor(just_cause, victor_slezak, sgt_rogers).
actor(just_cause, kevin_mccarthy, phil_prentiss).
actress(just_cause, hope_lange, libby_prentiss).
actor(just_cause, chris_sarandon, lyle_morgan).
actor(just_cause, george_plimpton, elder_phillips).
actress(just_cause, brooke_alderson, dr_doliveau).
actress(just_cause, colleen_fitzpatrick, prosecutor).
actor(just_cause, richard_liberty, chaplin).
actor(just_cause, joel_s_ehrenkranz, judge).
actress(just_cause, barbara_jean_kane, joanie_shriver).
actor(just_cause, maurice_jamaal_brown, reese_brown).
actor(just_cause, patrick_maycock, kid_washing_car_1).
actor(just_cause, jordan_f_vaughn, kid_washing_car_2).
actor(just_cause, francisco_paz, concierge).
actress(just_cause, marie_hyman, clerk).
actor(just_cause, s_bruce_wilson, party_guest).
actor(just_cause, erik_stephan, student).
actress(just_cause, melanie_hughes, receptionist).
actress(just_cause, megan_meinardus, slumber_party_girl).
actress(just_cause, melissa_hood_julien, slumber_party_girl).
actress(just_cause, jenna_del_buono, slumber_party_girl).
actress(just_cause, ashley_popelka, slumber_party_girl).
actress(just_cause, marisa_perry, slumber_party_girl).
actress(just_cause, ashley_council, slumber_party_girl).
actress(just_cause, augusta_lundsgaard, slumber_party_girl).
actress(just_cause, connie_lee_brown, prison_guard).
actor(just_cause, clarence_lark_iii, prison_guard).
actor(just_cause, monte_st_james, prisoner).
actor(just_cause, gary_landon_mills, prisoner).
actor(just_cause, shareef_malnik, prisoner).
actor(just_cause, tony_bolano, prisoner).
actor(just_cause, angelo_maldonado, prisoner).
actor(just_cause, fausto_rodriguez, prisoner).
actress(just_cause, karen_leeds, reporter).
actor(just_cause, dan_romero, reporter).
actor(just_cause, donn_lamkin, reporter).
actress(just_cause, stacie_a_zinn, reporter).
actress(just_cause, kylie_delre, woman_in_courtroom).
actress(just_cause, deborah_smith_ford, medical_examiner).
actor(just_cause, patrick_fullerton, reporter).
actor(just_cause, jody_millard, prison_guard).
actor(just_cause, michael_sassano, courtroom_observer).
actor(just_cause, rene_teboe, man_in_bus_terminal).

movie(the_island, 2005).
director(the_island, michael_bay).
actor(the_island, ewan_mcgregor, lincoln_six_echo_tom_lincoln).
actress(the_island, scarlett_johansson, jordan_two_delta_sarah_jordan).
actor(the_island, djimon_hounsou, albert_laurent).
actor(the_island, sean_bean, merrick).
actor(the_island, steve_buscemi, mccord).
actor(the_island, michael_clarke_duncan, starkweather).
actor(the_island, ethan_phillips, jones_three_echo).
actor(the_island, brian_stepanek, gandu_three_echo).
actress(the_island, noa_tishby, community_announcer).
actress(the_island, siobhan_flynn, lima_one_alpha).
actor(the_island, troy_blendell, laurent_team_member).
actor(the_island, jamie_mcbride, laurent_team_member).
actor(the_island, kevin_mccorkle, laurent_team_member).
actor(the_island, gary_nickens, laurent_team_member).
actress(the_island, kathleen_rose_perkins, laurent_team_member).
actor(the_island, richard_whiten, laurent_team_member).
actor(the_island, max_baker, carnes).
actor(the_island, phil_abrams, harvest_doctor).
actress(the_island, svetlana_efremova, harvest_midwife).
actress(the_island, katy_boyer, harvest_surgeon).
actor(the_island, randy_oglesby, harvest_surgeon).
actress(the_island, yvette_nicole_brown, harvest_nurse).
actress(the_island, taylor_gilbert, harvest_nurse).
actress(the_island, wendy_haines, harvest_nurse).
actor(the_island, tim_halligan, institute_coroner).
actor(the_island, glenn_morshower, medical_courier).
actor(the_island, michael_canavan, extraction_room_doctor).
actor(the_island, jimmy_smagula, extraction_room_technician).
actor(the_island, ben_tolpin, extraction_room_technician).
actor(the_island, robert_sherman, agnate_in_pod).
actor(the_island, rich_hutchman, dept_of_operations_supervisor).
actor(the_island, gonzalo_menendez, dept_of_operations_technician).
actress(the_island, olivia_tracey, dept_of_operations_agnate).
actor(the_island, ray_xifo, elevator_agnate).
actress(the_island, mary_pat_gleason, nutrition_clerk).
actress(the_island, ashley_yegan, stim_bar_bartender).
actress(the_island, whitney_dylan, client_services_operator).
actress(the_island, mitzi_martin, atrium_tour_guide).
actor(the_island, lewis_dauber, tour_group_man).
actress(the_island, shelby_leverington, tour_group_woman).
actor(the_island, don_creech, god_like_man).
actor(the_island, richard_v_licata, board_member).
actor(the_island, eamon_behrens, censor).
actor(the_island, alex_carter, censor).
actor(the_island, kevin_daniels, censor).
actor(the_island, grant_garrison, censor).
actor(the_island, kenneth_hughes, censor).
actor(the_island, brian_leckner, censor).
actor(the_island, dakota_mitchell, censor).
actor(the_island, marty_papazian, censor).
actor(the_island, phil_somerville, censor).
actor(the_island, ryan_tasz, censor).
actor(the_island, kirk_ward, censor).
actor(the_island, kelvin_han_yee, censor).
actress(the_island, shawnee_smith, suzie).
actor(the_island, chris_ellis, aces__spades_bartender).
actor(the_island, don_michael_paul, bar_guy).
actor(the_island, eric_stonestreet, ed_the_trucker).
actor(the_island, james_granoff, sarah_s_son).
actor(the_island, james_hart, lapd_officer).
actor(the_island, craig_reynolds, lapd_officer).
actor(the_island, trent_ford, calvin_klein_model).
actress(the_island, sage_thomas, girl_at_beach).
actor(the_island, mark_christopher_lawrence, construction_worker).
actress(the_island, jenae_altschwager, kim).
actor(the_island, john_anton, clone).
actress(the_island, mary_castro, busty_dancer_in_bar).
actor(the_island, kim_coates, charles_whitman).
actor(the_island, tom_everett, the_president).
actor(the_island, mitch_haubert, censor_doctor).
actor(the_island, robert_isaac, agnate).
actor(the_island, j_p_manoux, seven_foxtrot).
actress(the_island, jennifer_secord, patron).
actor(the_island, mckay_stewart, falling_building_dodger).
actor(the_island, skyler_stone, sarah_jordan_s_husband).
actor(the_island, richard_john_walters, agnate).

movie(a_love_song_for_bobby_long, 2004).
director(a_love_song_for_bobby_long, shainee_gabel).
actor(a_love_song_for_bobby_long, john_travolta, bobby_long).
actress(a_love_song_for_bobby_long, scarlett_johansson, pursy_will).
actor(a_love_song_for_bobby_long, gabriel_macht, lawson_pines).
actress(a_love_song_for_bobby_long, deborah_kara_unger, georgianna).
actor(a_love_song_for_bobby_long, dane_rhodes, cecil).
actor(a_love_song_for_bobby_long, david_jensen, junior).
actor(a_love_song_for_bobby_long, clayne_crawford, lee).
actor(a_love_song_for_bobby_long, sonny_shroyer, earl).
actor(a_love_song_for_bobby_long, walter_breaux, ray).
actress(a_love_song_for_bobby_long, carol_sutton, ruthie).
actor(a_love_song_for_bobby_long, warren_kole, sean).
actor(a_love_song_for_bobby_long, bernard_johnson, tiny).
actress(a_love_song_for_bobby_long, gina_ginger_bernal, waitress).
actor(a_love_song_for_bobby_long, douglas_m_griffin, man_1).
actor(a_love_song_for_bobby_long, earl_maddox, man_2).
actor(a_love_song_for_bobby_long, steve_maye, man_3).
actor(a_love_song_for_bobby_long, don_brady, old_man).
actor(a_love_song_for_bobby_long, will_barnett, old_man_2).
actor(a_love_song_for_bobby_long, patrick_mccullough, streetcar_boy).
actress(a_love_song_for_bobby_long, leanne_cochran, streetcar_girl).
actor(a_love_song_for_bobby_long, nick_loren, merchant).
actress(a_love_song_for_bobby_long, brooke_allen, sandy).
actor(a_love_song_for_bobby_long, sal_sapienza, jazz_club_patron).
actor(a_love_song_for_bobby_long, doc_whitney, alcoholic).

movie(manny__lo, 1996).
director(manny__lo, lisa_krueger).
actress(manny__lo, mary_kay_place, elaine).
actress(manny__lo, scarlett_johansson, amanda).
actress(manny__lo, aleksa_palladino, laurel).
actor(manny__lo, dean_silvers, suburban_family).
actress(manny__lo, marlen_hecht, suburban_family).
actor(manny__lo, forrest_silvers, suburban_family).
actor(manny__lo, tyler_silvers, suburban_family).
actress(manny__lo, lisa_campion, convenience_store_clerk).
actor(manny__lo, glenn_fitzgerald, joey).
actress(manny__lo, novella_nelson, georgine).
actress(manny__lo, susan_decker, baby_store_customer_1).
actress(manny__lo, marla_zuk, baby_store_customer_2).
actress(manny__lo, bonnie_johnson, baby_store_customer_3).
actress(manny__lo, melissa_johnson, child).
actress(manny__lo, angie_phillips, connie).
actor(manny__lo, cameron_boyd, chuck).
actress(manny__lo, monica_smith, chuck_s_mom).
actress(manny__lo, melanie_johansson, golf_course_family).
actor(manny__lo, karsten_johansson, golf_course_family).
actor(manny__lo, hunter_johansson, golf_course_family).
actress(manny__lo, vanessa_johansson, golf_course_family).
actor(manny__lo, frank_green_jr, other_golfer).
actress(manny__lo, shelley_dee_green, other_golfer).
actor(manny__lo, david_destaebler, golf_course_cop).
actor(manny__lo, mark_palmieri, golf_course_cop).
actor(manny__lo, paul_guilfoyle, country_house_owner).
actor(manny__lo, tony_arnaud, sheriff).
actor(manny__lo, nicholas_lent, lo_s_baby).

movie(match_point, 2005).
director(match_point, woody_allen).
actress(match_point, scarlett_johansson, nola_rice).
actor(match_point, jonathan_rhys_meyers, chris_wilton).
actress(match_point, emily_mortimer, chloe_hewett_wilton).
actor(match_point, matthew_goode, tom_hewett).
actor(match_point, brian_cox, alec_hewett).
actress(match_point, penelope_wilton, eleanor_hewett).
actor(match_point, layke_anderson, youth_at_palace_theatre).
actor(match_point, alexander_armstrong, '').
actor(match_point, morne_botes, michael).
actress(match_point, rose_keegan, carol).
actor(match_point, eddie_marsan, reeves).
actor(match_point, james_nesbitt, '').
actor(match_point, steve_pemberton, di_parry).
actress(match_point, miranda_raison, heather).
actor(match_point, colin_salmon, '').
actress(match_point, zoe_telford, samantha).

movie(my_brother_the_pig, 1999).
director(my_brother_the_pig, erik_fleming).
actor(my_brother_the_pig, nick_fuoco, george_caldwell).
actress(my_brother_the_pig, scarlett_johansson, kathy_caldwell).
actor(my_brother_the_pig, judge_reinhold, richard_caldwell).
actress(my_brother_the_pig, romy_windsor, dee_dee_caldwell).
actress(my_brother_the_pig, eva_mendes, matilda).
actor(my_brother_the_pig, alex_d_linz, freud).
actor(my_brother_the_pig, paul_renteria, border_guard).
actress(my_brother_the_pig, renee_victor, grandma_berta).
actress(my_brother_the_pig, cambria_gonzalez, mercedes).
actress(my_brother_the_pig, nicole_zarate, annie).
actor(my_brother_the_pig, eduardo_antonio_garcia, luis).
actress(my_brother_the_pig, siri_baruc, tourist_girl).
actor(my_brother_the_pig, charlie_combes, tourist_dad).
actress(my_brother_the_pig, dee_ann_johnston, tourist_mom).
actor(my_brother_the_pig, marco_rodriguez, eduardo).
actor(my_brother_the_pig, rob_johnston, taxi_driver).
actor(my_brother_the_pig, dee_bradley_baker, pig_george).

movie(north, 1994).
director(north, rob_reiner).
actor(north, elijah_wood, north).
actor(north, jason_alexander, north_s_dad).
actress(north, julia_louis_dreyfus, north_s_mom).
actor(north, marc_shaiman, piano_player).
actor(north, jussie_smollett, adam).
actress(north, taylor_fry, zoe).
actress(north, alana_austin, sarah).
actress(north, peg_shirley, teacher).
actor(north, chuck_cooper, umpire).
actor(north, alan_zweibel, coach).
actor(north, donavon_dietz, assistant_coach).
actor(north, teddy_bergman, teammate).
actor(north, michael_cipriani, teammate).
actor(north, joran_corneal, teammate).
actor(north, joshua_kaplan, teammate).
actor(north, bruce_willis, narrator).
actor(north, james_f_dean, dad_smith).
actor(north, glenn_walker_harris_jr, jeffrey_smith).
actress(north, nancy_nichols, mom_jones).
actor(north, ryan_o_neill, andy_wilson).
actor(north, kim_delgado, dad_johnson).
actor(north, tony_t_johnson, steve_johnson).
actor(north, matthew_mccurley, winchell).
actress(north, carmela_rappazzo, receptionist).
actor(north, jordan_jacobson, vice_president).
actress(north, rafale_yermazyan, austrian_dancer).
actor(north, jon_lovitz, arthur_belt).
actor(north, mitchell_group, dad_wilson).
actress(north, pamela_harley, reporter).
actor(north, glenn_kubota, reporter).
actor(north, matthew_arkin, reporter).
actor(north, marc_coppola, reporter).
actress(north, colette_bryce, reporter).
actor(north, bryon_stewart, bailiff).
actor(north, alan_arkin, judge_buckle).
actor(north, alan_rachins, defense_attorney).
actress(north, abbe_levin, operator).
actress(north, lola_pashalinski, operator).
actress(north, kimberly_topper, operator).
actress(north, c_c_loveheart, operator).
actress(north, helen_hanft, operator).
actress(north, carol_honda, operator).
actress(north, peggy_gormley, operator).
actress(north, lillias_white, operator).
actor(north, dan_aykroyd, pa_tex).
actress(north, reba_mcentire, ma_tex).
actor(north, mark_meismer, texas_dancer).
actress(north, danielle_burgio, texas_dancer).
actor(north, bryan_anthony, texas_dancer).
actress(north, carmit_bachar, texas_dancer).
actor(north, james_harkness, texas_dancer).
actress(north, krista_buonauro, texas_dancer).
actor(north, brett_heine, texas_dancer).
actress(north, kelly_cooper, texas_dancer).
actor(north, chad_e_allen, texas_dancer).
actress(north, stefanie_roos, texas_dancer).
actor(north, donovan_keith_hesser, texas_dancer).
actress(north, jenifer_strovas, texas_dancer).
actor(north, christopher_d_childers, texas_dancer).
actor(north, sebastian_lacause, texas_dancer).
actress(north, lydia_e_merritt, texas_dancer).
actor(north, greg_rosatti, texas_dancer).
actress(north, kelly_shenefiel, texas_dancer).
actress(north, jenifer_panton, betty_lou).
actor(north, keone_young, governor_ho).
actress(north, lauren_tom, mrs_ho).
actor(north, gil_janklowicz, man_on_beach).
actress(north, maud_winchester, stewart_s_mom).
actor(north, tyler_gurciullo, stewart).
actor(north, fritz_sperberg, stewart_s_dad).
actress(north, brynn_hartman, waitress).
actor(north, larry_b_williams, alaskan_pilot).
actor(north, graham_greene, alaskan_dad).
actress(north, kathy_bates, alaskan_mom).
actor(north, abe_vigoda, alaskan_grandpa).
actor(north, richard_belzer, barker).
actor(north, monty_bass, eskimo).
actor(north, farrell_thomas, eskimo).
actor(north, billy_daydoge, eskimo).
actor(north, henri_towers, eskimo).
actress(north, caroline_carr, eskimo).
actress(north, eva_larson, eskimo).
actor(north, ben_stein, curator).
actress(north, marla_frees, d_c_reporter).
actor(north, robert_rigamonti, d_c_reporter).
actor(north, alexander_godunov, amish_dad).
actress(north, kelly_mcgillis, amish_mom).
actor(north, jay_black, amish_pilot).
actress(north, rosalind_chao, chinese_mom).
actor(north, george_cheung, chinese_barber).
actor(north, ayo_adejugbe, african_dad).
actress(north, darwyn_carson, african_mom).
actress(north, lucy_lin, female_newscaster).
actress(north, faith_ford, donna_nelson).
actor(north, john_ritter, ward_nelson).
actress(north, scarlett_johansson, laura_nelson).
actor(north, jesse_zeigler, bud_nelson).
actor(north, robert_costanzo, al).
actress(north, audrey_klebahn, secretary).
actor(north, philip_levy, panhandler).
actor(north, dan_grimaldi, hot_dog_vendor).
actor(north, marvin_braverman, waiter).
actress(north, wendle_josepher, ticket_agent).
actor(north, adam_zweibel, kid_in_airport).
actor(north, matthew_horn, kid_in_airport).
actress(north, sarah_martineck, kid_in_airport).
actor(north, brian_levinson, kid_in_airport).
actor(north, d_l_shroder, federal_express_agent).
actor(north, brother_douglas, new_york_city_pimp).
actor(north, nick_taylor, newsman).
actor(north, jim_great_elk_waters, eskimo_father).
actor(north, michael_werckle, amish_boy).

movie(the_perfect_score, 2004).
director(the_perfect_score, brian_robbins).
actress(the_perfect_score, erika_christensen, anna_ross).
actor(the_perfect_score, chris_evans, kyle).
actor(the_perfect_score, bryan_greenberg, matty_matthews).
actress(the_perfect_score, scarlett_johansson, francesca_curtis).
actor(the_perfect_score, darius_miles, desmond_rhodes).
actor(the_perfect_score, leonardo_nam, roy).
actress(the_perfect_score, tyra_ferrell, desmond_s_mother).
actor(the_perfect_score, matthew_lillard, larry).
actress(the_perfect_score, vanessa_angel, anita_donlee).
actor(the_perfect_score, bill_mackenzie, lobby_guard).
actor(the_perfect_score, dan_zukovic, mr_g).
actress(the_perfect_score, iris_quinn, kyle_s_mother).
actress(the_perfect_score, lorena_gale, proctor).
actress(the_perfect_score, patricia_idlette, receptionist).
actress(the_perfect_score, lynda_boyd, anna_s_mother).
actor(the_perfect_score, michael_ryan, anna_s_father).
actor(the_perfect_score, robert_clarke, arnie_branch).
actor(the_perfect_score, serge_houde, kurt_dooling).
actor(the_perfect_score, kyle_labine, dave).
actor(the_perfect_score, dee_jay_jackson, ets_lobby_guard).
actor(the_perfect_score, alf_humphreys, tom_helton).
actor(the_perfect_score, fulvio_cecere, francesca_s_father).
actor(the_perfect_score, mike_jarvis, illinois_coach).
actor(the_perfect_score, steve_makaj, kyle_s_father).
actor(the_perfect_score, kurt_max_runte, swat_captain).
actor(the_perfect_score, jay_brazeau, test_instructor).
actress(the_perfect_score, rebecca_reichert, tiffany).
actress(the_perfect_score, jessica_may, ets_woman).
actress(the_perfect_score, miriam_smith, ets_reception).
actor(the_perfect_score, alex_green, security_guard).
actor(the_perfect_score, samuel_scantlebury, keyon).
actress(the_perfect_score, sonja_bennett, pregnant_girl).
actress(the_perfect_score, sarah_afful, girl).
actor(the_perfect_score, alex_corr, preppy_boy).
actor(the_perfect_score, nikolas_malenovic, boy).
actor(the_perfect_score, john_shaw, ets_man).
actor(the_perfect_score, jamie_yochlowitz, man_in_jail).
actor(the_perfect_score, rob_boyce, guard).
actor(the_perfect_score, paul_campbell, guy_in_truck).

movie(the_spongebob_squarepants_movie, 2004).
director(the_spongebob_squarepants_movie, stephen_hillenburg).
actor(the_spongebob_squarepants_movie, tom_kenny, spongebob_narrator_gary_clay_tough_fish_2_twin_2_houston_voice).
actor(the_spongebob_squarepants_movie, clancy_brown, mr_krabs).
actor(the_spongebob_squarepants_movie, rodger_bumpass, squidward_fish_4).
actor(the_spongebob_squarepants_movie, bill_fagerbakke, patrick_star_fish_2_chum_customer_local_fish).
actor(the_spongebob_squarepants_movie, mr_lawrence, plankton_fish_7_attendant_2_lloyd).
actress(the_spongebob_squarepants_movie, jill_talley, karen_the_computer_wife_old_lady).
actress(the_spongebob_squarepants_movie, carolyn_lawrence, sandy).
actress(the_spongebob_squarepants_movie, mary_jo_catlett, mrs_puff).
actor(the_spongebob_squarepants_movie, jeffrey_tambor, king_neptune).
actress(the_spongebob_squarepants_movie, scarlett_johansson, mindy).
actor(the_spongebob_squarepants_movie, alec_baldwin, dennis).
actor(the_spongebob_squarepants_movie, david_hasselhoff, himself).
actor(the_spongebob_squarepants_movie, kristopher_logan, squinty_the_pirate).
actor(the_spongebob_squarepants_movie, d_p_fitzgerald, bonesy_the_pirate).
actor(the_spongebob_squarepants_movie, cole_s_mckay, scruffy_the_pirate).
actor(the_spongebob_squarepants_movie, dylan_haggerty, stitches_the_pirate).
actor(the_spongebob_squarepants_movie, bart_mccarthy, captain_bart_the_pirate).
actor(the_spongebob_squarepants_movie, henry_kingi, inky_the_pirate).
actor(the_spongebob_squarepants_movie, randolph_jones, tiny_the_pirate).
actor(the_spongebob_squarepants_movie, paul_zies, upper_deck_the_pirate).
actor(the_spongebob_squarepants_movie, gerard_griesbaum, fingers_the_pirate).
actor(the_spongebob_squarepants_movie, aaron_hendry, tangles_the_pirate_cyclops_diver).
actor(the_spongebob_squarepants_movie, maxie_j_santillan_jr, gummy_the_pirate).
actor(the_spongebob_squarepants_movie, peter_deyoung, leatherbeard_the_pirate).
actor(the_spongebob_squarepants_movie, gino_montesinos, tango_the_pirate).
actor(the_spongebob_squarepants_movie, john_siciliano, pokey_the_pirate).
actor(the_spongebob_squarepants_movie, david_stifel, cookie_the_pirate).
actor(the_spongebob_squarepants_movie, alex_baker, martin_the_pirate).
actor(the_spongebob_squarepants_movie, robin_russell, sniffy_the_pirate).
actor(the_spongebob_squarepants_movie, tommy_schooler, salty_the_pirate).
actor(the_spongebob_squarepants_movie, ben_wilson, stovepipe_the_pirate).
actor(the_spongebob_squarepants_movie, jose_zelaya, dooby_the_pirate).
actress(the_spongebob_squarepants_movie, mageina_tovah, usher).
actor(the_spongebob_squarepants_movie, chris_cummins, concession_guy).
actor(the_spongebob_squarepants_movie, todd_duffey, concession_guy).
actor(the_spongebob_squarepants_movie, dee_bradley_baker, man_cop_phil_perch_perkins_waiter_attendant_1_thug_1_coughing_fish_twin_1_frog_fish_monster_freed_fish_sandals).
actress(the_spongebob_squarepants_movie, sirena_irwin, reporter_driver_ice_cream_lady).
actress(the_spongebob_squarepants_movie, lori_alan, pearl).
actor(the_spongebob_squarepants_movie, thomas_f_wilson, fish_3_tough_fish_1_victor).
actor(the_spongebob_squarepants_movie, carlos_alazraqui, squire_goofy_goober_announcer_thief).
actor(the_spongebob_squarepants_movie, joshua_seth, prisoner).
actor(the_spongebob_squarepants_movie, tim_blaney, singing_goofy_goober).
actor(the_spongebob_squarepants_movie, derek_drymon, the_screamer_fisherman).
actor(the_spongebob_squarepants_movie, aaron_springer, laughing_bubble).
actor(the_spongebob_squarepants_movie, neil_ross, cyclops).
actor(the_spongebob_squarepants_movie, stephen_hillenburg, parrot).
actor(the_spongebob_squarepants_movie, michael_patrick_bell, fisherman).
actor(the_spongebob_squarepants_movie, jim_wise, goofy_goober_rock_singer).

movie(untitled_woody_allen_fall_project_2006, 2006).
director(untitled_woody_allen_fall_project_2006, woody_allen).
actor(untitled_woody_allen_fall_project_2006, woody_allen, '').
actor(untitled_woody_allen_fall_project_2006, jody_halse, bouncer).
actor(untitled_woody_allen_fall_project_2006, hugh_jackman, '').
actress(untitled_woody_allen_fall_project_2006, scarlett_johansson, '').
actor(untitled_woody_allen_fall_project_2006, robyn_kerr, '').
actor(untitled_woody_allen_fall_project_2006, kevin_mcnally, mike_tinsley).
actor(untitled_woody_allen_fall_project_2006, ian_mcshane, '').
actor(untitled_woody_allen_fall_project_2006, james_nesbitt, '').
actor(untitled_woody_allen_fall_project_2006, colin_salmon, '').

movie(a_view_from_the_bridge, 2006).
actress(a_view_from_the_bridge, scarlett_johansson, catherine).
actor(a_view_from_the_bridge, anthony_lapaglia, eddie_carbone).
:- use_rendering(chess).


queens(N, Queens) :-
    length(Queens, N),
	board(Queens, Board, 0, N, _, _),
	queens(Board, 0, Queens).

board([], [], N, N, _, _).
board([_|Queens], [Col-Vars|Board], Col0, N, [_|VR], VC) :-
	Col is Col0+1,
	functor(Vars, f, N),
	constraints(N, Vars, VR, VC),
	board(Queens, Board, Col, N, VR, [_|VC]).

constraints(0, _, _, _) :- !.
constraints(N, Row, [R|Rs], [C|Cs]) :-
	arg(N, Row, R-C),
	M is N-1,
	constraints(M, Row, Rs, Cs).

queens([], _, []).
queens([C|Cs], Row0, [Col|Solution]) :-
	Row is Row0+1,
	select(Col-Vars, [C|Cs], Board),
	arg(Row, Vars, Row-Row),
	queens(Board, Row, Solution).





:- module(swish_ide,
	  [ swish/0
	  ]).
:- use_module(library(http/thread_httpd)).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/http_path)).
:- use_module(library(www_browser)).
:- if(exists_source(library(uid))).
:- use_module(library(uid)).
:- endif.



		 

:- multifile
	swish_config:config/2,				swish_config:source_alias/2,			swish_config:verify_write_access/3,		pengines:authentication_hook/3,			pengines:not_sandboxed/2,			user:file_search_path/2.		
user:file_search_path(project, '.').

swish_config:config(show_beware,        false).
swish_config:config(community_examples, true).

swish_config:source_alias(project, [access(both), search('*.pl')]).
swish_config:source_alias(library, []).

swish_config:verify_write_access(_Request, _File, _Options).

pengines:authentication_hook(_Request, swish, User) :-
	current_user(User).
pengines:not_sandboxed(_User, _Application).

:- if(current_predicate(getuid/1)).
current_user(User) :- !,
	getuid(UID),
	user_info(UID, Info),
	user_data(name, Info, User).
:- endif.
current_user(default).


:- use_module(swish).


swish :-
	swish(localhost:_Port).

swish(Port) :-
	http_server_property(Port, goal(swish_ide:http_dispatch)), !,
	open_browser(Port).
swish(Port) :-
	http_server(http_dispatch,
		    [ port(Port),
		      workers(16)
		    ]),
	open_browser(Port).

open_browser(Address) :-
	host_port(Address, Host, Port),
	http_server_property(Address, scheme(Scheme)),
	http_absolute_location(root(.), Path, []),
	format(atom(URL), '~w://~w:~w~w', [Scheme, Host, Port, Path]),
	www_open_url(URL).

host_port(Host:Port, Host, Port) :- !.
host_port(Port, localhost, Port).




:- module(swish_authenticate,
	  [ swish_add_user/3			  ]).
:- use_module(library(pengines), []).
:- use_module(library(lists)).
:- use_module(library(debug)).
:- use_module(library(crypt)).
:- use_module(library(http/http_authenticate)).

:- use_module(config).
:- use_module(page).

:- multifile
	swish_config:config/2,
	swish_config:authenticate/2,
	swish_config:verify_write_access/3.



:- dynamic
	password_file_cache/1.

password_file(File) :-
	password_file_cache(File), !.
password_file(File) :-
	absolute_file_name(swish(passwd), File, [access(read)]),
	asserta(password_file_cache(File)).

logged_in(Request, User) :-
	password_file(File),
	http_authenticate(basic(File), Request, [User|_Fields]), !,
	debug(authenticate, 'Logged in as ~p', [User]).
logged_in(_Request, _User) :-
	throw(http_reply(authorise(basic('SWISH user')))).


pengines:authentication_hook(Request, _Application, User) :-
	logged_in(Request, User), !.

pengines:not_sandboxed(_User, _Application).



swish_config:verify_write_access(Request, _File, _Options) :-
	logged_in(Request, _User), !.


swish_config:authenticate(Request, User) :-
	\+ swish_config(public_access, true),
	logged_in(Request, User).



swish_add_user(User, Passwd, Fields) :-
	phrase("$1$", E, _),			crypt(Passwd, E),
	string_codes(Hash, E),

	Entry = passwd(User, Hash, Fields),

	absolute_file_name(swish(passwd), File,
			   [access(write)]),
	(   exists_file(File)
	->  http_read_passwd_file(File, Data)
	;   Data = []
	),
	(   selectchk(passwd(User, _, _), Data, Entry, NewData)
	->  true
	;   append(Data, [Entry], NewData)
	),
	http_write_passwd_file(File, NewData).



:- module(swish_config,
	  [ swish_reply_config/1,		    swish_config/2,			    swish_config_hash/1			  ]).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/http_json)).
:- use_module(library(option)).

:- multifile
	config/2,				source_alias/2,				authenticate/2.			


		 


swish_reply_config(Request) :-
	option(path(Path), Request),
	file_base_name(Path, 'swish_config.json'),
	json_config(JSON),
	reply_json(JSON).


swish_config_hash(Hash) :-
	json_config(Config),
	variant_sha1(Config, Hash).

json_config(json{ http: json{ locations:JSON
			    },
		  swish: SWISHConfig
		}) :-
	http_locations(JSON),
	swish_config(SWISHConfig).

http_locations(JSON) :-
	findall(ID-Path,
		( http_current_handler(Path, _:_, Options),
		  memberchk(id(ID), Options)
		), Pairs),
	keysort(Pairs, Sorted),
	remove_duplicate_ids(Sorted, Cleaned),
	dict_pairs(JSON, json, Cleaned).

remove_duplicate_ids([], []).
remove_duplicate_ids([Id-Path1,Id-Path2|T], [Id-Path1|Cleaned]) :- !,
	same_ids(T, Id, T1, Paths0),
	sort([Path1,Path2|Paths0], Unique),
	(   Unique = [_]
	->  true
	;   print_message(warning, http(duplicate_handlers(Id, Unique)))
	),
	remove_duplicate_ids(T1, Cleaned).
remove_duplicate_ids([H|T0], [H|T]) :-
	remove_duplicate_ids(T0, T).

same_ids([], _, [], []).
same_ids([Id-Path|T0], Id, T, [Path|TP]) :- !,
	same_ids(T0, Id, T, TP).
same_ids(T, _, T, []).



swish_config(Config) :-
	findall(Key-Value, config(Key, Value), Pairs),
	dict_pairs(Config, json, Pairs).


swish_config(Key, Value) :-
	config(Key, Value).


		 

:- multifile
	prolog:message//1.

prolog:message(http(duplicate_handlers(Id, Paths))) -->
	[ 'Duplicate HTTP handler IDs: "~w"'-[Id] ],
	paths(Paths).

paths([]) --> [].
paths([H|T]) --> [ '\t~q'-[H], nl ], paths(T).


:- module(swish_csv, []).
:- use_module(library(pengines), []).
:- use_module(library(pairs)).
:- use_module(library(csv)).
:- use_module(library(apply)).
:- use_module(library(pprint)).



:- multifile
	pengines:write_result/3,
	write_answers/2.


pengines:write_result(csv, Event, VarNames) :-
	csv(Event, VarNames).

csv(create(_Id, Features), VarNames) :- !,
	memberchk(answer(Answer), Features),
	csv(Answer, VarNames).
csv(destroy(_Id, Wrapped), VarNames) :- !,
	csv(Wrapped, VarNames).
csv(success(_Id, Answers, _Time, _More), VarNames) :- !,
	VarTerm =.. [row|VarNames],
	success(Answers, VarTerm).
csv(error(_Id, Error), _VarNames) :- !,
	message_to_string(Error, Msg),
	format('Status: 400 Bad request~n'),
	format('Content-type: text/plain~n~n'),
	format('ERROR: ~w~n', [Msg]).
csv(output(_Id, message(_Term, _Class, HTML, _Where)), _VarNames) :- !,
	format('Status: 400 Bad request~n'),
	format('Content-type: text/html~n~n'),
	format('<html>~n~s~n</html>~n', [HTML]).
csv(Event, _VarNames) :-
	print_term(Event, [output(user_error)]).

success(Answers, VarTerm) :-
	write_answers(Answers, VarTerm), !.
success(Answers, VarTerm) :-
	maplist(csv_answer, Answers, Rows),
	format('Content-disposition: attachment; filename="swish-result.csv"~n'),
	format('Content-type: text/csv~n~n'),
	csv_write_stream(current_output, [VarTerm|Rows], []).

csv_answer(JSON, Row) :-
	is_dict(JSON), !,
	dict_pairs(JSON, _, Pairs),
	pairs_values(Pairs, Values),
	maplist(csv_value, Values, CVSValues),
	Row =.. [row|CVSValues].
csv_answer(RowIn, Row) :-
	compound(RowIn), !,
	RowIn =.. [_|Values],
	maplist(csv_value, Values, CVSValues),
	Row =.. [row|CVSValues].

csv_value(Var, '') :-
	var(Var), !.
csv_value(Number, Number) :-
	number(Number), !.
csv_value(Atom, Atom) :-
	atom(Atom), !.
csv_value(String, String) :-
	string(String), !.
csv_value(Term, Value) :-
	term_string(Term, Value).




:- module(swish_examples, []).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/http_json)).
:- use_module(library(http/json)).
:- use_module(library(http/http_path)).
:- use_module(library(filesex)).
:- use_module(library(apply)).
:- use_module(library(lists)).
:- use_module(library(settings)).

:- use_module(gitty).



:- multifile
	user:file_search_path/2,
	swish_config:config/2,
	swish_config:source_alias/2.

user:file_search_path(example, swish(examples)).
swish_config:source_alias(example, [access(read), search('*.{pl,swinb}')]).

:- http_handler(swish(list_examples),
		list_examples, [id(swish_examples)]).



list_examples(_Request) :-
	example_files(FileExamples),
	storage_examples(StorageExamples),
	append(FileExamples, StorageExamples, AllExamples),
	reply_json(AllExamples).


example_files(AllExamples) :-
	http_absolute_location(swish(example), HREF, []),
	findall(Index,
		absolute_file_name(example(.), Index,
				   [ access(read),
				     file_type(directory),
				     file_errors(fail),
				     solutions(all)
				   ]),
		ExDirs),
	maplist(index_json(HREF), ExDirs, JSON),
	append(JSON, AllExamples).

index_json(HREF, Dir, JSON) :-
	directory_file_path(Dir, 'index.json', File),
	access_file(File, read), !,
	read_file_to_json(File, JSON0),
	maplist(add_href(HREF), JSON0, JSON).
index_json(HREF, Dir, JSON) :-
	string_concat(Dir, "


storage_examples(List) :-
	swish_config:config(community_examples, true),
	findall(Ex, gitty_example(Ex), List1),
	List1 \== [], !,
	List = [json{type:"divider"}|List1].
storage_examples([]).

gitty_example(json{title:Title, file:File, type:"store"}) :-
	setting(web_storage:directory, Store),
	gitty_file(Store, File, _),
	gitty_commit(Store, File, Meta),
	Meta.get(example) == true,
	(   Title = Meta.get(title), Title \== ""
	->  true
	;   Title = File
	).


:- module(swish_form, []).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/http_server_files)).



:- http_handler(swish(form), serve_files_in_directory(swish_form),
		[id(form),prefix]).

user:file_search_path(swish_form, swish(web/form)).



:- module(gitty,
	  [ gitty_open/2,			    gitty_close/1,		
	    gitty_file/3,			    gitty_create/5,			    gitty_update/5,			    gitty_commit/3,			    gitty_data/4,			    gitty_history/4,			    gitty_hash/2,		
	    gitty_reserved_meta/1,	
	    gitty_diff/4,		
	    data_diff/3,			    udiff_string/2			  ]).
:- use_module(library(sha)).
:- use_module(library(lists)).
:- use_module(library(apply)).
:- use_module(library(option)).
:- use_module(library(process)).
:- use_module(library(debug)).
:- use_module(library(error)).
:- use_module(library(filesex)).

:- if(exists_source(library(bdb))).
:- use_module(gitty_driver_bdb, []).
:- endif.
:- use_module(gitty_driver_files, []).




:- dynamic
	gitty_store_type/2.		

gitty_open(Store, Options) :-
	(   exists_directory(Store)
	->  true
	;   existence_error(directory, Store)
	),
	(   option(driver(Driver), Options)
	->  true
	;   default_driver(Store, Driver)
	),
	set_driver(Store, Driver).

default_driver(Store, Driver) :-
	directory_file_path(Store, ref, RefDir),
	exists_directory(RefDir), !,
	Driver = files.
default_driver(Store, Driver) :-
	directory_file_path(Store, heads, RefDir),
	exists_file(RefDir), !,
	Driver = bdb.
default_driver(_, files).

set_driver(Store, Driver) :-
	must_be(atom, Store),
	(   driver_module(Driver, Module)
	->  retractall(gitty_store_type(Store, _)),
	    asserta(gitty_store_type(Store, Module))
	;   domain_error(gitty_driver, Driver)
	).

driver_module(files, gitty_driver_files).
driver_module(bdb,   gitty_driver_bdb).

store_driver_module(Store, Module) :-
	atom(Store), !,
	gitty_store_type(Store, Module).


gitty_close(Store) :-
	store_driver_module(Store, M),
	M:gitty_close(Store).


gitty_file(Store, Head, Hash) :-
	store_driver_module(Store, M),
	M:gitty_file(Store, Head, Hash).


gitty_create(Store, Name, _Data, _Meta, _) :-
	gitty_file(Store, Name, _Hash), !,
	throw(error(gitty(file_exists(Name)),_)).
gitty_create(Store, Name, Data, Meta, CommitRet) :-
	save_object(Store, Data, blob, Hash),
	get_time(Now),
	Commit = gitty{time:Now}.put(Meta)
		                .put(_{ name:Name,
					data:Hash
				      }),
	format(string(CommitString), '~q.~n', [Commit]),
	save_object(Store, CommitString, commit, CommitHash),
	CommitRet = Commit.put(commit, CommitHash),
	catch(gitty_update_head(Store, Name, -, CommitHash),
	      E,
	      ( delete_object(Store, CommitHash),
		throw(E))).


gitty_update(Store, Name, Data, Meta, CommitRet) :-
	gitty_file(Store, Name, OldHead),
	(   _{previous:OldHead} >:< Meta
	->  true
	;   throw(error(gitty(commit_version(Name, OldHead, Meta.previous)), _))
	),
	load_plain_commit(Store, OldHead, OldMeta),
	get_time(Now),
	save_object(Store, Data, blob, Hash),
	Commit = gitty{}.put(OldMeta)
			.put(_{time:Now})
		        .put(Meta)
		        .put(_{ name:Name,
				data:Hash,
				previous:OldHead
			      }),
	format(string(CommitString), '~q.~n', [Commit]),
	save_object(Store, CommitString, commit, CommitHash),
	CommitRet = Commit.put(commit, CommitHash),
	catch(gitty_update_head(Store, Name, OldHead, CommitHash),
	      E,
	      ( delete_object(Store, CommitHash),
		throw(E))).


gitty_update_head(Store, Name, OldCommit, NewCommit) :-
	store_driver_module(Store, Module),
	Module:gitty_update_head(Store, Name, OldCommit, NewCommit).


gitty_data(Store, Name, Data, Meta) :-
	gitty_commit(Store, Name, Meta),
	load_object(Store, Meta.data, Data).


gitty_commit(Store, Name, Meta) :-
	must_be(atom, Name),
	gitty_file(Store, Name, Head), !,
	load_commit(Store, Head, Meta).
gitty_commit(Store, Hash, Meta) :-
	load_commit(Store, Hash, Meta).

load_commit(Store, Hash, Meta) :-
	load_plain_commit(Store, Hash, Meta0),
	Meta1 = Meta0.put(commit, Hash),
	(   gitty_file(Store, Meta0.name, Hash)
	->  Meta = Meta1.put(symbolic, "HEAD")
	;   Meta = Meta1
	).

load_plain_commit(Store, Hash, Meta) :-
	store_driver_module(Store, Module),
	Module:load_plain_commit(Store, Hash, Meta).


gitty_history(Store, Name, History, Options) :-
	history_hash_start(Store, Name, Hash0),
	option(depth(Depth), Options, 5),
	(   option(includes(Hash), Options)
	->  read_history_to_hash(Store, Hash0, Hash, History0),
	    length(History0, Before),
	    After is max(Depth-Before, (Depth+1)//2),
	    read_history_depth(Store, Hash, After, History1),
	    append(History0, History1, History2),
	    list_prefix(Depth, History2, History)
	;   read_history_depth(Store, Hash0, Depth, History)
	).

history_hash_start(Store, Name, Hash) :-
	gitty_file(Store, Name, Head), !,
	Hash = Head.
history_hash_start(_, Hash, Hash).


read_history_depth(_, _, 0, []) :- !.
read_history_depth(Store, Hash, Left, [H|T]) :-
	load_commit(Store, Hash, H), !,
	Left1 is Left-1,
	(   read_history_depth(Store, H.get(previous), Left1, T)
	->  true
	;   T = []
	).
read_history_depth(_, _, _, []).


read_history_to_hash(Store, Hash, Upto, [H|T]) :-
	Upto \== Hash,
	load_commit(Store, Hash, H),
	(   read_history_to_hash(Store, H.get(previous), Upto, T)
	->  true
	;   T = []
	).
read_history_to_hash(_, _, _, []).

list_prefix(0, _, []) :- !.
list_prefix(_, [], []) :- !.
list_prefix(N, [H|T0], [H|T]) :-
	N2 is N - 1,
	list_prefix(N2, T0, T).



save_object(Store, Data, Type, Hash) :-
	size_in_bytes(Data, Size),
	format(string(Hdr), '~w ~d\u0000', [Type, Size]),
	sha_new_ctx(Ctx0, []),
	sha_hash_ctx(Ctx0, Hdr, Ctx1, _),
	sha_hash_ctx(Ctx1, Data, _, HashBin),
	hash_atom(HashBin, Hash),
	store_object(Store, Hash, Hdr, Data).

store_object(Store, Hash, Hdr, Data) :-
	store_driver_module(Store, Module),
	Module:store_object(Store, Hash, Hdr, Data).

size_in_bytes(Data, Size) :-
	setup_call_cleanup(
	    open_null_stream(Out),
	    ( format(Out, '~s', [Data]),
	      byte_count(Out, Size)
	    ),
	    close(Out)).



:- public fsck_object/2.
fsck_object(Store, Hash) :-
	load_object(Store, Hash, Data, Type, Size),
	format(string(Hdr), '~w ~d\u0000', [Type, Size]),
	sha_new_ctx(Ctx0, []),
	sha_hash_ctx(Ctx0, Hdr, Ctx1, _),
	sha_hash_ctx(Ctx1, Data, _, HashBin),
	hash_atom(HashBin, Hash).



load_object(Store, Hash, Data) :-
	load_object(Store, Hash, Data, _, _).
load_object(Store, Hash, Data, Type, Size) :-
	store_driver_module(Store, Module),
	Module:load_object(Store, Hash, Data, Type, Size).


gitty_hash(Store, Hash) :-
	store_driver_module(Store, Module),
	Module:gitty_hash(Store, Hash).


delete_object(Store, Hash) :-
	store_driver_module(Store, Module),
	Module:delete_object(Store, Hash).


gitty_reserved_meta(name).
gitty_reserved_meta(time).
gitty_reserved_meta(data).
gitty_reserved_meta(previous).

		 

:- public
	delete_object/2,
	delete_head/2,
	set_head/3.


delete_head(Store, Head) :-
	store_driver_module(Store, Module),
	Module:delete_head(Store, Head).


set_head(Store, File, Head) :-
	store_driver_module(Store, Module),
	Module:set_head(Store, File, Head).


		 


gitty_diff(Store, C1, C2, Dict) :-
	gitty_data(Store, C2, Data2, Meta2),
	(   var(C1)
	->  C1 = Meta2.get(previous)
	;   true
	), !,
	gitty_data(Store, C1, Data1, Meta1),
	Pairs = [ from-Meta1, to-Meta2|_],
	(   Data1 \== Data2
	->  udiff_string(Data1, Data2, UDIFF),
	    memberchk(data-UDIFF, Pairs)
	;   true
	),
	meta_tag_set(Meta1, Tags1),
	meta_tag_set(Meta2, Tags2),
	(   Tags1 \== Tags2
	->  ord_subtract(Tags1, Tags2, Deleted),
	    ord_subtract(Tags2, Tags1, Added),
	    memberchk(tags-_{added:Added, deleted:Deleted}, Pairs)
	;   true
	),
	once(length(Pairs,_)),				dict_pairs(Dict, json, Pairs).
gitty_diff(_Store, '0000000000000000000000000000000000000000', _C2,
	   json{initial:true}).


meta_tag_set(Meta, Tags) :-
	sort(Meta.get(tags), Tags), !.
meta_tag_set(_, []).


:- if(true).

udiff_string(Data1, Data2, UDIFF) :-
	setup_call_cleanup(
	    save_string(Data1, File1),
	    setup_call_cleanup(
		save_string(Data2, File2),
		process_diff(File1, File2, UDIFF),
		delete_file(File2)),
	    delete_file(File1)).

save_string(String, File) :-
	tmp_file_stream(utf8, File, TmpOut),
	format(TmpOut, '~s', [String]),
	close(TmpOut).

process_diff(File1, File2, String) :-
	setup_call_cleanup(
	    process_create(path(diff),
			   ['-u', file(File1), file(File2)],
			   [ stdout(pipe(Out)),
			     process(PID)
			   ]),
	    read_string(Out, _, String),
	    ( close(Out),
	      process_wait(PID, Status)
	    )),
	assertion(normal_diff_exit(Status)).

normal_diff_exit(exit(0)).		normal_diff_exit(exit(1)).		
:- else.

udiff_string(Data1, Data2, UDIFF) :-
	data_diff(Data1, Data2, Diffs),
	maplist(udiff_string, Diffs, Strings),
	atomics_to_string(Strings, UDIFF).

:- endif.


		 





data_diff(Data, Data, UDiff) :- !,
	UDiff = [].
data_diff(Data1, Data2, Diff) :-
	split_string(Data1, "\n", "", List1),
	split_string(Data2, "\n", "", List2),
	list_diff(List1, List2, Diff).

list_diff(List1, List2, UDiff) :-
	list_lcs(List1, List2, Lcs),
	make_diff(List1, List2, Lcs, c(), 1, 1, Diff),
	join_diff(Diff, UDiff).


make_diff([], [], [], _, _, _, []) :- !.
make_diff([H|T1], [H|T2], [H|C], c(_,C0,C1), L1, L2, Diff) :- !,
	L11 is L1+1,
	L21 is L2+1,
	make_diff(T1, T2, C, c(C0,C1,H), L11, L21, Diff).
make_diff([H|T1], [H|T2], [H|C], C0, L1, L2, Diff) :- !,
	L11 is L1+1,
	L21 is L2+1,
	add_context(C0, H, C1),
	(   compound_name_arity(C1, _, L1)
	->  Diff = Diff1
	;   Diff = [=(H)|Diff1]
	),
	make_diff(T1, T2, C, C1, L11, L21, Diff1).
make_diff([H|T1], [H2|T2], [H|C], C0, L1, L2, [d(L1,L2,C0,+H2)|Diff]) :- !,
	L21 is L2+1,
	make_diff([H|T1], T2, [H|C], c(), L1, L21, Diff).
make_diff([], [H2|T2], [], C0, L1, L2, [d(L1,L2,C0,+H2)|Diff]) :- !,
	L21 is L2+1,
	make_diff([], T2, [], c(), L1, L21, Diff).
make_diff([H1|T1], [H|T2], [H|C], C0, L1, L2, [d(L1,L2,C0,-H1)|Diff]) :- !,
	L11 is L1+1,
	make_diff(T1, [H|T2], [H|C], c(), L11, L2, Diff).
make_diff([H1|T1], [], [], C0, L1, L2, [d(L1,L2,C0,-H1)|Diff]) :- !,
	L11 is L1+1,
	make_diff(T1, [], [], c(), L11, L2, Diff).
make_diff([H1|T1], [H2|T2], C, C0, L1, L2, [d(L1,L2,C0,H1-H2)|Diff]) :- !,
	L11 is L1+1,
	L21 is L2+1,
	make_diff(T1, T2, C, c(), L11, L21, Diff).

add_context(c(_,B,C),N,c(B,C,N)).
add_context(c(A,B),  N,c(A,B,N)).
add_context(c(A),    N,c(A,N)).
add_context(c(),     N,c(N)).


join_diff([], []).
join_diff([d(L10,L20,C,L)|T0], [udiff(L1,S1,L2,S2,Diff)|T]) :-
	pre_context(C, S0, Diff, [L|DiffT]),
	L1 is L10-S0,
	L2 is L20-S0,
	diff_affected(L,S10,S20),
	S11 is S10+S0,
	S21 is S20+S0,
	collect_diff(T0,S11,S21,S1,S2,0,DiffT,T1),
	join_diff(T1, T).

pre_context(c(),      0, L, L).
pre_context(c(A),     1, [=(A)|L], L).
pre_context(c(A,B),   2, [=(A),=(B)|L], L).
pre_context(c(A,B,C), 3, [=(A),=(B),=(C)|L], L).

collect_diff([d(_,_,_,L)|T0], S10,S20,S1,S2,C,[L|Diff],T) :-
	C < 3, !,
	diff_affected(L,S1x,S2x),
	S11 is S10+S1x,
	S21 is S20+S2x,
	collect_diff(T0,S11,S21,S1,S2,0,Diff,T).
collect_diff([=(L)|T0], S10,S20,S1,S2,C0,[=(L)|Diff],T) :- !,
	S11 is S10+1,
	S21 is S20+1,
	C1 is C0+1,
	collect_diff(T0,S11,S21,S1,S2,C1,Diff,T).
collect_diff(T,S1,S2,S1,S2,_,[],T).

diff_affected(+(_),   0, 1).
diff_affected(-(_),   0, 1).
diff_affected(-(_,_), 1, 1).


udiff_string(udiff(L1,S1,L2,S2,Diff), Final) :-
	format(string(Hdr), '@@ -~d,~d +~d,~d @@', [L1,S1,L2,S2]),
	udiff_blocks(Diff, Blocks),
	maplist(block_lines, Blocks, LineSets),
	append(LineSets, Lines),
	atomics_to_string([Hdr|Lines], "\n", Final).

block_lines(=(U), Lines) :- maplist(string_concat(' '), U, Lines).
block_lines(+(U), Lines) :- maplist(string_concat('+'), U, Lines).
block_lines(-(U), Lines) :- maplist(string_concat('-'), U, Lines).

udiff_blocks([], []) :- !.
udiff_blocks([=(H)|T0], [=([H|E])|T]) :- !,
	udiff_cp(T0, E, T1),
	udiff_blocks(T1, T).
udiff_blocks(U, List) :-
	udiff_block(U, D, A, T1),
	udiff_add(D,A,List,ListT),
	udiff_blocks(T1, ListT).

udiff_add([],A,[+A|T],T) :- !.
udiff_add(D,[],[-D|T],T) :- !.
udiff_add(D,A,[-D,+A|T],T).

udiff_cp([=(H)|T0], [H|E], T) :- !,
	udiff_cp(T0, E, T).
udiff_cp(L, [], L).

udiff_block([-L|T], [L|D], A, Rest) :- !,
	udiff_block(T, D, A, Rest).
udiff_block([+L|T], D, [L|A], Rest) :- !,
	udiff_block(T, D, A, Rest).
udiff_block([L1-L2|T], [L1|D], [L2|A], Rest) :- !,
	udiff_block(T, D, A, Rest).
udiff_block(T, [], [], T).


:- thread_local lcs_db/2.

list_lcs([], [], []) :- !.
list_lcs([H|L1], [H|L2], [H|Lcs]) :- !,
	list_lcs(L1, L2, Lcs).
list_lcs(List1, List2, Lcs) :-
	reverse(List1, Rev1),
	reverse(List2, Rev2),
	copy_prefix(Rev1, Rev2, RevDiff1, RevDiff2, RevLcs, RevT),
	list_lcs2(RevDiff1, RevDiff2, RevT),
	reverse(RevLcs, Lcs).

list_lcs2(List1, List2, Lcs) :-
	variant_sha1(List1+List2, Hash),
	call_cleanup(
	    lcs(List1, List2, Hash, Lcs),
	    retractall(lcs_db(_,_))).

copy_prefix([H|T1], [H|T2], L1, L2, [H|L], LT) :- !,
	copy_prefix(T1, T2, L1, L2, L, LT).
copy_prefix(R1, R2, R1, R2, L, L).


lcs(_,_,Hash,Lcs) :-
	lcs_db(Hash,Lcs), !.
lcs([H|L1], [H|L2], _, [H|Lcs]) :- !,
	variant_sha1(L1+L2,Hash),
	lcs(L1, L2, Hash, Lcs).
lcs(List1, List2, Hash, Lcs) :-
	List1 = [H1|L1],
	List2 = [H2|L2],
	variant_sha1(L1+[H2|L2],Hash1),
	variant_sha1([H1|L1]+L2,Hash2),
	lcs(    L1 , [H2|L2], Hash1, Lcs1),
	lcs([H1|L1],     L2 , Hash2, Lcs2),
	longest(Lcs1, Lcs2, Lcs),!,
	asserta(lcs_db(Hash, Lcs)).
lcs(_,_,_,[]).

longest(L1, L2, Longest) :-
	length(L1, Length1),
	length(L2, Length2),
	(   Length1 > Length2
	->  Longest = L1
	;   Longest = L2
	).

		 
:- multifile
	prolog:error_message//1.

prolog:error_message(gitty(not_at_head(Name, _OldCommit))) -->
	[ 'Gitty: cannot update head for "~w" because it was \c
	   updated by someone else'-[Name] ].
prolog:error_message(gitty(file_exists(Name))) -->
	[ 'Gitty: File exists: ~p'-[Name] ].
prolog:error_message(gitty(commit_version(Name, _Head, _Previous))) -->
	[ 'Gitty: ~p: cannot update (modified by someone else)'-[Name] ].




:- module(gitty_bdb,
	  [ gitty_file/3,			    gitty_create/5,			    gitty_update/5,			    gitty_commit/3,			    gitty_data/4,			    gitty_history/4,			    gitty_hash/2,			    gitty_reserved_meta/1,		    gitty_close/1,		
	    gitty_diff/4,		
	    data_diff/3,			    udiff_string/2			  ]).
:- use_module(library(zlib)).
:- use_module(library(sha)).
:- use_module(library(lists)).
:- use_module(library(apply)).
:- use_module(library(option)).
:- use_module(library(process)).
:- use_module(library(debug)).
:- use_module(library(dcg/basics)).
:- use_module(library(memfile)).
:- use_module(library(bdb)).






:- dynamic
	bdb_env/2,				bdb_db/3.			:- volatile
	bdb_env/2,
	bdb_db/3.


bdb_handle(Store, Database, Handle) :-
	bdb_db(Store, Database, Handle), !.
bdb_handle(Store, Database, Handle) :-
	with_mutex(gitty_bdb, bdb_handle_sync(Store, Database, Handle)).

bdb_handle_sync(Store, Database, Handle) :-
	bdb_db(Store, Database, Handle), !.
bdb_handle_sync(Store, Database, Handle) :-
	bdb_store(Store, Env),
	db_types(Database, KeyType, ValueType),
	bdb_open(Database, update, Handle,
		 [ environment(Env),
		   key(KeyType),
		   value(ValueType)
		 ]),
	asserta(bdb_db(Store, Database, Handle)).

db_types(heads,   atom, atom).		db_types(objects, atom, c_blob).	

bdb_store(Store, Env) :-
	bdb_env(Store, Env), !.
bdb_store(Store, Env) :-
	with_mutex(gitty_bdb, bdb_store_sync(Store, Env)).

bdb_store_sync(Store, Env) :-
	bdb_env(Store, Env), !.
bdb_store_sync(Store, Env) :-
	ensure_directory(Store),
	bdb_init(Env,
		 [ home(Store),
		   create(true),
		   thread(true),
		   init_txn(true)
		 ]),
	asserta(bdb_env(Store, Env)).

ensure_directory(Dir) :-
	exists_directory(Dir), !.
ensure_directory(Dir) :-
	make_directory(Dir).


gitty_close(Store) :-
	with_mutex(gitty_bdb, gitty_close_sync(Store)).

gitty_close_sync(Store) :-
	(   retract(bdb_env(Store, Env))
	->  bdb_close_environment(Env)
	;   true
	).



gitty_file(Store, Head, Hash) :-
	bdb_handle(Store, heads, H),
	(   nonvar(Head)
	->  bdb_get(H, Head, Hash)
	;   bdb_enum(H, Head, Hash)
	).


gitty_create(Store, Name, _Data, _Meta, _) :-
	gitty_file(Store, Name, _Hash), !,
	throw(error(gitty(file_exists(Name)),_)).
gitty_create(Store, Name, Data, Meta, CommitRet) :-
	save_object(Store, Data, blob, Hash),
	get_time(Now),
	Commit = gitty{time:Now}.put(Meta)
		                .put(_{ name:Name,
					data:Hash
				      }),
	format(string(CommitString), '~q.~n', [Commit]),
	save_object(Store, CommitString, commit, CommitHash),
	CommitRet = Commit.put(commit, CommitHash),
	catch(gitty_update_head(Store, Name, -, CommitHash),
	      E,
	      ( delete_object(Store, CommitHash),
		throw(E))).


gitty_update(Store, Name, Data, Meta, CommitRet) :-
	gitty_file(Store, Name, OldHead),
	(   _{previous:OldHead} >:< Meta
	->  true
	;   throw(error(gitty(commit_version(OldHead, Meta.previous)), _))
	),
	load_plain_commit(Store, OldHead, OldMeta),
	get_time(Now),
	save_object(Store, Data, blob, Hash),
	Commit = gitty{}.put(OldMeta)
			.put(_{time:Now})
		        .put(Meta)
		        .put(_{ name:Name,
				data:Hash,
				previous:OldHead
			      }),
	format(string(CommitString), '~q.~n', [Commit]),
	save_object(Store, CommitString, commit, CommitHash),
	CommitRet = Commit.put(commit, CommitHash),
	catch(gitty_update_head(Store, Name, OldHead, CommitHash),
	      E,
	      ( delete_object(Store, CommitHash),
		throw(E))).


gitty_update_head(Store, Name, OldCommit, NewCommit) :-
	bdb_store(Store, Env),
	bdb_transaction(
	    Env,
	    gitty_update_head_sync(Store, Name, OldCommit, NewCommit)).

gitty_update_head_sync(Store, Name, OldCommit, NewCommit) :-
	bdb_handle(Store, heads, BDB),
	(   OldCommit == (-)
	->  (   bdb_get(BDB, Name, _)
	    ->	throw(error(gitty(file_exists(Name),_)))
	    ;	bdb_put(BDB, Name, NewCommit)
	    )
	;   (   bdb_get(BDB, Name, OldCommit)
	    ->	bdb_put(BDB, Name, NewCommit)
	    ;	throw(error(gitty(not_at_head(Name, OldCommit)), _))
	    )
	).


gitty_data(Store, Name, Data, Meta) :-
	gitty_commit(Store, Name, Meta),
	load_object(Store, Meta.data, Data).


gitty_commit(Store, Name, Meta) :-
	must_be(atom, Name),
	gitty_file(Store, Name, Head), !,
	load_commit(Store, Head, Meta).
gitty_commit(Store, Hash, Meta) :-
	load_commit(Store, Hash, Meta).

load_commit(Store, Hash, Meta) :-
	load_plain_commit(Store, Hash, Meta0),
	Meta1 = Meta0.put(commit, Hash),
	(   gitty_file(Store, Meta0.name, Hash)
	->  Meta = Meta1.put(symbolic, "HEAD")
	;   Meta = Meta1
	).

load_plain_commit(Store, Hash, Meta) :-
	load_object(Store, Hash, String),
	term_string(Meta, String, []).


gitty_history(Store, Name, History, Options) :-
	history_hash_start(Store, Name, Hash0),
	option(depth(Depth), Options, 5),
	(   option(includes(Hash), Options)
	->  read_history_to_hash(Store, Hash0, Hash, History0),
	    length(History0, Before),
	    After is max(Depth-Before, (Depth+1)//2),
	    read_history_depth(Store, Hash, After, History1),
	    append(History0, History1, History2),
	    list_prefix(Depth, History2, History)
	;   read_history_depth(Store, Hash0, Depth, History)
	).

history_hash_start(Store, Name, Hash) :-
	gitty_file(Store, Name, Head), !,
	Hash = Head.
history_hash_start(_, Hash, Hash).


read_history_depth(_, _, 0, []) :- !.
read_history_depth(Store, Hash, Left, [H|T]) :-
	load_commit(Store, Hash, H), !,
	Left1 is Left-1,
	(   read_history_depth(Store, H.get(previous), Left1, T)
	->  true
	;   T = []
	).
read_history_depth(_, _, _, []).


read_history_to_hash(Store, Hash, Upto, [H|T]) :-
	Upto \== Hash,
	load_commit(Store, Hash, H),
	(   read_history_to_hash(Store, H.get(previous), Upto, T)
	->  true
	;   T = []
	).
read_history_to_hash(_, _, _, []).

list_prefix(0, _, []) :- !.
list_prefix(_, [], []) :- !.
list_prefix(N, [H|T0], [H|T]) :-
	N2 is N - 1,
	list_prefix(N2, T0, T).



save_object(Store, Data, Type, Hash) :-
	sha_new_ctx(Ctx0, []),
	size_in_bytes(Data, Size),
	format(string(Hdr), '~w ~d\u0000', [Type, Size]),
	sha_hash_ctx(Ctx0, Hdr, Ctx1, _),
	sha_hash_ctx(Ctx1, Data, _, HashBin),
	hash_atom(HashBin, Hash),
	compress_string(Hdr, Data, Object),
	bdb_handle(Store, objects, BDB),
	bdb_put(BDB, Hash, Object).

compress_string(Header, Data, String) :-
	setup_call_cleanup(
	    new_memory_file(MF),
	    ( setup_call_cleanup(
		  open_memory_file(MF, write, Out, [encoding(utf8)]),
		  setup_call_cleanup(
		      zopen(Out, OutZ, [ format(gzip),
					 close_parent(false)
				       ]),
		      format(OutZ, '~s~s', [Header, Data]),
		    close(OutZ)),
		  close(Out)),
	      memory_file_to_string(MF, String, octet)
	    ),
	    free_memory_file(MF)),
	asserta(data(Header, Data, String)).


size_in_bytes(Data, Size) :-
	setup_call_cleanup(
	    open_null_stream(Out),
	    ( format(Out, '~s', [Data]),
	      byte_count(Out, Size)
	    ),
	    close(Out)).


load_object(Store, Hash, Data) :-
	load_object(Store, Hash, Data, _, _).
load_object(Store, Hash, Data, Type, Size) :-
	bdb_handle(Store, objects, BDB),
	bdb_get(BDB, Hash, Blob),
	setup_call_cleanup(
	    open_string(Blob, In),
	    setup_call_cleanup(
		zopen(In, InZ, [ format(gzip),
				 close_parent(false)
			       ]),
		( set_stream(InZ, encoding(utf8)),
		  read_object(InZ, Data, Type, Size)
		),
		close(InZ)),
	    close(In)).

read_object(In, Data, Type, Size) :-
	get_code(In, C0),
	read_hdr(C0, In, Hdr),
	phrase((nonblanks(TypeChars), " ", integer(Size)), Hdr),
	atom_codes(Type, TypeChars),
	read_string(In, _, Data).

read_hdr(C, In, [C|T]) :-
	C > 0, !,
	get_code(In, C1),
	read_hdr(C1, In, T).
read_hdr(_, _, []).


gitty_hash(Store, Hash) :-
	bdb_handle(Store, objects, BDB),
	(   nonvar(Hash)
	->  bdb_get(BDB, Hash, _)
	;   bdb_enum(BDB, Hash, _)
	).


delete_object(Store, Hash) :-
	bdb_handle(Store, objects, BDB),
	bdb_del(BDB, Hash, _).


gitty_reserved_meta(name).
gitty_reserved_meta(time).
gitty_reserved_meta(data).
gitty_reserved_meta(previous).


:- multifile
	prolog:error_message//1.

prolog:error_message(gitty(not_at_head(Name, _OldCommit))) -->
	[ 'Gitty: cannot update head for "~w" because it was \c
	   updated by someone else'-[Name] ].


		 


gitty_diff(Store, C1, C2, Dict) :-
	gitty_data(Store, C2, Data2, Meta2),
	(   var(C1)
	->  C1 = Meta2.get(previous)
	;   true
	), !,
	gitty_data(Store, C1, Data1, Meta1),
	Pairs = [ from-Meta1, to-Meta2|_],
	(   Data1 \== Data2
	->  udiff_string(Data1, Data2, UDIFF),
	    memberchk(data-UDIFF, Pairs)
	;   true
	),
	meta_tag_set(Meta1, Tags1),
	meta_tag_set(Meta2, Tags2),
	(   Tags1 \== Tags2
	->  ord_subtract(Tags1, Tags2, Deleted),
	    ord_subtract(Tags2, Tags1, Added),
	    memberchk(tags-_{added:Added, deleted:Deleted}, Pairs)
	;   true
	),
	once(length(Pairs,_)),				dict_pairs(Dict, json, Pairs).
gitty_diff(_Store, '0000000000000000000000000000000000000000', _C2,
	   json{initial:true}).


meta_tag_set(Meta, Tags) :-
	sort(Meta.get(tags), Tags), !.
meta_tag_set(_, []).


:- if(true).

udiff_string(Data1, Data2, UDIFF) :-
	setup_call_cleanup(
	    save_string(Data1, File1),
	    setup_call_cleanup(
		save_string(Data2, File2),
		process_diff(File1, File2, UDIFF),
		delete_file(File2)),
	    delete_file(File1)).

save_string(String, File) :-
	tmp_file_stream(utf8, File, TmpOut),
	format(TmpOut, '~s', [String]),
	close(TmpOut).

process_diff(File1, File2, String) :-
	setup_call_cleanup(
	    process_create(path(diff),
			   ['-u', file(File1), file(File2)],
			   [ stdout(pipe(Out)),
			     process(PID)
			   ]),
	    read_string(Out, _, String),
	    ( close(Out),
	      process_wait(PID, Status)
	    )),
	assertion(normal_diff_exit(Status)).

normal_diff_exit(exit(0)).		normal_diff_exit(exit(1)).		
:- else.

udiff_string(Data1, Data2, UDIFF) :-
	data_diff(Data1, Data2, Diffs),
	maplist(udiff_string, Diffs, Strings),
	atomics_to_string(Strings, UDIFF).

:- endif.


		 





data_diff(Data, Data, UDiff) :- !,
	UDiff = [].
data_diff(Data1, Data2, Diff) :-
	split_string(Data1, "\n", "", List1),
	split_string(Data2, "\n", "", List2),
	list_diff(List1, List2, Diff).

list_diff(List1, List2, UDiff) :-
	list_lcs(List1, List2, Lcs),
	make_diff(List1, List2, Lcs, c(), 1, 1, Diff),
	join_diff(Diff, UDiff).


make_diff([], [], [], _, _, _, []) :- !.
make_diff([H|T1], [H|T2], [H|C], c(_,C0,C1), L1, L2, Diff) :- !,
	L11 is L1+1,
	L21 is L2+1,
	make_diff(T1, T2, C, c(C0,C1,H), L11, L21, Diff).
make_diff([H|T1], [H|T2], [H|C], C0, L1, L2, Diff) :- !,
	L11 is L1+1,
	L21 is L2+1,
	add_context(C0, H, C1),
	(   compound_name_arity(C1, _, L1)
	->  Diff = Diff1
	;   Diff = [=(H)|Diff1]
	),
	make_diff(T1, T2, C, C1, L11, L21, Diff1).
make_diff([H|T1], [H2|T2], [H|C], C0, L1, L2, [d(L1,L2,C0,+H2)|Diff]) :- !,
	L21 is L2+1,
	make_diff([H|T1], T2, [H|C], c(), L1, L21, Diff).
make_diff([], [H2|T2], [], C0, L1, L2, [d(L1,L2,C0,+H2)|Diff]) :- !,
	L21 is L2+1,
	make_diff([], T2, [], c(), L1, L21, Diff).
make_diff([H1|T1], [H|T2], [H|C], C0, L1, L2, [d(L1,L2,C0,-H1)|Diff]) :- !,
	L11 is L1+1,
	make_diff(T1, [H|T2], [H|C], c(), L11, L2, Diff).
make_diff([H1|T1], [], [], C0, L1, L2, [d(L1,L2,C0,-H1)|Diff]) :- !,
	L11 is L1+1,
	make_diff(T1, [], [], c(), L11, L2, Diff).
make_diff([H1|T1], [H2|T2], C, C0, L1, L2, [d(L1,L2,C0,H1-H2)|Diff]) :- !,
	L11 is L1+1,
	L21 is L2+1,
	make_diff(T1, T2, C, c(), L11, L21, Diff).

add_context(c(_,B,C),N,c(B,C,N)).
add_context(c(A,B),  N,c(A,B,N)).
add_context(c(A),    N,c(A,N)).
add_context(c(),     N,c(N)).


join_diff([], []).
join_diff([d(L10,L20,C,L)|T0], [udiff(L1,S1,L2,S2,Diff)|T]) :-
	pre_context(C, S0, Diff, [L|DiffT]),
	L1 is L10-S0,
	L2 is L20-S0,
	diff_affected(L,S10,S20),
	S11 is S10+S0,
	S21 is S20+S0,
	collect_diff(T0,S11,S21,S1,S2,0,DiffT,T1),
	join_diff(T1, T).

pre_context(c(),      0, L, L).
pre_context(c(A),     1, [=(A)|L], L).
pre_context(c(A,B),   2, [=(A),=(B)|L], L).
pre_context(c(A,B,C), 3, [=(A),=(B),=(C)|L], L).

collect_diff([d(_,_,_,L)|T0], S10,S20,S1,S2,C,[L|Diff],T) :-
	C < 3, !,
	diff_affected(L,S1x,S2x),
	S11 is S10+S1x,
	S21 is S20+S2x,
	collect_diff(T0,S11,S21,S1,S2,0,Diff,T).
collect_diff([=(L)|T0], S10,S20,S1,S2,C0,[=(L)|Diff],T) :- !,
	S11 is S10+1,
	S21 is S20+1,
	C1 is C0+1,
	collect_diff(T0,S11,S21,S1,S2,C1,Diff,T).
collect_diff(T,S1,S2,S1,S2,_,[],T).

diff_affected(+(_),   0, 1).
diff_affected(-(_),   0, 1).
diff_affected(-(_,_), 1, 1).


udiff_string(udiff(L1,S1,L2,S2,Diff), Final) :-
	format(string(Hdr), '@@ -~d,~d +~d,~d @@', [L1,S1,L2,S2]),
	udiff_blocks(Diff, Blocks),
	maplist(block_lines, Blocks, LineSets),
	append(LineSets, Lines),
	atomics_to_string([Hdr|Lines], "\n", Final).

block_lines(=(U), Lines) :- maplist(string_concat(' '), U, Lines).
block_lines(+(U), Lines) :- maplist(string_concat('+'), U, Lines).
block_lines(-(U), Lines) :- maplist(string_concat('-'), U, Lines).

udiff_blocks([], []) :- !.
udiff_blocks([=(H)|T0], [=([H|E])|T]) :- !,
	udiff_cp(T0, E, T1),
	udiff_blocks(T1, T).
udiff_blocks(U, List) :-
	udiff_block(U, D, A, T1),
	udiff_add(D,A,List,ListT),
	udiff_blocks(T1, ListT).

udiff_add([],A,[+A|T],T) :- !.
udiff_add(D,[],[-D|T],T) :- !.
udiff_add(D,A,[-D,+A|T],T).

udiff_cp([=(H)|T0], [H|E], T) :- !,
	udiff_cp(T0, E, T).
udiff_cp(L, [], L).

udiff_block([-L|T], [L|D], A, Rest) :- !,
	udiff_block(T, D, A, Rest).
udiff_block([+L|T], D, [L|A], Rest) :- !,
	udiff_block(T, D, A, Rest).
udiff_block([L1-L2|T], [L1|D], [L2|A], Rest) :- !,
	udiff_block(T, D, A, Rest).
udiff_block(T, [], [], T).


:- thread_local lcs_db/2.

list_lcs([], [], []) :- !.
list_lcs([H|L1], [H|L2], [H|Lcs]) :- !,
	list_lcs(L1, L2, Lcs).
list_lcs(List1, List2, Lcs) :-
	reverse(List1, Rev1),
	reverse(List2, Rev2),
	copy_prefix(Rev1, Rev2, RevDiff1, RevDiff2, RevLcs, RevT),
	list_lcs2(RevDiff1, RevDiff2, RevT),
	reverse(RevLcs, Lcs).

list_lcs2(List1, List2, Lcs) :-
	variant_sha1(List1+List2, Hash),
	call_cleanup(
	    lcs(List1, List2, Hash, Lcs),
	    retractall(lcs_db(_,_))).

copy_prefix([H|T1], [H|T2], L1, L2, [H|L], LT) :- !,
	copy_prefix(T1, T2, L1, L2, L, LT).
copy_prefix(R1, R2, R1, R2, L, L).


lcs(_,_,Hash,Lcs) :-
	lcs_db(Hash,Lcs), !.
lcs([H|L1], [H|L2], _, [H|Lcs]) :- !,
	variant_sha1(L1+L2,Hash),
	lcs(L1, L2, Hash, Lcs).
lcs(List1, List2, Hash, Lcs) :-
	List1 = [H1|L1],
	List2 = [H2|L2],
	variant_sha1(L1+[H2|L2],Hash1),
	variant_sha1([H1|L1]+L2,Hash2),
	lcs(    L1 , [H2|L2], Hash1, Lcs1),
	lcs([H1|L1],     L2 , Hash2, Lcs2),
	longest(Lcs1, Lcs2, Lcs),!,
	asserta(lcs_db(Hash, Lcs)).
lcs(_,_,_,[]).

longest(L1, L2, Longest) :-
	length(L1, Length1),
	length(L2, Length2),
	(   Length1 > Length2
	->  Longest = L1
	;   Longest = L2
	).


:- module(gitty_driver_bdb,
	  [ gitty_close/1,			    gitty_file/3,		
	    gitty_update_head/4,		    delete_head/2,			    set_head/3,				    store_object/4,			    delete_object/2,		
	    gitty_hash/2,			    load_plain_commit/3,		    load_object/5			  ]).
:- use_module(library(zlib)).
:- use_module(library(dcg/basics)).
:- use_module(library(memfile)).
:- use_module(library(bdb)).




:- dynamic
	bdb_env/2,				bdb_db/3.			:- volatile
	bdb_env/2,
	bdb_db/3.


bdb_handle(Store, Database, Handle) :-
	bdb_db(Store, Database, Handle), !.
bdb_handle(Store, Database, Handle) :-
	with_mutex(gitty_bdb, bdb_handle_sync(Store, Database, Handle)).

bdb_handle_sync(Store, Database, Handle) :-
	bdb_db(Store, Database, Handle), !.
bdb_handle_sync(Store, Database, Handle) :-
	bdb_store(Store, Env),
	db_types(Database, KeyType, ValueType),
	bdb_open(Database, update, Handle,
		 [ environment(Env),
		   key(KeyType),
		   value(ValueType)
		 ]),
	asserta(bdb_db(Store, Database, Handle)).

db_types(heads,   atom, atom).		db_types(objects, atom, c_blob).	

bdb_store(Store, Env) :-
	bdb_env(Store, Env), !.
bdb_store(Store, Env) :-
	with_mutex(gitty_bdb, bdb_store_sync(Store, Env)).

bdb_store_sync(Store, Env) :-
	bdb_env(Store, Env), !.
bdb_store_sync(Store, Env) :-
	ensure_directory(Store),
	bdb_init(Env,
		 [ home(Store),
		   create(true),
		   thread(true),
		   init_txn(true),
		   recover(true),
		   register(true)
		 ]),
	asserta(bdb_env(Store, Env)).

ensure_directory(Dir) :-
	exists_directory(Dir), !.
ensure_directory(Dir) :-
	make_directory(Dir).


gitty_close(Store) :-
	with_mutex(gitty_bdb, gitty_close_sync(Store)).

gitty_close_sync(Store) :-
	(   retract(bdb_env(Store, Env))
	->  bdb_close_environment(Env)
	;   true
	).



gitty_file(Store, Head, Hash) :-
	bdb_handle(Store, heads, H),
	(   nonvar(Head)
	->  bdb_get(H, Head, Hash)
	;   bdb_enum(H, Head, Hash)
	).


gitty_update_head(Store, Name, OldCommit, NewCommit) :-
	bdb_store(Store, Env),
	bdb_transaction(
	    Env,
	    gitty_update_head_sync(Store, Name, OldCommit, NewCommit)).

gitty_update_head_sync(Store, Name, OldCommit, NewCommit) :-
	bdb_handle(Store, heads, BDB),
	(   OldCommit == (-)
	->  (   bdb_get(BDB, Name, _)
	    ->	throw(error(gitty(file_exists(Name),_)))
	    ;	bdb_put(BDB, Name, NewCommit)
	    )
	;   (   bdb_get(BDB, Name, OldCommit)
	    ->	bdb_put(BDB, Name, NewCommit)
	    ;	throw(error(gitty(not_at_head(Name, OldCommit)), _))
	    )
	).


delete_head(Store, Name) :-
	bdb_handle(Store, heads, BDB),
	bdb_del(BDB, Name, _Old).


set_head(Store, File, Hash) :-
	bdb_handle(Store, heads, BDB),
	bdb_put(BDB, File, Hash).


load_plain_commit(Store, Hash, Meta) :-
	load_object(Store, Hash, String, commit, _Size),
	term_string(Meta, String, []).


store_object(Store, Hash, Hdr, Data) :-
	compress_string(Hdr, Data, Object),
	bdb_handle(Store, objects, BDB),
	bdb_put(BDB, Hash, Object).

compress_string(Header, Data, String) :-
	setup_call_cleanup(
	    new_memory_file(MF),
	    ( setup_call_cleanup(
		  open_memory_file(MF, write, Out, [encoding(utf8)]),
		  setup_call_cleanup(
		      zopen(Out, OutZ, [ format(gzip),
					 close_parent(false)
				       ]),
		      format(OutZ, '~s~s', [Header, Data]),
		    close(OutZ)),
		  close(Out)),
	      memory_file_to_string(MF, String, octet)
	    ),
	    free_memory_file(MF)).


load_object(Store, Hash, Data, Type, Size) :-
	bdb_handle(Store, objects, BDB),
	bdb_get(BDB, Hash, Blob),
	setup_call_cleanup(
	    open_string(Blob, In),
	    setup_call_cleanup(
		zopen(In, InZ, [ format(gzip),
				 close_parent(false)
			       ]),
		( set_stream(InZ, encoding(utf8)),
		  read_object(InZ, Data, Type, Size)
		),
		close(InZ)),
	    close(In)).

read_object(In, Data, Type, Size) :-
	get_code(In, C0),
	read_hdr(C0, In, Hdr),
	phrase((nonblanks(TypeChars), " ", integer(Size)), Hdr),
	atom_codes(Type, TypeChars),
	read_string(In, _, Data).

read_hdr(C, In, [C|T]) :-
	C > 0, !,
	get_code(In, C1),
	read_hdr(C1, In, T).
read_hdr(_, _, []).


gitty_hash(Store, Hash) :-
	bdb_handle(Store, objects, BDB),
	(   nonvar(Hash)
	->  bdb_get(BDB, Hash, _)
	;   bdb_enum(BDB, Hash, _)
	).


delete_object(Store, Hash) :-
	bdb_handle(Store, objects, BDB),
	bdb_del(BDB, Hash, _).


:- module(gitty_driver_files,
	  [ gitty_close/1,			    gitty_file/3,		
	    gitty_update_head/4,		    delete_head/2,			    set_head/3,				    store_object/4,			    delete_object/2,		
	    gitty_hash/2,			    load_plain_commit/3,		    load_object/5,		
	    gitty_rescan/1			  ]).
:- use_module(library(zlib)).
:- use_module(library(filesex)).
:- use_module(library(lists)).
:- use_module(library(apply)).
:- use_module(library(dcg/basics)).



:- dynamic
	head/3,					store/2,				heads_input_stream_cache/2.	:- volatile
	head/3,
	store/2,
	heads_input_stream_cache/2.	

:- if(current_prolog_flag(windows, true)).
remote_sync(false).
:- else.
remote_sync(true).
:- endif.


gitty_close(Store) :-
	(   retract(heads_input_stream_cache(Store, In))
	->  close(In)
	;   true
	),
	retractall(head(Store,_,_)),
	retractall(store(Store,_)).



gitty_file(Store, Head, Hash) :-
	gitty_scan(Store),
	head(Store, Head, Hash).


load_plain_commit(Store, Hash, Meta) :-
	load_object(Store, Hash, String, _, _),
	term_string(Meta, String, []).


store_object(Store, Hash, Hdr, Data) :-
	sub_atom(Hash, 0, 2, _, Dir0),
	sub_atom(Hash, 2, 2, _, Dir1),
	sub_atom(Hash, 4, _, 0, File),
	directory_file_path(Store, Dir0, D0),
	ensure_directory(D0),
	directory_file_path(D0, Dir1, D1),
	ensure_directory(D1),
	directory_file_path(D1, File, Path),
	(   exists_file(Path)
	->  true
	;   setup_call_cleanup(
		gzopen(Path, write, Out, [encoding(utf8)]),
		format(Out, '~s~s', [Hdr, Data]),
		close(Out))
	).

ensure_directory(Dir) :-
	exists_directory(Dir), !.
ensure_directory(Dir) :-
	make_directory(Dir).


load_object(Store, Hash, Data, Type, Size) :-
	hash_file(Store, Hash, Path),
	setup_call_cleanup(
	    gzopen(Path, read, In, [encoding(utf8)]),
	    read_object(In, Data, Type, Size),
	    close(In)).

read_object(In, Data, Type, Size) :-
	get_code(In, C0),
	read_hdr(C0, In, Hdr),
	phrase((nonblanks(TypeChars), " ", integer(Size)), Hdr),
	atom_codes(Type, TypeChars),
	read_string(In, _, Data).

read_hdr(C, In, [C|T]) :-
	C > 0, !,
	get_code(In, C1),
	read_hdr(C1, In, T).
read_hdr(_, _, []).


gitty_rescan(Store) :-
	retractall(store(Store, _)).


gitty_scan(Store) :-
	store(Store, _), !,
	(   remote_sync(true)
	->  with_mutex(gitty, remote_updates(Store))
	;   true
	).
gitty_scan(Store) :-
	with_mutex(gitty, gitty_scan_sync(Store)).

:- thread_local
	latest/3.

gitty_scan_sync(Store) :-
	store(Store, _), !.
gitty_scan_sync(Store) :-
	remote_sync(true), !,
	restore_heads_from_remote(Store).
gitty_scan_sync(Store) :-
	read_heads_from_objects(Store).


read_heads_from_objects(Store) :-
	gitty_scan_latest(Store),
	forall(retract(latest(Name, Hash, _Time)),
	       assert(head(Store, Name, Hash))),
	get_time(Now),
	assertz(store(Store, Now)).


gitty_scan_latest(Store) :-
	retractall(head(Store, _, _)),
	retractall(latest(_, _, _)),
	(   gitty_hash(Store, Hash),
	    load_object(Store, Hash, Data, commit, _Size),
	    term_string(Meta, Data, []),
	    _{name:Name, time:Time} :< Meta,
	    (	latest(Name, _, OldTime),
		OldTime > Time
	    ->	true
	    ;	retractall(latest(Name, _, _)),
		assertz(latest(Name, Hash, Time))
	    ),
	    fail
	;   true
	).



gitty_hash(Store, Hash) :-
	var(Hash), !,
	access_file(Store, exist),
	directory_files(Store, Level0),
	member(E0, Level0),
	E0 \== '..',
	atom_length(E0, 2),
	directory_file_path(Store, E0, Dir0),
	directory_files(Dir0, Level1),
	member(E1, Level1),
	E1 \== '..',
	atom_length(E1, 2),
	directory_file_path(Dir0, E1, Dir),
	directory_files(Dir, Files),
	member(File, Files),
	atom_length(File, 36),
	atomic_list_concat([E0,E1,File], Hash).
gitty_hash(Store, Hash) :-
	hash_file(Store, Hash, File),
	exists_file(File).


delete_object(Store, Hash) :-
	hash_file(Store, Hash, File),
	delete_file(File).

hash_file(Store, Hash, Path) :-
	sub_atom(Hash, 0, 2, _, Dir0),
	sub_atom(Hash, 2, 2, _, Dir1),
	sub_atom(Hash, 4, _, 0, File),
	atomic_list_concat([Store, Dir0, Dir1, File], /, Path).


		 


gitty_update_head(Store, Name, OldCommit, NewCommit) :-
	with_mutex(gitty,
		   gitty_update_head_sync(Store, Name, OldCommit, NewCommit)).

gitty_update_head_sync(Store, Name, OldCommit, NewCommit) :-
	remote_sync(true), !,
	setup_call_cleanup(
	    heads_output_stream(Store, HeadsOut),
	    gitty_update_head_sync(Store, Name, OldCommit, NewCommit, HeadsOut),
	    close(HeadsOut)).
gitty_update_head_sync(Store, Name, OldCommit, NewCommit) :-
	gitty_update_head_sync2(Store, Name, OldCommit, NewCommit).

gitty_update_head_sync(Store, Name, OldCommit, NewCommit, HeadsOut) :-
	gitty_update_head_sync2(Store, Name, OldCommit, NewCommit),
	format(HeadsOut, '~q.~n', [head(Name, OldCommit, NewCommit)]).

gitty_update_head_sync2(Store, Name, OldCommit, NewCommit) :-
	gitty_scan(Store),			(   OldCommit == (-)
	->  (   head(Store, Name, _)
	    ->	throw(error(gitty(file_exists(Name),_)))
	    ;	assertz(head(Store, Name, NewCommit))
	    )
	;   (   retract(head(Store, Name, OldCommit))
	    ->	assertz(head(Store, Name, NewCommit))
	    ;	throw(error(gitty(not_at_head(Name, OldCommit)), _))
	    )
	).

remote_updates(Store) :-
	remote_updates(Store, List),
	maplist(update_head(Store), List).

update_head(Store, head(Name, OldCommit, NewCommit)) :-
	(   OldCommit == (-)
	->  \+ head(Store, Name, _)
	;   retract(head(Store, Name, OldCommit))
	), !,
	assert(head(Store, Name, NewCommit)).
update_head(_, _).


remote_updates(Store, List) :-
	heads_input_stream(Store, Stream),
	setup_call_cleanup(
	    '$push_input_context'(gitty_sync),
	    read_new_terms(Stream, List),
	    '$pop_input_context').

read_new_terms(Stream, Terms) :-
	read(Stream, First),
	read_new_terms(First, Stream, Terms).

read_new_terms(end_of_file, _, List) :- !,
	List = [].
read_new_terms(Term, Stream, [Term|More]) :-
	read(Stream, Term2),
	read_new_terms(Term2, Stream, More).

heads_output_stream(Store, Out) :-
	heads_file(Store, HeadsFile),
	open(HeadsFile, append, Out,
	     [ encoding(utf8),
	       lock(exclusive)
	     ]).

heads_input_stream(Store, Stream) :-
	heads_input_stream_cache(Store, Stream0), !,
	Stream = Stream0.
heads_input_stream(Store, Stream) :-
	heads_file(Store, File),
	between(1, 2, _),
	catch(open(File, read, In,
		   [ encoding(utf8),
		     eof_action(reset)
		   ]),
	      _,
	      create_heads_file(Store)), !,
	assert(heads_input_stream_cache(Store, In)),
	Stream = In.

create_heads_file(Store) :-
	call_cleanup(
	    heads_output_stream(Store, Out),
	    close(Out)),
	fail.					
heads_file(Store, HeadsFile) :-
	ensure_directory(Store),
	directory_file_path(Store, ref, RefDir),
	ensure_directory(RefDir),
	directory_file_path(RefDir, head, HeadsFile).


restore_heads_from_remote(Store) :-
	heads_file(Store, File),
	exists_file(File),
	setup_call_cleanup(
	    open(File, read, In, [encoding(utf8)]),
	    restore_heads(Store, In),
	    close(In)), !,
	get_time(Now),
	assertz(store(Store, Now)).
restore_heads_from_remote(Store) :-
	read_heads_from_objects(Store),
	heads_file(Store, File),
	setup_call_cleanup(
	    open(File, write, Out, [encoding(utf8)]),
	    save_heads(Store, Out),
	    close(Out)), !.

restore_heads(Store, In) :-
	read(In, Term0),
	Term0 = epoch(_),
	read(In, Term1),
	restore_heads(Term1, In, Store).

restore_heads(end_of_file, _, _) :- !.
restore_heads(head(File, _, Hash), In, Store) :-
	retractall(head(Store, File, _)),
	assertz(head(Store, File, Hash)),
	read(In, Term),
	restore_heads(Term, In, Store).

save_heads(Store, Out) :-
	get_time(Now),
	format(Out, 'epoch(~0f).~n~n', [Now]),
	forall(head(Store, File, Hash),
	       format(Out, '~q.~n', [head(File, -, Hash)])).



delete_head(Store, Head) :-
	retractall(head(Store, Head, _)).


set_head(Store, File, Hash) :-
	retractall(head(Store, File, _)),
	asserta(head(Store, File, Hash)).


:- module(gitty_tools,
	  [ gitty_copy_store/3,			    gitty_compare_stores/2,		    gitty_fsck/2			  ]).
:- use_module(gitty).
:- use_module(library(apply)).
:- use_module(library(option)).
:- use_module(library(aggregate)).




gitty_copy_store(StoreIn, StoreOut, Driver) :-
	gitty_open(StoreIn, []),
	gitty_open(StoreOut, [driver(Driver)]),
	State = state(0),
	(   gitty_file(StoreIn, File, _),
	    State = state(N0),
	    N is N0+1,
	    nb_setarg(1, State, N),
	    format(user_error, '~N~D ~`.t ~q ~50|', [N, File]),
	    (	copy_file(File, StoreIn, StoreOut)
	    ->	fail
	    ;	format('Failed to copy ~q~n', [File])
	    )
	;   true
	).

copy_file(File, StoreIn, StoreOut) :-
	gitty_history(StoreIn, File, History, [depth(1000000)]),
	reverse(History, LastToFirst),
	maplist(copy_commit(StoreIn, StoreOut), LastToFirst).

copy_commit(_StoreIn, StoreOut, Commit) :-
	gitty_hash(StoreOut, Commit.commit), !,
	put_char(user_error, '+').
copy_commit(StoreIn, StoreOut, Commit) :-
	gitty_data(StoreIn, Commit.commit, Data, Meta0),
	del_keys([commit, symbolic], Meta0, Meta),
	(   Prev = Meta.get(previous),
	    gitty_commit(StoreIn, Prev, PrevCommit),
	    PrevCommit.name == Meta.name
	->  gitty_update(StoreOut, Meta.name, Data, Meta, _)
	;   gitty_create(StoreOut, Meta.name, Data, Meta, _)
	),
	put_char(user_error, '.').

del_keys([], Dict, Dict).
del_keys([H|T], Dict0, Dict) :-
	del_dict(H, Dict0, _, Dict1), !,
	del_keys(T, Dict1, Dict).
del_keys([_|T], Dict0, Dict) :-
	del_keys(T, Dict0, Dict).


gitty_compare_stores(Store1, Store2) :-
	gitty_open(Store1, []),
	gitty_open(Store2, []),
	gitty_full_history(Store1, History1),
	gitty_full_history(Store2, History2),
	History1 == History2.

gitty_full_history(Store, History) :-
	setof(File, Hash^gitty_file(Store, File, Hash), Files),
	maplist(gitty_full_history(Store), Files, History).

gitty_full_history(Store, File, History) :-
	gitty_history(Store, File, History, [depth(1000000)]).


gitty_fsck(Store, Options) :-
	gitty_open(Store, []),
	check_objects(Store, Options),
	load_commits(Store),
	check_heads(Store, Options),
	check_commits(Store, Options).

check_objects(Store, Options) :-
	aggregate_all(count,
		      ( gitty_hash(Store, Hash),
			check_object(Store, Hash, Options)
		      ), Objects),
	progress(checked_objects(Objects)).


check_object(Store, Hash, _) :-
	gitty:fsck_object(Store, Hash), !.
check_object(Store, Hash, Options) :-
	gripe(bad_object(Store, Hash)),
	fix(gitty:delete_object(Store, Hash), Options).


:- dynamic
	commit/5.			
load_commits(Store) :-
	clean_commits(Store),
	(   gitty_hash(Store, Hash),
	    gitty_commit(Store, Hash, Commit),
	    (	Prev = Commit.get(previous)
	    ->	true
	    ;	Prev = (-)
	    ),
	    assertz(commit(Store, Commit.commit, Prev, Commit.name, Commit.data)),
	    fail
	;   true
	).

clean_commits(Store) :-
	retractall(commit(Store, _, _, _, _)).


check_heads(Store, Options) :-
	forall(head(Store, File, Head),
	       check_head(Store, File, Head, Options)),
	forall(gitty_file(Store, File, Head),
	       check_head_exists(Store, File, Head, Options)).

check_head(Store, File, Head, Options) :-
	(   gitty_file(Store, File, Head)
	->  true
	;   gitty_file(Store, File, WrongHash)
	->  gripe(head_mismatch(Store, File, Head, WrongHash)),
	    fix(gitty:set_head(Store, File, Head), Options)
	;   gripe(lost_head(Store, File, Head)),
	    fix(gitty:set_head(Store, File, Head), Options)
	).

check_head_exists(Store, File, Head, Options) :-
	(   head(Store, File, Head)
	->  true
	;   (   option(fix(true), Options)
	    ->	assertion(\+head(Store, File, _))
	    ;	true
	    ),
	    gripe(lost_file(Store, File)),
	    fix(gitty:delete_head(Store, File), Options)
	).

head(Store, File, Head) :-
	commit(Store, Head, _, File, _),
	\+ commit(Store, _, Head, _, _).


check_commits(Store, Options) :-
	forall(gitty_file(Store, _File, Head),
	       check_commit(Store, Head, Options)).


check_commit(Store, Head, Options) :-
	(   gitty_commit(Store, Head, Commit)
	->  (   gitty_hash(Store, Commit.data)
	    ->	true
	    ;	gripe(no_data(Commit.data)),
		fail
	    ),
	    (   Prev = Commit.get(previous)
	    ->  check_commit(Store, Prev, Options)
	    ;   true
	    )
	;   gripe(no_commit(Store, Head)),
	    fail
	), !.
check_commit(_, _, _).


:- meta_predicate
	fix(0, +).

fix(Goal, Options) :-
	option(fix(true), Options), !,
	call(Goal).
fix(_, _).


gripe(Term) :-
	print_message(error, gitty(Term)).
progress(Term) :-
	print_message(informational, gitty(Term)).

:- multifile prolog:message//1.

prolog:message(gitty(Term)) -->
	gitty_message(Term).

gitty_message(no_commit(Store, File, Head)) -->
	[ '~p: file ~p: missing commit object ~p'-[Store, File, Head] ].
gitty_message(bad_object(Store, Hash)) -->
	[ '~p: ~p: corrupt object'-[Store, Hash] ].
gitty_message(lost_file(Store, File)) -->
	[ '~p: ~p: lost file'-[Store, File] ].
gitty_message(lost_head(Store, File, Head)) -->
	[ '~p: ~p: lost head: ~p'-[Store, File, Head] ].
gitty_message(head_mismatch(Store, File, Head, WrongHash)) -->
	[ '~p: ~p: wrong head (~p --> ~p)'-[Store, File, WrongHash, Head] ].
gitty_message(checked_objects(Count)) -->
	[ 'Checked ~D objects'-[Count] ].


:- module(swish_help, []).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/http_server_files)).



:- http_handler(swish(help), serve_files_in_directory(swish_help),
		[id(help),prefix]).

user:file_search_path(swish_help, swish(web/help)).



:- module(swish_highlight,
	  [ current_highlight_state/2
	  ]).
:- use_module(library(debug)).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/html_write)).
:- use_module(library(http/http_json)).
:- use_module(library(http/http_path), []).
:- use_module(library(http/http_parameters)).
:- use_module(library(pairs)).
:- use_module(library(apply)).
:- use_module(library(error)).
:- use_module(library(prolog_xref)).
:- use_module(library(memfile)).
:- use_module(library(prolog_colour)).
:- if(exists_source(library(helpidx))).
:- use_module(library(helpidx), [predicate/5]).
:- endif.

http:location(codemirror, swish(cm), []).

:- http_handler(codemirror(.),      http_404([]),      [id(cm_highlight)]).
:- http_handler(codemirror(change), codemirror_change, []).
:- http_handler(codemirror(tokens), codemirror_tokens, []).
:- http_handler(codemirror(leave),  codemirror_leave,  []).
:- http_handler(codemirror(info),   token_info,        []).



		 


codemirror_change(Request) :-
	http_read_json_dict(Request, Change, []),
	debug(cm(change), 'Change ~p', [Change]),
	UUID = Change.uuid,
	(   shadow_editor(Change, TB)
	->  (	catch(apply_change(TB, Changed, Change.change),
		      cm(outofsync), fail)
	    ->  mark_changed(TB, Changed),
		reply_json_dict(true)
	    ;	destroy_editor(UUID),
		change_failed(UUID, outofsync)
	    )
	;   change_failed(UUID, existence_error)
	).

change_failed(UUID, Reason) :-
	reply_json_dict(json{ type:Reason,
			      object:UUID
			    },
			[status(409)]).



apply_change(_, _Changed, []) :- !.
apply_change(TB, Changed, Change) :-
	_{from:From} :< Change,
	Line is From.line+1,
	memory_file_line_position(TB, Line, From.ch, ChPos),
	remove(Change.removed, TB, ChPos, Changed),
	insert(Change.text, TB, ChPos, _End, Changed),
	(   Next = Change.get(next)
	->  apply_change(TB, Changed, Next)
	;   true
	).

remove([], _, _, _) :- !.
remove([H|T], TB, ChPos, Changed) :-
	string_length(H, Len),
	(   T == []
	->  DLen is Len
	;   DLen is Len+1
	),
	(   DLen == 0
	->  true
	;   Changed = true,
	    memory_file_substring(TB, ChPos, Len, _, Text),
	    (	Text == H
	    ->	true
	    ;	throw(cm(outofsync))
	    ),
	    delete_memory_file(TB, ChPos, DLen)
	),
	remove(T, TB, ChPos, Changed).

insert([], _, ChPos, ChPos, _) :- !.
insert([H|T], TB, ChPos0, ChPos, Changed) :-
	(   H == ""
	->  Len	= 0
	;   Changed = true,
	    string_length(H, Len),
	    debug(cm(change), 'Insert ~q at ~d', [H, ChPos0]),
	    insert_memory_file(TB, ChPos0, H)
	),
	ChPos1 is ChPos0+Len,
	(   T == []
	->  ChPos2 = ChPos1
	;   debug(cm(change), 'Adding newline at ~d', [ChPos1]),
	    Changed = true,
	    insert_memory_file(TB, ChPos1, '\n'),
	    ChPos2 is ChPos1+1
	),
	insert(T, TB, ChPos2, ChPos, Changed).

:- dynamic
	current_editor/4,				editor_last_access/2,				xref_upto_data/1.			
create_editor(UUID, Editor, Change) :-
	must_be(atom, UUID),
	uuid_like(UUID),
	new_memory_file(Editor),
	(   RoleString = Change.get(role)
	->  atom_string(Role, RoleString)
	;   Role = source
	),
	get_time(Now),
	asserta(current_editor(UUID, Editor, Role, Now)).


current_highlight_state(UUID,
			highlight{data:Editor,
				  role:Role,
				  created:Created,
				  access:Access
				 }) :-
	current_editor(UUID, Editor, Role, Created),
	(   editor_last_access(Editor, Access)
	->  true
	;   Access = Created
	).



uuid_like(UUID) :-
	split_string(UUID, "-", "", Parts),
	maplist(string_length, Parts, [8,4,4,4,12]),
	\+ current_editor(UUID, _, _, _).


destroy_editor(UUID) :-
	must_be(atom, UUID),
	retractall(xref_upto_data(UUID)),
	retractall(editor_last_access(UUID, _)),
	current_editor(UUID, Editor, _, _), !,
	(   xref_source_id(Editor, SourceID)
	->  xref_clean(SourceID),
	    destroy_state_module(UUID)
	;   true
	),
		retractall(current_editor(UUID, Editor, _, _)),
	free_memory_file(Editor).
destroy_editor(_).


:- dynamic
	gced_editors/1.

editor_max_idle_time(3600).

gc_editors :-
	get_time(Now),
	(   gced_editors(Then),
	    editor_max_idle_time(MaxIdle),
	    Now - Then < MaxIdle/3
	->  true
	;   retractall(gced_editors(_)),
	    asserta(gced_editors(Now)),
	    fail
	).
gc_editors :-
	editor_max_idle_time(MaxIdle),
	forall(garbage_editor(UUID, MaxIdle),
	       destroy_old_editor(UUID)).

garbage_editor(UUID, TimeOut) :-
	get_time(Now),
	current_editor(UUID, _TB, _Role, Created),
	Now - Created > TimeOut,
	(   editor_last_access(UUID, Access)
	->  Now - Access > TimeOut
	;   true
	).

destroy_old_editor(UUID) :-
	with_mutex(swish_gc_editor,
		   destroy_old_editor_sync(UUID)).

destroy_old_editor_sync(UUID) :-
	editor_max_idle_time(MaxIdle),
	garbage_editor(UUID, MaxIdle), !,
	debug(cm(gc), 'GC highlight state for ~q', [UUID]),
	destroy_editor(UUID).
destroy_old_editor_sync(_).


fetch_editor(UUID, TB) :-
	with_mutex(swish_gc_editor,
		   ( current_editor(UUID, TB, _Role, _),
		     update_access(UUID)
		   )).

update_access(UUID) :-
	get_time(Now),
	retractall(editor_last_access(UUID, _)),
	asserta(editor_last_access(UUID, Now)).

:- multifile
	prolog:xref_source_identifier/2,
	prolog:xref_open_source/2.

prolog:xref_source_identifier(UUID, UUID) :-
	current_editor(UUID, _, _, _).

prolog:xref_open_source(UUID, Stream) :-
	current_editor(UUID, TB, _Role, _), !,
	open_memory_file(TB, read, Stream).



codemirror_leave(Request) :-
	http_read_json_dict(Request, Data, []),
	debug(cm(leave), 'Leaving editor ~p', [Data]),
	(   atom_string(UUID, Data.get(uuid))
	->  forall(current_editor(UUID, _TB, _Role, _),
		   with_mutex(swish_gc_editor, destroy_editor(UUID)))
	;   true
	),
	reply_json_dict(true).


mark_changed(MemFile, Changed) :-
	(   Changed == true
	->  current_editor(UUID, MemFile, _Role, _),
	    retractall(xref_upto_data(UUID))
	;   true
	).


xref(UUID) :-
	xref_upto_data(UUID), !.
xref(UUID) :-
	current_editor(UUID, MF, _Role, _),
	xref_source_id(MF, SourceId),
	xref_state_module(MF, Module),
	xref_source(SourceId,
		    [ silent(true),
		      module(Module)
		    ]),
	asserta(xref_upto_data(UUID)).


xref_source_id(TB, UUID) :-
	current_editor(UUID, TB, _Role, _).


xref_state_module(TB, UUID) :-
	current_editor(UUID, TB, _Role, _),
	(   module_property(UUID, class(temporary))
	->  true
	;   set_module(UUID:class(temporary)),
	    add_import_module(UUID, swish, start)
	).

destroy_state_module(UUID) :-
	module_property(UUID, class(temporary)), !,
	'$destroy_module'(UUID).
destroy_state_module(_).


		 


codemirror_tokens(Request) :-
	http_read_json_dict(Request, Data, []),
	debug(cm(tokens), 'Asking for tokens: ~p', [Data]),
	(   catch(shadow_editor(Data, TB), cm(Reason), true)
	->  (   var(Reason)
	    ->	enriched_tokens(TB, Data, Tokens),
		reply_json_dict(json{tokens:Tokens}, [width(0)])
	    ;	change_failed(Data.uuid, Reason)
	    )
	;   reply_json_dict(json{tokens:[[]]})
	),
	gc_editors.


enriched_tokens(TB, _Data, Tokens) :-			current_editor(UUID, TB, source, _), !,
	xref(UUID),
	server_tokens(TB, Tokens).
enriched_tokens(TB, Data, Tokens) :-			json_source_id(Data.get(sourceID), SourceID), !,
	memory_file_to_string(TB, Query),
	with_mutex(swish_highlight_query,
		   prolog_colourise_query(Query, SourceID, colour_item(TB))),
	collect_tokens(TB, Tokens).
enriched_tokens(TB, _Data, Tokens) :-
	memory_file_to_string(TB, Query),
	prolog_colourise_query(Query, module(swish), colour_item(TB)),
	collect_tokens(TB, Tokens).


:- if(current_predicate(prolog_colour:to_list/2)).
json_source_id(StringList, SourceIDList) :-
	is_list(StringList),
	StringList \== [], !,
	maplist(string_source_id, StringList, SourceIDList).
:- else.				json_source_id([String|_], SourceID) :-
	maplist(string_source_id, String, SourceID).
:- endif.
json_source_id(String, SourceID) :-
	string(String),
	string_source_id(String, SourceID).

string_source_id(String, SourceID) :-
	atom_string(SourceID, String),
	(   fetch_editor(SourceID, _TB)
	->  true
	;   true
	).



shadow_editor(Data, TB) :-
	atom_string(UUID, Data.get(uuid)),
	fetch_editor(UUID, TB), !,
	(   Text = Data.get(text)
	->  size_memory_file(TB, Size),
	    delete_memory_file(TB, 0, Size),
	    insert_memory_file(TB, 0, Text),
	    mark_changed(TB, true)
	;   Changes = Data.get(changes)
	->  (   maplist(apply_change(TB, Changed), Changes)
	    ->	true
	    ;	throw(cm(out_of_sync))
	    ),
	    mark_changed(TB, Changed)
	).
shadow_editor(Data, TB) :-
	Text = Data.get(text), !,
	atom_string(UUID, Data.uuid),
	create_editor(UUID, TB, Data),
	debug(cm(change), 'Initialising editor to ~q', [Text]),
	insert_memory_file(TB, 0, Text).
shadow_editor(Data, TB) :-
	_{role:_} :< Data, !,
	atom_string(UUID, Data.uuid),
	create_editor(UUID, TB, Data).
shadow_editor(_Data, _TB) :-
	throw(cm(existence_error)).

:- thread_local
	token/3.


:- public
	show_mirror/1,
	server_tokens/1.

show_mirror(Role) :-
	current_editor(_UUID, TB, Role, _), !,
	memory_file_to_string(TB, String),
	write(user_error, String).

server_tokens(Role) :-
	current_editor(_UUID, TB, Role, _), !,
	enriched_tokens(TB, _{}, Tokens),
	print_term(Tokens, [output(user_error)]).


server_tokens(TB, GroupedTokens) :-
	current_editor(UUID, TB, _Role, _),
	setup_call_cleanup(
	    open_memory_file(TB, read, Stream),
	    ( set_stream_file(TB, Stream),
	      prolog_colourise_stream(Stream, UUID, colour_item(TB))
	    ),
	    close(Stream)),
	collect_tokens(TB, GroupedTokens).

collect_tokens(TB, GroupedTokens) :-
	findall(Start-Token, json_token(TB, Start, Token), Pairs),
	keysort(Pairs, Sorted),
	pairs_values(Sorted, Tokens),
	group_by_term(Tokens, GroupedTokens).

set_stream_file(_,_).			

group_by_term([], []) :- !.
group_by_term(Flat, [Term|Grouped]) :-
	take_term(Flat, Term, Rest),
	group_by_term(Rest, Grouped).

take_term([], [], []).
take_term([H|T0], [H|T], R) :-
	(   ends_term(H.get(type))
	->  T = [],
	    R = T0
	;   take_term(T0, T, R)
	).

ends_term(fullstop).
ends_term(syntax_error).


json_token(TB, Start, Token) :-
	retract(token(Style, Start0, Len)),
	debug(color, 'Trapped ~q.', [token(Style, Start0, Len)]),
	(   atomic_special(Style, Start0, Len, TB, Type, Attrs)
	->  Start = Start0
	;   style(Style, Type0, Attrs0)
	->  (   Type0 = StartType-EndType
	    ->	(   Start = Start0,
		    Type  = StartType
		;   Start is Start0+Len-1,
		    Type  = EndType
		)
	    ;	Type = Type0,
		Start = Start0
	    ),
	    json_attributes(Attrs0, Attrs, TB, Start0, Len)
	),
	dict_create(Token, json, [type(Type)|Attrs]).

atomic_special(atom, Start, Len, TB, Type, Attrs) :-
	(   memory_file_substring(TB, Start, 1, _, "'")
	->  Type = qatom,
	    Attrs = []
	;   Type = atom,
	    (   Len =< 5				    ->  memory_file_substring(TB, Start, Len, _, Text),
	        Attrs = [text(Text)]
	    ;   Attrs = []
	    )
	).

json_attributes([], [], _, _, _).
json_attributes([H0|T0], Attrs, TB, Start, Len) :-
	json_attribute(H0, Attrs, T, TB, Start, Len), !,
	json_attributes(T0, T, TB, Start, Len).
json_attributes([_|T0], T, TB, Start, Len) :-
	json_attributes(T0, T, TB, Start, Len).

json_attribute(text, [text(Text)|T], T, TB, Start, Len) :- !,
	memory_file_substring(TB, Start, Len, _, Text).
json_attribute(line(File:Line), [line(Line),file(File)|T], T, _, _, _) :- !.
json_attribute(Term, [Term|T], T, _, _, _).

colour_item(_TB, Style, Start, Len) :-
	(   style(Style)
	->  assertz(token(Style, Start, Len))
	;   debug(color, 'Ignored ~q.', [token(Style, Start, Len)])
	).


:- multifile
	style/3.

style(Style) :-
	style(Style, _, _).

style(neck(Neck),     neck, [ text(Text) ]) :-
	neck_text(Neck, Text).
style(head(Class, Head), Type, [ text, arity(Arity) ]) :-
	goal_arity(Head, Arity),
	head_type(Class, Type).
style(goal(Class, Goal), Type, [ text, arity(Arity) | More ]) :-
	goal_arity(Goal, Arity),
	goal_type(Class, Type, More).
style(file_no_depend(Path), file_no_depends,		   [text, path(Path)]).
style(file(Path),	 file,				   [text, path(Path)]).
style(nofile,		 nofile,			   [text]).
style(option_name,	 option_name,			   [text]).
style(no_option_name,	 no_option_name,		   [text]).
style(flag_name(_Flag),	 flag_name,			   [text]).
style(no_flag_name(_Flag), no_flag_name,		   [text]).
style(fullstop,		 fullstop,			   []).
style(var,		 var,				   [text]).
style(singleton,	 singleton,			   [text]).
style(string,		 string,			   []).
style(codes,		 codes,				   []).
style(chars,		 chars,				   []).
style(atom,		 atom,				   []).
style(meta(_Spec),	 meta,				   []).
style(op_type(_Type),	 op_type,			   [text]).
style(functor,		 functor,			   [text]).
style(control,		 control,			   [text]).
style(identifier,	 identifier,			   [text]).
style(module(_Module),   module,			   [text]).
style(error,		 error,				   [text]).
style(type_error(Expect), error,		      [text,expected(Expect)]).
style(syntax_error(_Msg,_Pos), syntax_error,		   []).
style(predicate_indicator, atom,			   [text]).
style(predicate_indicator, atom,			   [text]).
style(arity,		 int,				   []).
style(int,		 int,				   []).
style(float,		 float,				   []).
style(qq(open),		 qq_open,			   []).
style(qq(sep),		 qq_sep,			   []).
style(qq(close),	 qq_close,			   []).
style(qq_type,		 qq_type,			   [text]).
style(dict_tag,		 tag,				   [text]).
style(dict_key,		 key,				   [text]).
style(dict_sep,		 sep,				   []).
style(func_dot,		 atom,				   [text(.)]).
style(dict_return_op,	 atom,				   [text(:=)]).
style(dict_function(F),  dict_function,			   [text(F)]).
style(empty_list,	 list_open-list_close,		   []).
style(list,		 list_open-list_close,		   []).
style(dcg(terminal),	 list_open-list_close,		   []).
style(dcg(plain),	 brace_term_open-brace_term_close, []).
style(brace_term,	 brace_term_open-brace_term_close, []).
style(dict_content,	 dict_open-dict_close,             []).
style(expanded,		 expanded,			   [text]).
style(comment_string,	 comment_string,		   []).
					style(html(_Element),	 html,				   []).
style(entity(_Element),	 entity,			   []).
style(html_attribute(_), html_attribute,		   []).
style(sgml_attr_function,sgml_attr_function,		   []).
style(http_location_for_id(_), http_location_for_id,       []).
style(http_no_location_for_id(_), http_no_location_for_id, []).
					style(method(send),	 xpce_method,			   [text]).
style(method(get),	 xpce_method,			   [text]).
style(class(built_in,_Name),	  xpce_class_built_in,	   [text]).
style(class(library(File),_Name), xpce_class_lib,	   [text, file(File)]).
style(class(user(File),_Name),	  xpce_class_user,	   [text, file(File)]).
style(class(user,_Name),	  xpce_class_user,	   [text]).
style(class(undefined,_Name),	  xpce_class_undef,	   [text]).

neck_text(clause,       (:-)).
neck_text(grammar_rule, (-->)).
neck_text(method(send), (:->)).
neck_text(method(get),  (:<-)).
neck_text(directive,    (:-)).

head_type(exported,	head_exported).
head_type(public(_),	head_public).
head_type(extern(_),	head_extern).
head_type(dynamic,	head_dynamic).
head_type(multifile,	head_multifile).
head_type(unreferenced,	head_unreferenced).
head_type(hook,		head_hook).
head_type(meta,		head_meta).
head_type(constraint,	head_constraint).
head_type(imported,	head_imported).
head_type(built_in,	head_built_in).
head_type(iso,		head_iso).
head_type(def_iso,	head_def_iso).
head_type(def_swi,	head_def_swi).
head_type(_,		head).

goal_type(built_in,	      goal_built_in,	 []).
goal_type(imported(File),     goal_imported,	 [file(File)]).
goal_type(autoload(File),     goal_autoload,	 [file(File)]).
goal_type(global,	      goal_global,	 []).
goal_type(undefined,	      goal_undefined,	 []).
goal_type(thread_local(Line), goal_thread_local, [line(Line)]).
goal_type(dynamic(Line),      goal_dynamic,	 [line(Line)]).
goal_type(multifile(Line),    goal_multifile,	 [line(Line)]).
goal_type(expanded,	      goal_expanded,	 []).
goal_type(extern(_),	      goal_extern,	 []).
goal_type(recursion,	      goal_recursion,	 []).
goal_type(meta,		      goal_meta,	 []).
goal_type(foreign(_),	      goal_foreign,	 []).
goal_type(local(Line),	      goal_local,	 [line(Line)]).
goal_type(constraint(Line),   goal_constraint,	 [line(Line)]).
goal_type(not_callable,	      goal_not_callable, []).


goal_arity(Goal, Arity) :-
	(   compound(Goal)
	->  compound_name_arity(Goal, _, Arity)
	;   Arity = 0
	).

		 

:- multifile
	swish_config:config/2,
	css/3.				

swish_config:config(cm_style, Styles) :-
	findall(Name-Style, highlight_style(Name, Style), Pairs),
	keysort(Pairs, Sorted),
	remove_duplicate_styles(Sorted, Unique),
	dict_pairs(Styles, json, Unique).
swish_config:config(cm_hover_style, Styles) :-
	findall(Sel-Attrs, css_dict(hover, Sel, Attrs), Pairs),
	dict_pairs(Styles, json, Pairs).

remove_duplicate_styles([], []).
remove_duplicate_styles([H|T0], [H|T]) :-
	H = K-_,
	remove_same(K, T0, T1),
	remove_duplicate_styles(T1, T).

remove_same(K, [K-_|T0], T) :- !,
	remove_same(K, T0, T).
remove_same(_, Rest, Rest).

highlight_style(StyleName, Style) :-
	style(Term, StyleName, _),
	atom(StyleName),
	(   prolog_colour:style(Term, Attrs0)
        ->  maplist(css_style, Attrs0, Attrs),
	    dict_create(Style, json, Attrs)
	).

css_style(bold(true),      'font-weight'(bold)) :- !.
css_style(underline(true), 'text-decoration'(underline)) :- !.
css_style(colour(Name), color(RGB)) :-
	current_prolog_flag(gui, true), !,
	get(colour(Name), red,   R0),
	get(colour(Name), green, G0),
	get(colour(Name), blue,  B0),
	R is R0//256,
	G is G0//256,
	B is B0//256,
	format(atom(RGB), '#~|~`0t~16r~2+~`0t~16r~2+~`0t~16r~2+', [R,G,B]).
css_style(Style, Style).


css_dict(Context, Selector, Style) :-
	css(Context, Selector, Attrs0),
	maplist(css_style, Attrs0, Attrs),
	dict_create(Style, json, Attrs).


		 

:- multifile
	prolog:predicate_summary/2.


token_info(Request) :-
	http_parameters(Request, [], [form_data(Form)]),
	maplist(type_convert, Form, Values),
	dict_create(Token, token, Values),
	reply_html_page(plain,
			title('token info'),
			\token_info_or_none(Token)).

type_convert(Name=Atom, Name=Number) :-
	atom_number(Atom, Number), !.
type_convert(NameValue, NameValue).


token_info_or_none(Token) -->
	token_info(Token), !.
token_info_or_none(_) -->
	html(span(class('token-noinfo'), 'No info available')).


:- multifile token_info//1.

token_info(Token) -->
	{ _{type:Type, text:Name, arity:Arity} :< Token,
	  goal_type(_, Type, _), !,
	  ignore(token_predicate_module(Token, Module)),
	  predicate_info(Module:Name/Arity, Info)
	},
	pred_info(Info).

pred_info([]) -->
	html(span(class('pred-nosummary'), 'No help available')).
pred_info([Info|_]) -->				(pred_tags(Info)     -> [];[]),
	(pred_summary(Info)  -> [];[]).

pred_tags(Info) -->
	{ Info.get(iso) == true },
	html(span(class('pred-tag'), 'ISO')).

pred_summary(Info) -->
	html(span(class('pred-summary'), Info.get(summary))).



token_predicate_module(Token, Module) :-
	source_file_property(Token.get(file), module(Module)), !.


predicate_info(PI, Info) :-
	PI = Module:Name/Arity,
	findall(Dict,
		( setof(Key-Value,
			predicate_info(PI, Key, Value),
			Pairs),
		  dict_pairs(Dict, json,
			     [ module - Module,
			       name   - Name,
			       arity  - Arity
			     | Pairs
			     ])
		),
		Info).


					predicate_info(Module:Name/Arity, Key, Value) :-
	functor(Head, Name, Arity),
	predicate_property(system:Head, iso), !,
	ignore(Module = system),
	(   catch(predicate(Name, Arity, Summary, _, _), _, fail),
	    Key = summary,
	    Value = Summary
	;   Key = iso,
	    Value = true
	).
predicate_info(_Module:Name/Arity, summary, Summary) :-
	catch(predicate(Name, Arity, Summary, _, _), _, fail), !.
predicate_info(PI, summary, Summary) :-		prolog:predicate_summary(PI, Summary).


:- module(swish_include,
	  [
	  ]).
:- use_module(gitty).
:- use_module(library(sandbox), []).
:- use_module(library(debug)).
:- use_module(library(settings)).




swish:term_expansion(:- include(FileIn), Expansion) :-
	atomic(FileIn),
	atom_string(File, FileIn),
	(   prolog_load_context(module, Module),
	    clause(Module:'swish included'(File), true)
	->  Expansion = []
	;   Expansion = [ (:- discontiguous('swish included'/1)),
		          'swish included'(File),
		          (:- include(stream(Id, Stream, [close(true)])))
			],
	    setting(web_storage:directory, Store),
	    add_extension(File, FileExt),
	    catch(gitty_data(Store, FileExt, Data, _Meta), _, fail),
	    atom_concat('swish://', FileExt, Id),
	    open_string(Data, Stream)
	).

add_extension(File, FileExt) :-
	file_name_extension(_, Ext, File),
	Ext \== '', !,
	FileExt = File.
add_extension(Hash, Hash) :-
	is_hash(Hash), !.
add_extension(File, FileExt) :-
	file_name_extension(File, pl, FileExt).

is_hash(Name) :-
	atom_length(Name, 40),
	split_string(Name, ":", "0123456789abcdef", [""]).


		 

:- multifile
	sandbox:safe_directive/1.

sandbox:safe_directive(M:include(stream(Id, Stream, [close(true)]))) :-
	is_stream(Stream),
	sub_atom(Id, 0, _, _, 'swish://'),
	prolog_load_context(module, M).


		 

:- multifile
	prolog_colour:term_colours/2.

prolog_colour:term_colours((:- include(File)),
			   neck(directive) -
			   [ goal(built_in,include(File)) -
			     [ FileClass
			     ]
			   ]) :-
	debug(include, 'Classifying ~p', [File]),
	(   atomic(File),
	    setting(web_storage:directory, Store),
	    add_extension(File, FileExt),
	    catch(gitty_commit(Store, FileExt, _Meta), _, fail)
	->  atom_concat('swish://', FileExt, Id),
	    FileClass = file(Id)
	;   FileClass = nofile
	),
	debug(include, 'Class ~p', [FileClass]).


		 

:- multifile
	prolog:xref_open_source/2,
	prolog:xref_source_file/3.

prolog:xref_open_source(File, Stream) :-
	atom_concat('swish://', Name, File),
	setting(web_storage:directory, Store),
	catch(gitty_data(Store, Name, Data, _Meta), _, fail),
	open_string(Data, Stream).

prolog:xref_source_file(stream(Id, _Stream, [close(true)]), Id, _).



:- module(swish_jquery,
	  [ jquery/3				  ]).
:- use_module(library(error)).
:- use_module(library(pengines)).




jquery(Selector, Function, Reply) :-
	map_selector(Selector, Selector1),
	compound_name_arguments(Function, Method, Args),
	pengine_input(_{ type: "jQuery",
			 selector: Selector1,
			 method: Method,
			 arguments: Args
		       },
		      Reply).

map_selector(Selector, Selector) :-
	string(Selector), !.
map_selector(Selector, Selector) :-
	atom(Selector), !.
map_selector(Selector, json{root:Name, sub:SubSelector}) :-
	compound_name_arguments(Selector, Name, Args),
	root_selector(Name),
	(   Args == []
	->  SubSelector = ""
	;   Args = [SubSelector]
	->  must_be(string, SubSelector)
	;   domain_error(arity_one, Selector)
	).

root_selector(this) :- !.
root_selector(swish) :- !.
root_selector(Selector) :-
	domain_error(root_selector, Selector).


:- module(swish_logging,
	  [
	  ]).
:- use_module(library(http/http_log)).
:- use_module(library(broadcast)).
:- use_module(library(settings)).
:- use_module(library(apply)).



:- setting(swish:logging, boolean, true,
	   "Enable/disable logging of SWISH query execution").

:- listen(pengine(Action), swish_log(Action)).

swish_log(create(Pengine, Application, Options0)) :-
	maplist(hash_option, Options0, Options),
	get_time(Now),
	format_time(string(HDate), '	http_log(' pengine(~3f, ~q).~n',
		 [HDate, Now, create(Pengine, Application, Options)]).
swish_log(send(Pengine, Event)) :-
	get_time(Now),
	format_time(string(HDate), '	http_log(' pengine(~3f, ~q).~n',
		 [HDate, Now, send(Pengine, Event)]).

:- dynamic
	text_hash/2.

hash_option(src_text(Text), src_text(Result)) :- !,
	(   text_hash(Text, Hash)
	->  Result = Hash
	;   variant_sha1(Text, Hash),
	    assert(text_hash(Text, Hash)),
	    Result = Hash-Text
	).
hash_option(Option, Option).


:- module(swish_markdown, []).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/http_parameters)).
:- use_module(library(http/http_client)).
:- use_module(library(http/html_write)).
:- use_module(library(http/html_head)).
:- use_module(library(pldoc/doc_html),
	      except([ file//2
		     ])).
:- use_module(library(pldoc/doc_wiki)).
:- use_module(library(option)).
:- use_module(library(filesex)).

:- use_module(storage).
:- use_module(config).



:- http_handler(swish(markdown), markdown, [id(markdown)]).


markdown(Request) :-
	option(method(get), Request), !,
        http_parameters(Request,
                        [ text(Data, [optional(true), default('')])
                        ]),
        atom_codes(Data, Codes),
        wiki_file_codes_to_dom(Codes, '/', DOM),         phrase(html(DOM), Tokens),
        format('Content-type: text/html; charset=UTF-8\n\n'),
        print_html(Tokens).
markdown(Request) :-
	option(method(post), Request), !,
	http_read_data(Request, Codes, [to(codes)]),
	wiki_file_codes_to_dom(Codes, '/', DOM),
	phrase(html(DOM), Tokens),
        format('Content-type: text/html; charset=UTF-8\n\n'),
        print_html(Tokens).


wiki_file_codes_to_dom(String, File, DOM) :-
        (   nb_current(pldoc_file, OrgFile)
        ->  setup_call_cleanup(
                b_setval(pldoc_file, File),
                wiki_codes_to_dom(String, [], DOM),
                b_setval(pldoc_file, OrgFile))
        ;   setup_call_cleanup(
                b_setval(pldoc_file, File),
                wiki_codes_to_dom(String, [], DOM),
                nb_delete(pldoc_file))
        ).


		 

:- multifile
	prolog:doc_autolink_extension/2.

prolog:doc_autolink_extension(swinb, notebook).

:- public
	file//2.


:- multifile
	swish_config:source_alias/2.

file(File, Options) -->
	{ once(sub_atom(File, Pre, _, _Post, /)),
	  sub_atom(File, 0, Pre, _, Alias),
	  swish_config:source_alias(Alias, _Options),
	  option(label(Label), Options),
	  http_location_by_id(swish, Swish),
	  directory_file_path(Swish, File, HREF)
	}, !,
	html(a([class([alias,file]), href(HREF)], Label)).
file(File, Options) -->
	{ storage_file(File),
	  option(label(Label), Options),
	  http_location_by_id(swish, Swish),
	  directory_file_path(Swish, p, StoreDir),
	  directory_file_path(StoreDir, File, HREF)
	}, !,
	html(a([class(store), href(HREF)], Label)).
file(File, Options) -->
	pldoc_html:file(File, Options).



:- module(swish_page,
	  [ swish_reply/2,				    swish_page//1,			
	    swish_navbar//1,				    swish_content//1,			
	    swish_resources//0,
	    swish_js//0,
	    swish_css//0
	  ]).
:- use_module(library(http/http_open)).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/http_parameters)).
:- use_module(library(http/http_header)).
:- use_module(library(http/html_write)).
:- use_module(library(http/js_write)).
:- use_module(library(http/json)).
:- use_module(library(http/http_json)).
:- use_module(library(http/http_path)).
:- if(exists_source(library(http/http_ssl_plugin))).
:- use_module(library(http/http_ssl_plugin)).
:- endif.
:- use_module(library(debug)).
:- use_module(library(time)).
:- use_module(library(lists)).
:- use_module(library(option)).
:- use_module(library(uri)).
:- use_module(library(error)).
:- use_module(library(http/http_client)).

:- use_module(config).
:- use_module(help).
:- use_module(form).
:- use_module(search).



http:location(pldoc, swish(pldoc), [priority(100)]).

:- http_handler(swish(.), swish_reply([]), [id(swish), prefix]).

:- multifile
	swish_config:source_alias/2,
	swish_config:reply_page/1,
	swish_config:verify_write_access/3, 	swish_config:authenticate/2.	    

swish_reply(_Options, Request) :-
	swish_config:authenticate(Request, _User), 	fail.
swish_reply(Options, Request) :-
	option(method(Method), Request),
	Method \== get, !,
	swish_rest_reply(Method, Request, Options).
swish_reply(_, Request) :-
	serve_resource(Request), !.
swish_reply(_, Request) :-
	swish_reply_config(Request), !.
swish_reply(SwishOptions, Request) :-
	Params = [ code(_,	 [optional(true)]),
		   background(_, [optional(true)]),
		   examples(_,   [optional(true)]),
		   q(_,          [optional(true)]),
		   format(_,     [oneof([swish,raw,json]), default(swish)])
		 ],
	http_parameters(Request, Params),
	params_options(Params, Options0),
	merge_options(Options0, SwishOptions, Options1),
	source_option(Request, Options1, Options2),
	option(format(Format), Options2),
	swish_reply2(Format, Options2).

swish_reply2(raw, Options) :-
	option(code(Code), Options), !,
	format('Content-type: text/x-prolog~n~n'),
	format('~s', [Code]).
swish_reply2(json, Options) :-
	option(code(Code), Options), !,
	option(meta(Meta), Options, _{}),
	reply_json_dict(json{data:Code, meta:Meta}).
swish_reply2(_, Options) :-
	swish_config:reply_page(Options), !.
swish_reply2(_, Options) :-
	reply_html_page(
	    swish(main),
	    [ title('SWISH -- SWI-Prolog for SHaring'),
	      link([ rel('shortcut icon'),
		     href('/icons/favicon.ico')
		   ]),
	      link([ rel('apple-touch-icon'),
		     href('/icons/swish-touch-icon.png')
		   ])
	    ],
	    \swish_page(Options)).

params_options([], []).
params_options([H0|T0], [H|T]) :-
	arg(1, H0, Value), nonvar(Value), !,
	functor(H0, Name, _),
	H =.. [Name,Value],
	params_options(T0, T).
params_options([_|T0], T) :-
	params_options(T0, T).



source_option(_Request, Options0, Options) :-
	option(code(Code), Options0),
	option(format(swish), Options0), !,
	(   uri_is_global(Code)
	->  Options = [url(Code),st_type(external)|Options0]
	;   Options = Options0
	).
source_option(Request, Options0, Options) :-
	source_file(Request, File, Options0), !,
	option(path(Path), Request),
	(   source_data(File, String, Options1)
	->  append([ [code(String), url(Path), st_type(filesys)],
		     Options1,
		     Options0
		   ], Options)
	;   http_404([], Request)
	).
source_option(_, Options, Options).


source_file(Request, File, Options) :-
	option(path_info(PathInfo), Request), !,
	PathInfo \== 'index.html',
	(   path_info_file(PathInfo, File, Options)
	->  true
	;   http_404([], Request)
	).

path_info_file(PathInfo, Path, Options) :-
	sub_atom(PathInfo, B, _, A, /),
	sub_atom(PathInfo, 0, B, _, Alias),
	sub_atom(PathInfo, _, A, 0, File),
	catch(swish_config:source_alias(Alias, AliasOptions), E,
	      (print_message(warning, E), fail)),
	Spec =.. [Alias,File],
	http_safe_file(Spec, []),
	absolute_file_name(Spec, Path,
			   [ access(read),
			     file_errors(fail)
			   ]),
	confirm_access(Path, AliasOptions), !,
	option(alias(Alias), Options, _).

source_data(Path, Code, [title(Title), type(Ext), meta(Meta)]) :-
	setup_call_cleanup(
	    open(Path, read, In, [encoding(utf8)]),
	    read_string(In, _, Code),
	    close(In)),
	source_metadata(Path, Code, Meta),
	file_base_name(Path, File),
	file_name_extension(Title, Ext, File).


source_metadata(Path, Code, Meta) :-
	findall(Name-Value, source_metadata(Path, Code, Name, Value), Pairs),
	dict_pairs(Meta, meta, Pairs).

source_metadata(Path, _Code, path, Path).
source_metadata(Path, _Code, last_modified, Modified) :-
	time_file(Path, Modified).
source_metadata(Path, _Code, loaded, true) :-
	source_file(Path).
source_metadata(Path, _Code, modified_since_loaded, true) :-
	source_file_property(Path, modified(ModifiedWhenLoaded)),
	time_file(Path, Modified),
	ModifiedWhenLoaded \== Modified.
source_metadata(Path, _Code, module, Module) :-
	file_name_extension(_, Ext, Path),
	prolog_file_type(Ext, prolog),
	xref_public_list(Path, _, [module(Module)]).

confirm_access(Path, Options) :-
	option(if(Condition), Options), !,
	must_be(oneof([loaded]), Condition),
	eval_condition(Condition, Path).
confirm_access(_, _).

eval_condition(loaded, Path) :-
	source_file(Path).


serve_resource(Request) :-
	option(path_info(Info), Request),
	resource_prefix(Prefix),
	sub_atom(Info, 0, _, _, Prefix), !,
	http_reply_file(swish_web(Info), [], Request).

resource_prefix('css/').
resource_prefix('help/').
resource_prefix('form/').
resource_prefix('icons/').
resource_prefix('js/').
resource_prefix('bower_components/').


swish_page(Options) -->
	swish_navbar(Options),
	swish_content(Options).


swish_navbar(Options) -->
	swish_resources,
	html(nav([ class([navbar, 'navbar-default']),
		   role(navigation)
		 ],
		 [ div(class('navbar-header'),
		       [ \collapsed_button,
			 \swish_logos(Options)
		       ]),
		   div([ class([collapse, 'navbar-collapse']),
			 id(navbar)
		       ],
		       [ ul([class([nav, 'navbar-nav'])], []),
			 \search_form(Options)
		       ])
		 ])).

collapsed_button -->
	html(button([type(button),
		     class('navbar-toggle'),
		     'data-toggle'(collapse),
		     'data-target'('#navbar')
		    ],
		    [ span(class('sr-only'), 'Toggle navigation'),
		      span(class('icon-bar'), []),
		      span(class('icon-bar'), []),
		      span(class('icon-bar'), [])
		    ])).

swish_logos(Options) -->
	pengine_logo(Options),
	swish_logo(Options).

pengine_logo(_Options) -->
	{ http_absolute_location(root(.), HREF, [])
	},
	html(a([href(HREF), class('pengine-logo')], &(nbsp))).
swish_logo(_Options) -->
	{ http_absolute_location(swish(.), HREF, [])
	},
	html(a([href(HREF), class('swish-logo')], &(nbsp))).


search_form(Options) -->
	html(div(class(['col-sm-3', 'col-md-3', 'pull-right']),
		 \search_box(Options))).



swish_content(Options) -->
	{ document_type(Type, Options)
	},
	swish_resources,
	swish_config_hash,
	html(div([id(content), class([container, swish])],
		 [ div([class([tile, horizontal]), 'data-split'('50		       [ div([ class([editors, tabbed])
			     ],
			     [ \source(Type, Options),
			       \notebooks(Type, Options)
			     ]),
			 div([class([tile, vertical]), 'data-split'('70			     [ div(class('prolog-runners'), []),
			       div(class('prolog-query'), \query(Options))
			     ])
		       ]),
		   \background(Options),
		   \examples(Options)
		 ])).



swish_config_hash -->
	{ swish_config_hash(Hash) },
	js_script({|javascript(Hash)||
		   window.swish = window.swish||{};
		   window.swish.config_hash = Hash;
		   |}).



source(pl, Options) -->
	{ option(code(Spec), Options), !,
	  download_source(Spec, Source, Options),
	  phrase(source_data_attrs(Options), Extra)
	},
	html(div([ class(['prolog-editor']),
		   'data-label'('Program')
		 ],
		 [ textarea([ class([source,prolog]),
			      style('display:none')
			    | Extra
			    ],
			    Source)
		 ])).
source(_, _) --> [].

source_data_attrs(Options) -->
	(source_file_data(Options) -> [] ; []),
	(source_url_data(Options) -> [] ; []),
	(source_title_data(Options) -> [] ; []),
	(source_meta_data(Options) -> [] ; []),
	(source_st_type_data(Options) -> [] ; []).

source_file_data(Options) -->
	{ option(file(File), Options) },
	['data-file'(File)].
source_url_data(Options) -->
	{ option(url(URL), Options) },
	['data-url'(URL)].
source_title_data(Options) -->
	{ option(title(File), Options) },
	['data-title'(File)].
source_st_type_data(Options) -->
	{ option(st_type(Type), Options) },
	['data-st_type'(Type)].
source_meta_data(Options) -->
	{ option(meta(Meta), Options), !,
	  atom_json_dict(Text, Meta, [])
	},
	['data-meta'(Text)].


background(Options) -->
	{ option(background(Spec), Options), !,
	  download_source(Spec, Source, Options)
	},
	html(textarea([ class([source,prolog,background]),
			style('display:none')
		      ],
		      Source)).
background(_) --> [].


examples(Options) -->
	{ option(examples(Examples), Options), !
	},
	html(textarea([ class([examples,prolog]),
			style('display:none')
		      ],
		      Examples)).
examples(_) --> [].


query(Options) -->
	{ option(q(Query), Options)
	}, !,
	html(textarea([ class([query,prolog]),
			style('display:none')
		      ],
		      Query)).
query(_) --> [].


notebooks(swinb, Options) -->
	{ option(code(Spec), Options),
	  download_source(Spec, NoteBookText, Options),
	  phrase(source_data_attrs(Options), Extra)
	},
	html(div([ class('notebook'),
		   'data-label'('Notebook')				 ],
		 [ pre([ class('notebook-data'),
			 style('display:none')
		       | Extra
		       ],
		       NoteBookText)
		 ])).
notebooks(_, _) --> [].


download_source(HREF, Source, Options) :-
	uri_is_global(HREF), !,
	option(timeout(TMO), Options, 10),
	option(max_length(MaxLen), Options, 1_000_000),
	catch(call_with_time_limit(
		  TMO,
		  setup_call_cleanup(
		      http_open(HREF, In,
				[ cert_verify_hook(cert_accept_any)
				]),
		      read_source(In, MaxLen, Source, Options),
		      close(In))),
	      E, load_error(E, Source)).
download_source(Source0, Source, Options) :-
	option(max_length(MaxLen), Options, 1_000_000),
	string_length(Source0, Len),
	(   Len =< MaxLen
	->  Source = Source0
	;   format(string(Source),
		   '	).

read_source(In, MaxLen, Source, Options) :-
	option(encoding(Enc), Options, utf8),
	set_stream(In, encoding(Enc)),
	ReadMax is MaxLen + 1,
	read_string(In, ReadMax, Source0),
	string_length(Source0, Len),
	(   Len =< MaxLen
	->  Source = Source0
	;   format(string(Source),
		   ' 	).

load_error(E, Source) :-
	message_to_string(E, String),
	format(string(Source), '

document_type(Type, Options) :-
	(   option(type(Type0), Options)
	->  Type = Type0
	;   option(meta(Meta), Options),
	    file_name_extension(_, Type0, Meta.name),
	    Type0 \== ''
	->  Type = Type0
	;   Type = pl
	).


		 


swish_resources -->
	swish_css,
	swish_js.

swish_js  --> html_post(head, \include_swish_js).
swish_css --> html_post(head, \include_swish_css).

include_swish_js -->
	{ swish_resource(js, JS),
	  swish_resource(rjs, RJS),
	  http_absolute_location(swish(js/JS), SwishJS, []),
	  http_absolute_location(swish(RJS),   SwishRJS, [])
	},
	rjs_timeout(JS),
	html(script([ src(SwishRJS),
		      'data-main'(SwishJS)
		    ], [])).

rjs_timeout('swish-min') --> !,
	js_script({|javascript||
// Override RequireJS timeout, until main file is loaded.
window.require = { waitSeconds: 0 };
		  |}).
rjs_timeout(_) --> [].


include_swish_css -->
	{ swish_resource(css, CSS),
	  http_absolute_location(swish(css/CSS), SwishCSS, [])
	},
	html(link([ rel(stylesheet),
		    href(SwishCSS)
		  ])).

swish_resource(Type, ID) :-
	alt(Type, ID, File),
	(   File == (-)
	;   absolute_file_name(File, _P, [file_errors(fail), access(read)])
	), !.

alt(js,  'swish-min',     swish_web('js/swish-min.js')) :-
	\+ debugging(nominified).
alt(js,  'swish',         swish_web('js/swish.js')).
alt(css, 'swish-min.css', swish_web('css/swish-min.css')) :-
	\+ debugging(nominified).
alt(css, 'swish.css',     swish_web('css/swish.css')).
alt(rjs, 'js/require.js', swish_web('js/require.js')) :-
	\+ debugging(nominified).
alt(rjs, 'bower_components/requirejs/require.js', -).


		 


swish_rest_reply(put, Request, Options) :-
	merge_options(Options, [alias(_)], Options1),
	source_file(Request, File, Options1), !,
	option(content_type(String), Request),
	http_parse_header_value(content_type, String, Type),
	read_data(Type, Request, Data, _Meta),
	verify_write_access(Request, File, Options1),
	setup_call_cleanup(
	    open(File, write, Out),
	    format(Out, '~s', [Data]),
	    close(Out)),
	reply_json_dict(true).

read_data(media(Type,_), Request, Data, Meta) :-
	http_json:json_type(Type), !,
	http_read_json_dict(Request, Dict),
	del_dict(data, Dict, Data, Meta).
read_data(media(text/_,_), Request, Data, _{}) :-
	http_read_data(Request, Data, [to(string)]).


verify_write_access(Request, File, Options) :-
	swish_config:verify_write_access(Request, File, Options), !.
verify_write_access(Request, _File, _Options) :-
	option(path(Path), Request),
	throw(http_reply(forbidden(Path))).


:- module(procps,
	  [ procps_stat/1,			    procps_stat/2,			    procps_thread_stat/2,		    procps_status/1,			    procps_status/2			  ]).
:- if(exists_source(library(unix))).
:- use_module(library(unix)).
:- endif.

		 

procps_stat(Stat) :-
	current_prolog_flag(pid, Pid),
	procps_stat(Pid, Stat).
procps_stat(Pid, Stat) :-
	atomic_list_concat(['/proc/', Pid, '/stat'], StatFile),
	stat_file_dict(StatFile, Stat).

procps_thread_stat(Thread, Stat) :-
	current_prolog_flag(pid, Pid),
	thread_property(Thread, system_thread_id(TID)),
	atomic_list_concat(['/proc/', Pid, '/task/', TID, '/stat'], StatFile),
	stat_file_dict(StatFile, Stat).

stat_file_dict(StatFile, Stat) :-
	setup_call_cleanup(
	    open(StatFile, read, In),
	    read_string(In, _, String),
	    close(In)),
	split_string(String, " ", " \n", Parts),
	parts_pairs(Parts, 1, Pairs),
	dict_pairs(Stat, stat, Pairs).

parts_pairs([], _, []).
parts_pairs([H0|T0], I0, [H|T]) :-
	part_pair(H0, I0, H),
	I is I0+1,
	parts_pairs(T0, I, T).

part_pair(String, I, Key-Value) :-
	stat_field(Key, I), !,
	stat_field_value(Key, String, Value).
part_pair(String, I, I-String).

stat_field_value(comm, String, Command) :- !,
	sub_string(String, 1, _, 1, Command).
stat_field_value(state, String, Atom) :- !,
	atom_string(Atom, String).
stat_field_value(Field, String, Seconds) :-
	time_field(Field), !,
	number_string(ClockTicks, String),
	clockticks(TicksPerSec),
	Seconds is ClockTicks/TicksPerSec.
stat_field_value(Field, String, Bytes) :-
	page_field(Field), !,
	number_string(Pages, String),
	pagesize(BytesPerPage),
	Bytes is Pages*BytesPerPage.
stat_field_value(_, String, Number) :-
	number_string(Number, String).

:- if(current_predicate(sysconf/1)).
term_expansion(clockticks(sysconf), Expansion) :-
	(   member(Sysconf, [sysconf(clk_tck(TicksPerSec))]),
	    call(Sysconf)
	->  Expansion = clockticks(TicksPerSec)
	;   Expansion = clockticks(100)
	).
term_expansion(pagesize(sysconf), Expansion) :-
	(   member(Sysconf, [sysconf(pagesize(Bytes))]),
	    call(Sysconf)
	->  Expansion = pagesize(Bytes)
	;   Expansion = pagesize(4096)
	).
clockticks(sysconf).
pagesize(sysconf).
:- else.
clockticks(100).
pagesize(4096).
:- endif.

time_field(utime).
time_field(stime).
time_field(cutime).
time_field(cstime).
time_field(starttime).

page_field(rss).

stat_field(pid,			  1).
stat_field(comm,		  2).
stat_field(state,		  3).
stat_field(ppid,		  4).
stat_field(pgrp,		  5).
stat_field(session,		  6).
stat_field(tty_nr,		  7).
stat_field(tpgid,		  8).
stat_field(flags,		  9).
stat_field(minflt,		  10).
stat_field(cminflt,		  11).
stat_field(majflt,		  12).
stat_field(cmajflt,		  13).
stat_field(utime,		  14).
stat_field(stime,		  15).
stat_field(cutime,		  16).
stat_field(cstime,		  17).
stat_field(priority,		  18).
stat_field(nice,		  19).
stat_field(num_threads,		  20).
stat_field(itrealvalue,		  21).
stat_field(starttime,		  22).
stat_field(vsize,		  23).
stat_field(rss,			  24).
stat_field(rsslim,		  25).
stat_field(startcode,		  26).
stat_field(endcode,		  27).
stat_field(startstack,		  28).
stat_field(kstkesp,		  29).
stat_field(kstkeip,		  30).
stat_field(signal,		  31).
stat_field(blocked,		  32).
stat_field(sigignore,		  33).
stat_field(sigcatch,		  34).
stat_field(wchan,		  35).
stat_field(nswap,		  36).
stat_field(cnswap,		  37).
stat_field(exit_signal,		  38).
stat_field(processor,		  39).
stat_field(rt_priority,		  40).
stat_field(policy,		  41).
stat_field(delayacct_blkio_ticks, 42).
stat_field(guest_time,		  43).
stat_field(cguest_time,		  44).


		 

procps_status(Stat) :-
	current_prolog_flag(pid, Pid),
	procps_status(Pid, Stat).
procps_status(Pid, Stat) :-
	atomic_list_concat(['/proc/', Pid, '/status'], StatFile),
	status_file_dict(StatFile, Stat).

status_file_dict(StatFile, Status) :-
	setup_call_cleanup(
	    open(StatFile, read, In),
	    read_string(In, _, String),
	    close(In)),
	split_string(String, "\n", " \n", Lines),
	status_line_pairs(Lines, Pairs),
	dict_pairs(Status, status, Pairs).

status_line_pairs([], []).
status_line_pairs([H0|T0], [Name-Value|T]) :-
	split_string(H0, ":", " \t", [NameS, ValueS]),
	string_lower(NameS, NameLS),
	atom_string(Name, NameLS),
	status_value(Name, ValueS, Value), !,
	status_line_pairs(T0, T).
status_line_pairs([_|T0], T) :-
	status_line_pairs(T0, T).

status_value(state, ValueS, State) :- !,
	split_string(ValueS, " ", " ", [Vs|_]),
	atom_string(State, Vs).
status_value(Name, ValueS, Bytes) :-
	sub_atom(Name, 0, _, _, vm), !,
	split_string(ValueS, " ", " ", [Vs,"kB"]),
	number_string(Kb, Vs),
	Bytes is Kb*1024.


:- module(swish_render_c3,
	  [ term_rendering//3				  ]).
:- use_module(library(apply)).
:- use_module(library(lists)).
:- use_module(library(gensym)).
:- use_module(library(error)).
:- use_module(library(dif)).
:- use_module(library(http/html_write)).
:- use_module(library(http/js_write)).
:- if(exists_source(library(dicts))).
:- use_module(library(dicts)).
:- endif.
:- use_module('../render').

:- register_renderer(c3, "Render data as tables").




term_rendering(C30, _Vars, _Options) -->
	{ is_dict(C30, Tag),
	  Tag == c3,
	  valid_c3(C30, C3),
	  gensym('c3js', Id),
	  atom_concat(#, Id, RefId),
	  put_dict(bindto, C3, RefId, C3b)
	},
	html(div([ class(['render-C3', 'reactive-size']),
		   'data-render'('As C3 chart')
		 ],
		 [ div(id(Id), []),
		   \js_script({|javascript(C3b)||
(function() {
  if ( $.ajaxScript ) {
    var div  = $.ajaxScript.parent();
    var data = C3b;
    var chart;
    var sizing = {};
    var tmo;

    div.on("reactive-resize", function() {
      if ( chart ) {
	if ( tmo ) clearTimeout(tmo);
	tmo = setTimeout(function() {
	  if ( updateSize() ) chart.resize(data.size);
	}, 1000);
      }
    });

    function updateSize() {
      data.size = data.size||{};
      var w0 = data.size.width;
      var h0 = data.size.height;

      if ( data.size.width == undefined || sizing.width ) {
	 var w = div.parents("div.answer").innerWidth();
	 data.size.width = Math.max(w*0.85, 100);
	 sizing.width = true;
	 if ( data.size.height == undefined || sizing.height ) {
	   data.size.height = data.size.width/2+50;
	   sizing.height = true;
	 }
      }

      return data.size.width != w0 || data.size.height != h0;
    }

    require(["d3", "c3"], function(d3, c3) {
      updateSize();
      chart = c3.generate(data);
    });
  }
})();
			      |})
		 ])).



valid_c3(C30, C31) :-
	Data0 = C30.data,
	valid_c3_data(Data0, Data),
	(   same_term(Data0, Data)
	->  C31 = C30
	;   C31 = C30.put(data,Data)
	).

valid_c3_data(Data0, Data) :-
	Rows0 = Data0.get(rows), !,
	must_be(acyclic, Rows0),
	rows_to_matrix(Rows0, Rows),
	must_be(list(ground), Rows),
	(   same_term(Rows0, Rows)
	->  Data0 = Data
	;   Data = Data0.put(rows,Rows)
	).
valid_c3_data(Data0, Data) :-
	Columns0 = Data0.get(columns), !,
	must_be(acyclic, Columns0),
	rows_to_matrix(Columns0, Columns),
	must_be(list(ground), Columns),
	(   same_term(Columns0, Columns)
	->  Data0 = Data
	;   Data = Data0.put(columns,Columns)
	).
valid_c3_data(Data, Data) :-
	throw(error(c3_no_data(Data), _)).


:- if(current_predicate(dicts_to_compounds/4)).
rows_to_matrix(Dicts, [Keys|Rows]) :-
	maplist(is_dict, Dicts), !,
	maplist(dict_keys, Dicts, KeysList),
	append(KeysList, Keys0),
	sort(Keys0, Keys),
	dicts_to_compounds(Dicts, Keys, dict_fill(undefined), Compounds),
	maplist(compound_arguments, Compounds, Rows).
:- endif.
rows_to_matrix(Compounds, Rows) :-
	dif(Name/Arity, []/2),			maplist(name_arity_compound(Name, Arity), Compounds, Rows), !.
rows_to_matrix(Lists, Lists) :-
	maplist(length_list(_Columns), Lists).

name_arity_compound(Name, Arity, Compound, Arguments) :-
	compound(Compound),
	compound_name_arity(Compound, Name, Arity),
	compound_name_arguments(Compound, Name, Arguments).

compound_arguments(Compound, Arguments) :-
	compound_name_arguments(Compound, _, Arguments).

length_list(Length, List) :-
	length(List, Length).

:- multifile
	prolog:error_message//1.

prolog:error_message(c3_no_data(C3)) -->
	[ 'C3.data contains no rows nor columns: ~p'-[C3] ].


:- module(swish_render_chess,
	  [ term_rendering//3				  ]).
:- use_module(library(http/html_write)).
:- use_module('../render').

:- register_renderer(chess, "Render chess board representations").




term_rendering(Term, _Vars, _Options) -->
	{ is_nqueens(Term),
	  length(Term, N),
	  LineHeight is 200/N
	},
	html(div([ style('display:inline-block;'+
			 'line-height:'+LineHeight+'px;'+
			 'font-size:'+LineHeight+'px;'
			),
		   'data-render'('Chess board')
		 ],
		 [ table(class('chess-board'),
			 \nqueens(Term, N)),
		   \chess_style
		 ])).

is_nqueens(Term) :-
	is_list(Term),
	length(Term, N),
	numlist(1, N, All),
	sort(Term, All).

nqueens([], _) --> [].
nqueens([H|T], N) -->
	html(tr(\nrow(0, N, H))),
	nqueens(T, N).

nrow(N, N, _) --> !.
nrow(I, N, At) -->
	{ I2 is I+1 },
	(   { I2 == At }
	->  html(td(&('#9819')))
	;   html(td([]))
	),
	nrow(I2, N, At).


chess_style -->
	html({|html||
<style>
.chess-board {
  border:2px solid #333; width:200px; height:200px;
}
.chess-board td {
  background:#fff;
  background:-moz-linear-gradient(top, #fff, #eee);
  background:-webkit-gradient(linear,0 0, 0 100  box-shadow:inset 0 0 0 1px #fff;
  -moz-box-shadow:inset 0 0 0 1px #fff;
  -webkit-box-shadow:inset 0 0 0 1px #fff;
  text-align:center;
  vertical-align:middle;
}
.chess-board tr:nth-child(odd) td:nth-child(even),
.chess-board tr:nth-child(even) td:nth-child(odd) {
  background:#ccc;
  background:-moz-linear-gradient(top, #ccc, #eee);
  background:-webkit-gradient(linear,0 0, 0 100  box-shadow:inset 0 0 10px rgba(0,0,0,.4);
  -moz-box-shadow:inset 0 0 10px rgba(0,0,0,.4);
  -webkit-box-shadow:inset 0 0 10px rgba(0,0,0,.4);
}
</style>
	     |}).


:- module(swish_render_codes,
	  [ term_rendering//3				  ]).
:- use_module(library(option)).
:- use_module(library(http/html_write)).
:- use_module('../render').

:- register_renderer(codes, "Render a list of character codes").




term_rendering(Codes, _Vars, Options) -->
	{ is_code_list(Codes, Len, Options)
	},
	(   { option(ellipsis(Ellipsis), Options, 30),
	      Len > Ellipsis
	    }
	->  { First is Ellipsis - 5,
	      Skip is Len - 5,
	      skip_first(Skip, Codes, Rest),
	      phrase(put_n_codes(First, Codes), PrefixCodes),
	      phrase(put_codes(Rest), PostfixCodes),
	      string_codes(Prefix, PrefixCodes),
	      string_codes(Postfix, PostfixCodes)
	    },
	    html(span([ 'data-render'('Truncated list of codes as a string'),
			class('render-code-list'),
			title('Code list of length: '+Len)
		      ],
		      [ '`~s'-[Prefix],
			span(class('render-ellipsis'), ...),
			'~s`'-[Postfix]
		      ]))
	;   { phrase(put_codes(Codes), TextCodes),
	      string_codes(String, TextCodes)
	    },
	    html(span([ 'data-render'('List of codes as a string'),
			class('render-code-list')
		      ],
		  '`~s`'-String))
	).

skip_first(N, [_|T0], T) :-
	succ(N2, N), !,
	skip_first(N2, T0, T).
skip_first(_, L, L).

put_n_codes(N, [H|T]) -->
	{ succ(N2, N) }, !,
	emit_code(H),
	put_n_codes(N2, T).
put_n_codes(_, _) --> [].

put_codes(Var) -->
	{ var_or_numbered(Var) }, !,
	dcg_format('|~p', [Var]).
put_codes([]) --> [].
put_codes([H|T]) -->
	emit_code(H),
	put_codes(T).

emit_code(0'\b) --> !, "\\b".
emit_code(0'\r) --> !, "\\r".
emit_code(0'\n) --> !, "\\n".
emit_code(0'\t) --> !, "\\t".
emit_code(C)	--> [C].

dcg_format(Fmt, Args, List, Tail) :-
	format(codes(List, Tail), Fmt, Args).


is_code_list(Codes, Length, Options) :-
	'$skip_list'(Length, Codes, Tail),
	code_list_tail(Tail, Options),
	option(min_length(MinLen), Options, 3),
	Length >= MinLen,
	option(charset(Charset), Options, ascii),
	all_codes(Codes, Charset).

code_list_tail([], _) :- !.
code_list_tail(Var, Options) :-
	var_or_numbered(Var),
	option(partial(true), Options, true).

var_or_numbered(Var) :-
	var(Var), !.
var_or_numbered('$VAR'(_)).

all_codes(Var, _) :-
	var_or_numbered(Var), !.
all_codes([], _).
all_codes([H|T], Charset) :-
	integer(H),
	is_code(H, Charset), !,
	all_codes(T, Charset).

is_code(9,  _).
is_code(10, _).
is_code(13, _).
is_code(C, Charset) :-
	charset_code(Charset, C).

charset_code(ascii,       C) :- between(32,126,C).
charset_code(iso_latin_1, C) :- between(32,126,C) ; between(160,255,C).


:- module(swish_render_graphviz,
	  [ term_rendering//3				  ]).
:- use_module(library(http/html_write)).
:- use_module(library(http/js_write)).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/http_parameters)).
:- use_module(library(http/http_path)).
:- use_module(library(process)).
:- use_module(library(sgml)).
:- use_module(library(debug)).
:- use_module(library(option)).
:- use_module(library(dcg/basics)).
:- use_module('../render').

:- register_renderer(graphviz, "Render data using graphviz").



:- http_handler(swish(graphviz), swish_send_graphviz, []).

:- dynamic
	dot_data/3.				

term_rendering(Data, Vars, Options) -->
	{ debug(graphviz(vars), 'Data: ~q, vars: ~p', [Data, Vars]),
	  data_to_graphviz_string(Data, DOTString, Program)
	},
	render_dot(DOTString, Program, Options).


render_dot(_DOTString, Program, _Options) -->
	{ \+ has_graphviz_renderer(Program) }, !,
	no_graph_viz(Program).
render_dot(DOTString, Program, Options) -->		{ option(svg(object), Options, inline), !,
          variant_sha1(DOTString, Hash),
	  get_time(Now),
	  assert(dot_data(Hash,
			  _{ program: Program,
			     dot: DOTString
			   }, Now)),
	  remove_old_data(Now),
	  http_link_to_id(swish_send_graphviz,
			  [ hash(Hash),
			    lang(svg),
			    target('_top')
			  ], HREF),
	  Attrs = []					}, !,
	html([ object([ data(HREF),
			type('image/svg+xml')
		      | Attrs
		      ],
		      [])
	     ]).
render_dot(DOTString, Program, _Options) -->		{ graphviz_stream(_{program:Program, dot:DOTString},
			  PID, XDotOut, ErrorOut),
	  call_cleanup((   read_string(XDotOut, _, SVG),
			   read_string(ErrorOut, _, Error)
		       ),
		       (   process_wait(PID, _Status),
			   close(XDotOut)
		       ))
	},
	(   { Error == "" }
	->  html(div([ class(['render-graphviz', 'reactive-size']),
		       'data-render'('As Graphviz graph')
		     ],
		     [ \[SVG],
		       \js_script({|javascript||
(function() {
   if ( $.ajaxScript ) {
     var div  = $.ajaxScript.parent();
     var svg  = div.find("svg");
     var data = { w0: svg.width(),
		  h0: svg.height()
		};
     var pan;

     function updateSize() {
       var w = svg.closest("div.answer").innerWidth();

       function reactive() {
	 if ( !data.reactive ) {
	   data.reactive = true;
	   div.on("reactive-resize", updateSize);
	 }
       }

       w = Math.max(w*0.85, 100);
       if ( w < data.w0 ) {
	 svg.width(w);
	 svg.height(w = Math.max(w*data.h0/data.w0, w/4));
	 reactive();
	 if ( pan ) {
	   pan.resize();
	   pan.fit();
	   pan.center();
	 }
       }
     }

     require(["svg-pan-zoom"], function(svgPanZoom) {
       updateSize()
       pan = svgPanZoom(svg[0], {
			  // controlIconsEnabled: true
			  maxZoom: 50
			});
    });
   }
 })();
		      |})
		     ]))
	;   html(div(style('color:red;'),
		     [ '~w'-[Program], ': ', Error]))
	).


data_to_graphviz_string(Compound, String, Program) :-
	compound(Compound),
	compound_name_arguments(Compound, Program, [Data]),
	graphviz_program(Program),
	(   atomic(Data)
	->  String = Data
	;   phrase(graph(Data), Codes),
	    string_codes(String, Codes),
	    debug(graphviz, '~s', [String])
	).
data_to_graphviz_string(Compound, String, dot) :-
	compound(Compound),
	compound_name_arity(Compound, Type, Arity),
	graph_type(Type),
	between(1,2,Arity), !,
	phrase(graph(Compound), Codes),
	string_codes(String, Codes),
	debug(graphviz, '~s', [String]).


graphviz_program(dot).
graphviz_program(neato).
graphviz_program(fdp).
graphviz_program(sfdp).
graphviz_program(twopi).
graphviz_program(circo).

graph_type(graph).
graph_type(digraph).


swish_send_graphviz(Request) :-
	http_parameters(Request,
			[ hash(Hash,
			       [ description('Hash-key to the graph-data')
			       ])
			]),
	dot_data(Hash, Data, _),
	graphviz_stream(Data, PID, XDotOut, ErrorOut),
	call_cleanup(( load_structure(stream(XDotOut),
				      SVGDom0,
				      [ dialect(xml) ]),
		       read_string(ErrorOut, _, Error)
		     ),
		     (	 process_wait(PID, _Status),
			 close(XDotOut)
		     )),
	(   Error == ""
	->  true
	;   print_message(error, format('~w', [Error]))
	),
	rewrite_sgv_dom(SVGDom0, SVGDom),
	format('Content-type: ~w~n~n', ['image/svg+xml; charset=UTF-8']),
	xml_write(current_output, SVGDom,
		  [ layout(false)
		  ]).

graphviz_stream(Data, PID, XDotOut, Error) :-
	process_create(path(Data.program), ['-Tsvg'],
		       [ stdin(pipe(ToDOT)),
			 stdout(pipe(XDotOut)),
			 stderr(pipe(Error)),
			 process(PID)
		       ]),
	set_stream(ToDOT, encoding(utf8)),
	set_stream(XDotOut, encoding(utf8)),
	thread_create(send_to_dot(Data.dot, ToDOT), _,
		      [ detached(true) ]).


rewrite_sgv_dom([element(svg, Attrs, Content)],
		[element(svg, Attrs,
			 [ element(script, ['xlink:href'=SVGPan], []),
			   element(g, [ id=viewport
				      ],
				   Content)
			 ])]) :-
	http_absolute_location(js('SVGPan.js'), SVGPan, []).
rewrite_sgv_dom(DOM, DOM).

send_to_dot(Data, Out) :-
	call_cleanup(format(Out, '~s', [Data]),
		     close(Out)), !.


remove_old_data(Time) :-
	(   dot_data(Hash, _, Stamp),
	    Time > Stamp+900,
	    retract(dot_data(Hash, _, Stamp)),
	    fail
	;   true
	).

has_graphviz_renderer(Renderer) :-
	exe_options(ExeOptions),
	absolute_file_name(path(Renderer), _,
			   [ file_errors(fail)
			   | ExeOptions
			   ]).

exe_options(Options) :-
	current_prolog_flag(windows, true), !,
	Options = [ extensions(['',exe,com]), access(read) ].
exe_options(Options) :-
	Options = [ access(execute) ].

no_graph_viz(Renderer) -->
	html(div([ class('no-graph-viz'),
		   style('color:red;')
		 ],
		 [ 'The server does not have the graphviz program ',
		   code(Renderer), ' installed in PATH. ',
		   'See ', a(href('http://www.graphviz.org/'),
			     'http://www.graphviz.org/'), ' for details.'
		 ])).



add_defaults(Statements0, Statements) :-
	\+ memberchk(bgcolor=_, Statements0), !,
	Statements = [bgcolor=transparent|Statements0].
add_defaults(Statements, Statements).


		 

graph(graph(Statements)) -->
	graph(graph([], Statements)).
graph(digraph(Statements)) -->
	graph(digraph([], Statements)).
graph(graph(Options, Statements)) -->
	{graph_options(Options, graph, Ctx)},
	graph(Statements, Ctx).
graph(digraph(Options, Statements)) -->
	{graph_options(Options, digraph, Ctx)},
	graph(Statements, Ctx).

graph_options([], Type,
	      gv{type:Type, indent:2}).
graph_options([strict], Type,
	      gv{strict:true, type:Type, indent:2}).
graph_options([strict, ID], Type,
	      gv{strict:true, id:ID, type:Type, indent:2}).

graph(Statements, Options) -->
	{ add_defaults(Statements, Statements1) },
	strict(Options), keyword(Options.type), ws, graph_id(Options),
	"{", nl,
	statements(Statements1, Options),
	"}", nl.

strict(Options) -->
	{ true == Options.get(strict) }, !,
	keyword(strict).
strict(_Options) --> [].

graph_id(Options) -->
	{ ID = Options.get(id) }, !,
	id(ID), ws.
graph_id(_) --> [].

statements([], _) --> [].
statements([H|T], Options) -->
	indent(Options),
	(   statement(H, Options)
	->  ";", nl
	;   {domain_error(graphviz_statement, H)}
	),
	statements(T, Options).

statement(graph(Attrs), O) --> keyword(graph), ws, attributes(Attrs, O).
statement(edge(Attrs), O) --> keyword(edge), ws, attributes(Attrs, O).
statement(node(Attrs), O) --> keyword(node), ws, attributes(Attrs, O).
statement(node(ID, Attrs), O) --> node(ID, O), ws, attributes(Attrs, O).
statement(edge(Edge, Attrs), O) --> edge(Edge, O), ws, attributes(Attrs, O).
statement(A - B, O) --> edge(A - B, O).
statement(A -> B, O) --> edge(A -> B, O).
statement(Name = Value, O) --> attribute(Name=Value, O).
statement(subgraph(Statements), O) -->
	{ step_indent(O, O1) },
	keyword(subgraph), ws, "{", nl,
	statements(Statements, O1), indent(O), "}".
statement(subgraph(ID, Statements), O) -->
	{ step_indent(O, O1) },
	keyword(subgraph), ws, id(ID), ws, "{", nl,
	statements(Statements, O1), indent(O), "}".

step_indent(O, O2) :-
	I is O.indent+2,
	O2 = O.put(indent, I).

edge((A-B)-C, O)   --> !, edge(A-B, O), edgeop(O), id(C).
edge(A-(B-C), O)   --> !, node(A, O), edgeop(O), edge(B-C, O).
edge(A-B, O)       --> node(A, O), edgeop(O), node(B, O).
edge((A->B)->C, O) --> !, edge(A->B, O), edgeop(O), node(C, O).
edge(A->(B->C), O) --> !, node(A, O), edgeop(O), edge(B->C, O).
edge(A->B, O)      --> node(A, O), edgeop(O), node(B, O).

edgeop(O) --> { graph == O.type }, !, " -- ".
edgeop(_) --> " -> ".

node(ID:Port:Compass, _O) --> !,
	id(ID), ":", id(Port), ":", compass(Compass).
node(ID:Port, _O) --> !,
	id(ID), ":", id(Port).
node(ID, _O) --> !,
	id(ID).

compass(Compass) -->
	{ compass(Compass) },
	atom(Compass).
compass(Compass) -->
	{ domain_error(compass, Compass) }.

compass('_') :- !.	compass(n).
compass(ne).
compass(e).
compass(se).
compass(s).
compass(sw).
compass(w).
compass(nw).
compass(c).

attributes([], _) --> !.
attributes(List, O) --> "[", attribute_list(List, O), "]".

attribute_list([], _) --> [].
attribute_list([H|T], O) -->
	attribute(H, O),
	(   {T == []}
	->  []
	;   ",", attribute_list(T, O)
	).

attribute(Name=Value, _O) -->
	atom(Name),"=",value(Name, Value).
attribute(html(Value), _, List, Tail) :- !,
	format(codes(List,Tail), 'label=<~w>', [Value]).
attribute(NameValue, _O)  -->
	{NameValue =.. [Name,Value]}, !,
	atom(Name),"=",value(Name, Value).

value(Name, Value) -->
	{ string_attribute(Name), !,
	  atom_codes(Value, Codes)
	},
	"\"", cstring(Codes), "\"".
value(_Name, Value, List, Tail) :-
	format(codes(List,Tail), '~w', [Value]).

id(ID) --> { number(ID) }, !, number(ID).
id(ID) --> { atom(ID), !, atom_codes(ID, Codes) }, "\"", cstring(Codes), "\"".
id(ID) --> { string(ID), !, string_codes(ID, Codes) }, "\"", cstring(Codes), "\"".
id(ID) --> { format(codes(Codes), '~p', [ID]) }, "\"", cstring(Codes), "\"".

keyword(Kwd) --> atom(Kwd).
indent(Options) -->
	{ Level = Options.indent },
	spaces(Level).
ws --> " ".
nl --> "\n".

spaces(0) --> !.
spaces(N) -->
	{ succ(N2, N) },
	" ",
	spaces(N2).



		 



string_attribute(label).
string_attribute(url).
string_attribute(href).
string_attribute(id).
string_attribute('URL').
string_attribute(fillcolor).
string_attribute(style).
string_attribute(size).


gv_attr(align,	      table, oneof([center,left,right])).
gv_attr(bgcolor,      table, atom).
gv_attr(border,	      table, atom).
gv_attr(cellborder,   table, atom).
gv_attr(cellpadding,  table, atom).
gv_attr(cellspacing,  table, atom).
gv_attr(color,	      table, atom).
gv_attr(fixedsize,    table, boolean).
gv_attr(height,	      table, atom).
gv_attr(href,	      table, atom).
gv_attr(port,	      table, atom).
gv_attr(target,	      table, atom).
gv_attr(title,	      table, atom).
gv_attr(tooltip,      table, atom).
gv_attr(valign,	      table, oneof([middle,bottom,top])).
gv_attr(width,	      table, atom).

gv_attr(align,	      td,    oneof([center,left,right,text])).
gv_attr(balign,	      td,    oneof([center,left,right])).
gv_attr(bgcolor,      td,    atom).
gv_attr(border,	      td,    atom).
gv_attr(cellpadding,  td,    atom).
gv_attr(cellspacing,  td,    atom).
gv_attr(color,	      td,    atom).
gv_attr(colspan,      td,    integer).
gv_attr(fixedsize,    td,    boolean).
gv_attr(height,	      td,    atom).
gv_attr(href,	      td,    atom).
gv_attr(port,	      td,    atom).
gv_attr(rowspan,      td,    integer).
gv_attr(target,	      td,    atom).
gv_attr(title,	      td,    atom).
gv_attr(tooltip,      td,    atom).
gv_attr(valign,	      td,    oneof([middle,bottom,top])).
gv_attr(width,	      td,    atom).

gv_attr(color,	      font,  atom).
gv_attr(face,	      font,  atom).
gv_attr('point-size', font,  integer).

gv_attr(align,	      br,    oneof([center,left,right])).

gv_attr(scale,	      img,   oneof([false,true,width,height,both])).
gv_attr(src,	      img,   atom).



cstring([]) -->
	[].
cstring([H|T]) -->
	(   cchar(H)
	->  []
	;   [H]
	),
	cstring(T).

cchar(0'") --> "\\\"".
cchar(0'\n) --> "\\n".
cchar(0'\t) --> "\\t".
cchar(0'\b) --> "\\b".


:- module(swish_render_sudoku,
	  [ term_rendering//3				  ]).
:- use_module(library(apply)).
:- use_module(library(http/html_write)).
:- use_module(library(http/term_html)).
:- use_module('../render').

:- register_renderer(sudoku, "Render a sudoku matrix").




term_rendering(Term, _Vars, _Options) -->
	{ is_sudoku(Term)
	}, !,
	html(div([class(sudoku),
		  'data-render'('Sudoku matrix')
		 ],
		 [\rows(Term, 1), \sudoku_style])).

sudoku_style -->
	html({|html||
	      <style>
div.sudoku { vertical-align: top;
	     display:inline-block;
	     border: 3px solid black;
	     width: 220px;
	     height: 220px;
	     font-size: 0;
	   }
div.sudoku-row     { height: 11.11div.sudoku-row.fat { border-bottom: 2px solid black;}
div.sudoku-cell { width: 11.11		  font-size: 12px;
		  font-weight: bold;
		  display: inline-block;
		  box-sizing: border-box;
		  border: 1px solid #888;
		  margin: 0px;
		  text-align: center;
		  vertical-align: middle;
		}
div.sudoku-cell.fat { border-right: 2px solid black;}
	      </style>
	     |}).

rows([], _) --> [].
rows([H|T], I) -->
	{ I2 is I+1,
	  (   (I == 3 ; I == 6)
	  ->  Extra = [fat]
	  ;   Extra = []
	  )
	},
	html(div(class(['sudoku-row'|Extra]), \cells(H, 1))),
	rows(T, I2).

cells([], _) --> [].
cells([H|T], I) -->
	{ I2 is I+1,
	  (   (I == 3 ; I == 6)
	  ->  Extra = [fat]
	  ;   Extra = []
	  )
	},
	html(div(class(['sudoku-cell'|Extra]), \value(H))), cells(T, I2).

value(H) --> { var(H) }, !.
value(H) --> term(H, []).



is_sudoku(Term) :-
	is_list(Term),
	length(Term, 9),
	maplist(is_row, Term).

is_row(Row) :-
	is_list(Row),
	length(Row, 9),
	maplist(is_cell, Row).

is_cell(Var) :- var(Var).
is_cell(I)   :- integer(I), between(1, 9, I).


:- module(swish_svgtree,
	  [ term_rendering//3				  ]).
:- use_module(library(option)).
:- use_module(library(http/html_write)).
:- use_module(library(http/term_html)).
:- use_module(library(http/js_write)).
:- use_module(library(http/http_wrapper)).
:- use_module(library(apply)).
:- use_module(library(lists)).
:- use_module(library(sandbox)).
:- use_module('../render').

:- register_renderer(svgtree, "Render term as a tree").




term_rendering(Term, _Vars, Options) -->
	{ is_term_tree(Term, How, Options),
	  call(How, Term, Dict)
	},
	html(div([ class('render-svg-tree'),
		   'data-render'('Term as SVG tree')
		 ],
		 [ span([]),
		   \js_script({|javascript(Dict)||
(function() {
  if ( $.ajaxScript ) {
    var span = $.ajaxScript.parent().find("span")[0];

    require(["render/svg-tree-drawer", "jquery"], function(svgtree) {
      var tree = new TreeDrawer(span, Dict);
      if ( !tree.filters.label ) {
	tree.addFilter('label', function(label,node) {
	  return typeof(label) == "object" ? $(label.html)[0] : label;
	});
      }
      tree.draw();
    });
  }
})();
		  |})
		 ])).


is_term_tree(Term, filtered_tree(QFilter, Options1), Options) :-
	option(filter(Filter), Options),
	callable(Filter),
	Filter \= _:_,
	option(module(Module), Options),
	QFilter = Module:Filter,
	catch(safe_filter(QFilter), _, fail),
	call(QFilter, Term, _Label, _Children), !,
	browser_option(Options, Options1).
is_term_tree(Term, compound_tree(Options1), Options) :-
	compound(Term),
	(   is_list(Term)
	->  \+ option(list(false), Options)
	;   true
	), !,
	browser_option(Options, Options1).

:- public
	compound_tree/3,
	filtered_tree/4.


compound_tree(Options, Term, Tree) :-
	compound(Term), Term \= '$VAR'(_), !,
	Tree = json{label:Label, children:Children},
	compound_name_arguments(Term, Functor, Args),
	term_string(Functor, Label),
	maplist(compound_tree(Options), Args, Children).
compound_tree(Options, Term, json{label:Label}) :-
	term_label(Term, Label, Options).


term_label(Term, String, Options) :-
	option(engine(trident), Options), !,
	term_string(Term, String, Options).
term_label(Term, json{html:String}, Options) :-
	phrase(term(Term, Options), Tokens),
	with_output_to(string(String), print_html(Tokens)).


:- meta_predicate filtered_tree(3,+,+,-).

filtered_tree(Filter, Options, Term, Tree) :-
	nonvar(Term),
	call(Filter, Term, LabelTerm, ChildNodes),
	is_list(ChildNodes), !,
	Tree = json{label:Label, children:Children},
	term_label(LabelTerm, Label, Options),
	maplist(filtered_tree(Filter, Options), ChildNodes, Children).
filtered_tree(_, Options, Term, json{label:Label}) :-
	term_label(Term, Label, Options).

safe_filter(Module:Filter) :-
	Filter =.. List0,
	append(List0, [_, _, _], List),
	Filter1 =.. List,
	safe_goal(Module:Filter1).


		 

browser_option(Options0, Options) :-
	is_trident, !,
	Options = [engine(trident)|Options0].
browser_option(Options, Options).


is_trident :-
	http_current_request(Request),
	option(user_agent(Agent), Request),
	sub_string(Agent, _, _, _, " Trident/"), !.



:- module(swish_render_table,
	  [ term_rendering//3				  ]).
:- use_module(library(apply)).
:- use_module(library(lists)).
:- use_module(library(option)).
:- use_module(library(http/html_write)).
:- use_module(library(http/term_html)).
:- use_module('../render').

:- register_renderer(table, "Render data as tables").




term_rendering(Term, _Vars, Options) -->
	{ is_list_of_terms(Term, _Rows, _Cols),
	  header(Term, Header, Options)
	}, !,
	html(div([ style('display:inline-block'),
		   'data-render'('List of terms as a table')
		 ],
		 [ table(class('render-table'),
			 [ \header_row(Header),
			   \rows(Term)
			 ])
		 ])).
term_rendering(Term, _Vars, Options) -->
	{ is_list_of_lists(Term, _Rows, _Cols),
	  header(Term, Header, Options)
	}, !,
	html(div([ style('display:inline-block'),
		   'data-render'('List of lists as a table')
		 ],
		 [ table(class('render-table'),
			 [ \header_row(Header),
			   \rows(Term)
			 ])
		 ])).

rows([]) --> [].
rows([H|T]) -->
	{ cells(H, Cells) },
	html(tr(\row(Cells))),
	rows(T).

row([]) --> [].
row([H|T]) -->
	html(td(\term(H, []))),
	row(T).

cells(Row, Cells) :-
	is_list(Row), !,
	Cells = Row.
cells(Row, Cells) :-
	compound(Row),
	compound_name_arguments(Row, _, Cells).


header(_, _, Options) :-
	\+ option(header(_), Options), !.
header([Row|_], ColHead, Options) :-
	member(header(Header), Options),
	generalise(Row, GRow),
	generalise(Header, GRow), !,
	header_list(Header, ColHead).

generalise(List, VList) :-
	is_list(List), !,
	length(List, Len),
	length(VList0, Len),
	VList = VList0.
generalise(Compound, VCompound) :-
	compound(Compound), !,
	compound_name_arity(Compound, Name, Arity),
	compound_name_arity(VCompound0, Name, Arity),
	VCompound = VCompound0.

header_list(List, List) :- is_list(List), !.
header_list(Compound, List) :-
	Compound =.. [_|List].



header_row(ColNames) -->
	{ var(ColNames) }, !.
header_row(ColNames) -->
	html(tr(class(hrow), \header_columns(ColNames))).

header_columns([]) --> [].
header_columns([H|T]) -->
	html(th(\term(H, []))),
	header_columns(T).



is_list_of_terms(Term, Rows, Cols) :-
	is_list(Term), Term \== [],
	length(Term, Rows),
	maplist(is_term_row(_Name, Cols), Term),
	Cols > 0.

is_term_row(Name, Arity, Term) :-
	compound(Term),
	compound_name_arity(Term, Name, Arity).


is_list_of_lists(Term, Rows, Cols) :-
	is_list(Term), Term \== [],
	length(Term, Rows),
	maplist(is_list_row(Cols), Term),
	Cols > 0.

is_list_row(Length, Term) :-
	is_list(Term),
	length(Term, Length).



:- module(swish_render,
	  [ use_rendering/1,			    use_rendering/2,		
	    register_renderer/2,		    current_renderer/2			  ]).
:- use_module(library(pengines_io), []).
:- use_module(library(http/html_write)).
:- use_module(library(http/term_html)).
:- use_module(library(option)).
:- use_module(library(error)).

:- meta_predicate
	register_renderer(:, +),
	use_rendering(:),
	use_rendering(:, +).



:- multifile user:file_search_path/2.

user:file_search_path(render, swish('lib/render')).



:- multifile user:term_expansion/2.

use_rendering(Rendering) :-
	use_rendering(Rendering, []).


use_rendering(Rendering, Options) :-
	Rendering = Into:Renderer,
	must_be(atom, Renderer),
	(   renderer(Renderer, _, _)
	->  true
	;   existence_error(renderer, Renderer)
	),
	retractall(Into:'swish renderer'(Renderer, _)),
	assertz(Into:'swish renderer'(Renderer, Options)).

user:term_expansion((:- use_rendering(Renderer)), Expanded) :-
	expand_rendering(Renderer, [], Expanded).
user:term_expansion((:- use_rendering(Renderer, Options)), Expanded) :-
	expand_rendering(Renderer, Options, Expanded).

expand_rendering(Module:Renderer, Options,
		 Module:'swish renderer'(Renderer, Options)) :- !,
	must_be(atom, Module),
	must_be(atom, Renderer).
expand_rendering(Renderer, Options,
		 'swish renderer'(Renderer, Options)) :-
	must_be(atom, Renderer).


:- multifile pengines_io:binding_term//3.

pengines_io:binding_term(Term, Vars, Options) -->
	{ option(module(Module), Options),
	  findall(Tokens,
		  call_term_rendering(Module, Term, Vars, Options, Tokens),
		  NestedTokens),
	  NestedTokens \== [], !
	},
	alt_renderer(NestedTokens, Term, Options).


call_term_rendering(Module, Term, Vars, Options, Tokens) :-
	State = state([]),
	default_module(Module, Target),
	current_predicate(Target:'swish renderer'/2),
	Target:'swish renderer'(Name, RenderOptions),
	atom(Name),
	is_new(State, Name),
	renderer(Name, RenderModule, _Comment),
	merge_options(RenderOptions, Options, AllOptions),
	catch(phrase(RenderModule:term_rendering(Term, Vars, AllOptions), Tokens),
	      E, rendering_error(E, Name, Tokens)).

rendering_error(Error, Renderer, Tokens) :-
	message_to_string(Error, Msg),
	phrase(html(div(class('render-error'),
			[ 'Renderer ', span(Renderer),
			  ' error: ', span(class(error), Msg)
			])), Tokens).



is_new(State, M) :-
	arg(1, State, Seen),
	(   memberchk(M, Seen)
	->  fail
	;   nb_linkarg(1, State, [M|Seen])
	).


alt_renderer(Specialised, Term, Options) -->
	html(div(class('render-multi'),
		 \specialised(Specialised, Term, Options))).

specialised([], Term, Options) -->
	html(span([ class('render-as-prolog'),
		    'data-render'('Prolog term')
		  ],
		  \term(Term, Options))).
specialised([H|T], Term, Options) -->
	tokens(H),
	specialised(T, Term, Options).

tokens([]) --> [].
tokens([H|T]) --> [H], tokens(T).


		 

:- multifile
	renderer/3.


current_renderer(Name, Comment) :-
	renderer(Name, _Module, Comment).


register_renderer(Name, Comment) :-
	throw(error(context_error(nodirective, register_renderer(Name, Comment)),
		    _)).

user:term_expansion((:- register_renderer(Name, Comment)),
		    swish_render:renderer(Name, Module, Comment)) :-
	prolog_load_context(module, Module).


:- module(swish_search,
	  [ search_box//1,			    match/3				  ]).
:- use_module(library(lists)).
:- use_module(library(http/html_write)).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/http_parameters)).
:- use_module(library(http/http_json)).
:- use_module(library(prolog_source)).
:- use_module(library(option)).
:- use_module(library(solution_sequences)).

:- use_module(config).

:- multifile
	typeahead/4.			


:- http_handler(swish(typeahead), typeahead, [id(swish_typeahead)]).
:- http_handler(swish(search),    search,    [id(swish_search)]).


search_box(_Options) -->
	html(form([class('navbar-form'), role(search)],
		  div(class('input-group'),
		      [ input([ type(text),
				class('form-control'),
				placeholder('Search'),
				'data-search-in'([source,files,predicates]),
				title('Searches code, documentation and files'),
				id('search')
			      ]),
			div(class('input-group-btn'),
			    button([ class([btn, 'btn-default']),
				     type(submit)],
				   i(class([glyphicon, 'glyphicon-search']),
				     [])))
		      ]))).



typeahead(Request) :-
	http_parameters(Request,
			[ q(Query,     [default('')]),
			  set(Set,     [default(predicates)]),
			  match(Match, [default(sow)])
			]),
	findall(Result, typeahead(Set, Query, Result, _{match:Match}), Results),
	reply_json_dict(Results).


:- multifile
	swish_config:source_alias/2.

typeahead(predicates, Query, Template, _) :-
	swish_config(templates, Templates),
	member(Template, Templates),
	_{name:Name, arity:_} :< Template,
	sub_atom(Name, 0, _, _, Query).
typeahead(sources, Query, Hit, Options) :-
	source_file(Path),
	(   file_alias_path(Alias, Dir),
	    once(swish_config:source_alias(Alias, _)),
	    atom_concat(Dir, File, Path)
	->  true
	),
	file_name_extension(Base, Ext, File),
	(   sub_atom(File, 0, _, _, Query)
	->  Hit = hit{alias:Alias, file:Base, ext:Ext, query:Query}
	;   Hit = hit{alias:Alias, file:Base, ext:Ext,
		      query:Query, line:LineNo, text:Line},
	    limit(5, search_file(Path, Query, LineNo, Line, Options))
	).
typeahead(sources, Query, hit{alias:Alias, file:Base, ext:Ext,
			      query:Query, line:LineNo, text:Line}, Options) :-
	swish_config:source_alias(Alias, AliasOptions),
	option(search(Pattern), AliasOptions),
	DirSpec =.. [Alias,.],
	absolute_file_name(DirSpec, Dir,
			   [ access(read),
			     file_type(directory),
			     solutions(all),
			     file_errors(fail)
			   ]),
	directory_file_path(Dir, Pattern, FilePattern),
	expand_file_name(FilePattern, Files),
	atom_concat(Dir, /, DirSlash),
	member(Path, Files),
	\+ source_file(Path),			atom_concat(DirSlash, File, Path),
	file_name_extension(Base, Ext, File),
	limit(5, search_file(Path, Query, LineNo, Line, Options)).

search_file(Path, Query, LineNo, Line, Options) :-
	debug(swish(search), 'Searching ~q for ~q (~q)', [Path, Query, Options]),
	setup_call_cleanup(
	    open(Path, read, In),
	    read_string(In, _, String),
	    close(In)),
	split_string(String, "\n", "\r", Lines),
	nth1(LineNo, Lines, Line),
	match(Line, Query, Options).


match(Text, Query, Options) :-
	sub_string(Text, Start, _, _, Query),
	(   Options.get(match) == sow
	->  sow(Text, Start), !
	;   Options.get(match) == sol
	->  !, Start == 0
	;   !
	).

sow(_, 0) :- !.
sow(Text, Offset) :-
	Pre is Offset-1,
	sub_atom(Text, Pre, 1, _, Before),
	sub_atom(Text, Offset, 1, _, Start),
	char_class(Start, Class),
	\+ char_class(Before, Class).

char_class(C, Class) :-
	var(Class), !,
	(   target_class(Class),
	    char_type(C, Class)
	->  true
	;   Class = other
	).
char_class(C, Class) :-
	(   target_class(Class)
	->  char_type(C, Class)
	;   \+ ( target_class(T),
	         char_type(C, T)
	       )
	).

target_class(lower).
target_class(upper).
target_class(digit).
target_class(space).
target_class(punct).


search(_Request) :-
	reply_html_page(search,
			[],
			h1('Search results')).


:- module(web_storage,
	  [ storage_file/1,				    storage_file/3				  ]).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/http_parameters)).
:- use_module(library(http/http_json)).
:- use_module(library(http/http_wrapper)).
:- use_module(library(http/mimetype)).
:- use_module(library(lists)).
:- use_module(library(settings)).
:- use_module(library(random)).
:- use_module(library(apply)).
:- use_module(library(option)).
:- use_module(library(debug)).
:- use_module(library(solution_sequences)).

:- use_module(page).
:- use_module(gitty).
:- use_module(config).
:- use_module(search).



:- setting(directory, atom, storage, 'The directory for storing files.').

:- http_handler(swish('p/'), web_storage, [ id(web_storage), prefix ]).

:- initialization open_gittystore.

open_gittystore :-
	setting(directory, Dir),
	(   exists_directory(Dir)
	->  true
	;   make_directory(Dir)
	),
	gitty_open(Dir, []).



web_storage(Request) :-
	option(method(Method), Request),
	storage(Method, Request).

storage(get, Request) :-
	http_parameters(Request,
			[ format(Fmt,  [ oneof([swish,raw,json,history,diff]),
					 default(swish),
					 description('How to render')
				       ]),
			  depth(Depth, [ default(5),
					 integer,
					 description('History depth')
				       ]),
			  to(RelTo,    [ optional(true),
					 description('Diff relative to')
				       ])
			]),
	(   Fmt == history
	->  (   nonvar(RelTo)
	    ->	Format = history(Depth, RelTo)
	    ;	Format = history(Depth)
	    )
	;   Fmt == diff
	->  Format = diff(RelTo)
	;   Format = Fmt
	),
	storage_get(Request, Format).
storage(post, Request) :-
	http_read_json_dict(Request, Dict),
	option(data(Data), Dict, ""),
	option(type(Type), Dict, pl),
	setting(directory, Dir),
	make_directory_path(Dir),
	meta_data(Request, Dir, Dict, Meta),
	(   atom_string(Base, Dict.get(meta).get(name))
	->  file_name_extension(Base, Type, File),
	    (	catch(gitty_create(Dir, File, Data, Meta, Commit),
		      error(gitty(file_exists(File)),_),
		      fail)
	    ->	true
	    ;	Error = json{error:file_exists,
			     file:File}
	    )
	;   (   repeat,
	        random_filename(Base),
		file_name_extension(Base, Type, File),
		catch(gitty_create(Dir, File, Data, Meta, Commit),
		      error(gitty(file_exists(File)),_),
		      fail)
	    ->  true
	    )
	),
	(   var(Error)
	->  debug(storage, 'Created: ~p', [Commit]),
	    storage_url(File, URL),

	    reply_json_dict(json{url:URL,
				 file:File,
				 meta:Commit.put(symbolic, "HEAD")
				})
	;   reply_json_dict(Error)
	).
storage(put, Request) :-
	http_read_json_dict(Request, Dict),
	setting(directory, Dir),
	request_file(Request, Dir, File),
	(   Dict.get(update) == "meta-data"
	->  gitty_data(Dir, File, Data, _OldMeta)
	;   option(data(Data), Dict, "")
	),
	meta_data(Request, Dict, Meta),
	storage_url(File, URL),
	gitty_update(Dir, File, Data, Meta, Commit),
	debug(storage, 'Updated: ~p', [Commit]),
	reply_json_dict(json{url:URL,
			     file:File,
			     meta:Commit.put(symbolic, "HEAD")
			    }).
storage(delete, Request) :-
	authentity(Request, Meta),
	setting(directory, Dir),
	request_file(Request, Dir, File),
	gitty_update(Dir, File, "", Meta, _New),
	reply_json_dict(true).

request_file(Request, Dir, File) :-
	option(path_info(File), Request),
	(   gitty_file(Dir, File, _Hash)
	->  true
	;   http_404([], Request)
	).

storage_url(File, HREF) :-
	http_link_to_id(web_storage, path_postfix(File), HREF).


meta_data(Request, Dict, Meta) :-
	authentity(Request, Meta0),		(   filter_meta(Dict.get(meta), Meta1)
	->  Meta = Meta0.put(Meta1)
	;   Meta = Meta0
	).

meta_data(Request, Store, Dict, Meta) :-
	meta_data(Request, Dict, Meta1),
	(   atom_string(Previous, Dict.get(previous)),
	    is_sha1(Previous),
	    gitty_commit(Store, Previous, _PrevMeta)
	->  Meta = Meta1.put(previous, Previous)
	;   Meta = Meta1
	).

filter_meta(Dict0, Dict) :-
	dict_pairs(Dict0, Tag, Pairs0),
	filter_pairs(Pairs0, Pairs),
	dict_pairs(Dict, Tag, Pairs).

filter_pairs([], []).
filter_pairs([H|T0], [H|T]) :-
	H = K-V,
	meta_allowed(K, Type),
	is_of_type(Type, V), !,
	filter_pairs(T0, T).
filter_pairs([_|T0], T) :-
	filter_pairs(T0, T).

meta_allowed(public,	     boolean).
meta_allowed(example,	     boolean).
meta_allowed(author,	     string).
meta_allowed(email,	     string).
meta_allowed(title,	     string).
meta_allowed(tags,	     list(string)).
meta_allowed(description,    string).
meta_allowed(commit_message, string).


storage_get(Request, swish) :-
	swish_reply_config(Request), !.
storage_get(Request, Format) :-
	setting(directory, Dir),
	request_file_or_hash(Request, Dir, FileOrHash, Type),
	storage_get(Format, Dir, Type, FileOrHash, Request).

storage_get(swish, Dir, _, FileOrHash, Request) :-
	gitty_data(Dir, FileOrHash, Code, Meta),
	swish_reply([code(Code),file(FileOrHash),st_type(gitty),meta(Meta)],
		    Request).
storage_get(raw, Dir, _, FileOrHash, _Request) :-
	gitty_data(Dir, FileOrHash, Code, Meta),
	file_mime_type(Meta.name, MIME),
	format('Content-type: ~w~n~n', [MIME]),
	format('~s', [Code]).
storage_get(json, Dir, _, FileOrHash, _Request) :-
	gitty_data(Dir, FileOrHash, Code, Meta),
	reply_json_dict(json{data:Code, meta:Meta}).
storage_get(history(Depth, Includes), Dir, _, File, _Request) :-
	gitty_history(Dir, File, History, [depth(Depth),includes(Includes)]),
	reply_json_dict(History).
storage_get(history(Depth), Dir, _, File, _Request) :-
	gitty_history(Dir, File, History, [depth(Depth)]),
	reply_json_dict(History).
storage_get(diff(RelTo), Dir, _, File, _Request) :-
	gitty_diff(Dir, RelTo, File, Diff),
	reply_json_dict(Diff).

request_file_or_hash(Request, Dir, FileOrHash, Type) :-
	option(path_info(FileOrHash), Request),
	(   gitty_file(Dir, FileOrHash, _Hash)
	->  Type = file
	;   is_sha1(FileOrHash)
	->  Type = hash
	;   http_404([], Request)
	).

is_sha1(SHA1) :-
	atom_length(SHA1, 40),
	atom_codes(SHA1, Codes),
	maplist(hex_digit, Codes).

hex_digit(C) :- between(0'0, 0'9, C), !.
hex_digit(C) :- between(0'a, 0'f, C).


authentity(Request, Authentity) :-
	phrase(authentity(Request), Pairs),
	dict_pairs(Authentity, _, Pairs).

authentity(Request) -->
	(user(Request)->[];[]),
	(peer(Request)->[];[]).

:- multifile
	pengines:authentication_hook/3.

user(Request) -->
	{ pengines:authentication_hook(Request, swish, User),
	  ground(User)
	},
	[ user-User ].
peer(Request) -->
	{ http_peer(Request, Peer) },
	[ peer-Peer ].


random_filename(Name) :-
	length(Chars, 8),
	maplist(random_char, Chars),
	atom_chars(Name, Chars).

from('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ').

random_char(Char) :-
	from(From),
	atom_length(From, Len),
	Max is Len - 1,
	random_between(0, Max, I),
	sub_atom(From, I, 1, _, Char).


		 


storage_file(File) :-
	setting(directory, Dir),
	gitty_file(Dir, File, _Head).

storage_file(File, Data, Meta) :-
	setting(directory, Dir),
	gitty_data(Dir, File, Data, Meta).


		 

:- multifile
	swish_search:typeahead/4.	

swish_search:typeahead(file, Query, FileInfo, _Options) :-
	setting(directory, Dir),
	gitty_file(Dir, File, Head),
	gitty_commit(Dir, Head, Meta),
	Meta.get(public) == true,
	(   sub_atom(File, 0, _, _, Query) 	->  true
	;   meta_match_query(Query, Meta)
	->  true
	),
	FileInfo = Meta.put(_{type:"store", file:File}).

meta_match_query(Query, Meta) :-
	member(Tag, Meta.get(tags)),
	sub_atom(Tag, 0, _, _, Query).
meta_match_query(Query, Meta) :-
	sub_atom(Meta.get(author), 0, _, _, Query).
meta_match_query(Query, Meta) :-
	Title = Meta.get(title),
	sub_atom_icasechk(Title, Start, Query),
	(   Start =:= 0
	->  true
	;   Before is Start-1,
	    sub_atom(Title, Before, 1, _, C),
	    \+ char_type(C, csym)
	).

swish_search:typeahead(store_content, Query, FileInfo, Options) :-
	limit(25, search_store_content(Query, FileInfo, Options)).

search_store_content(Query, FileInfo, Options) :-
	setting(directory, Dir),
	gitty_file(Dir, File, Head),
	gitty_data(Dir, Head, Data, Meta),
	Meta.get(public) == true,
	limit(5, search_file(File, Meta, Data, Query, FileInfo, Options)).

search_file(File, Meta, Data, Query, FileInfo, Options) :-
	split_string(Data, "\n", "\r", Lines),
	nth1(LineNo, Lines, Line),
	match(Line, Query, Options),
	FileInfo = Meta.put(_{type:"store", file:File,
			      line:LineNo, text:Line, query:Query
			     }).


:- module(swish_debug,
	  [ pengine_stale_module/1,		    swish_statistics/1,			    start_swish_stat_collector/0,
	    swish_stats/2			  ]).
:- use_module(library(pengines)).
:- use_module(library(broadcast)).
:- use_module(library(lists)).
:- use_module(library(apply)).
:- use_module(library(debug)).
:- use_module(procps).
:- use_module(highlight).


pengine_stale_module(M) :-
	current_module(M),
	is_uuid(M),
	\+ live_module(M),
	\+ current_highlight_state(M, _).

live_module(M) :-
	pengine_property(Pengine, module(M)),
	pengine_property(Pengine, thread(Thread)),
	catch(thread_property(Thread, status(running)), _, fail).


swish_statistics(highlight_states(Count)) :-
	aggregate_all(count, current_highlight_state(_,_), Count).
swish_statistics(pengines(Count)) :-
	aggregate_all(count, pengine_property(_,self(_)), Count).
swish_statistics(pengines_created(Count)) :-
	(   flag(pengines_created, Old, Old)
	->  Count = Old
	;   Count = 0
	).

:- listen(pengine(Action), swish_update_stats(Action)).

swish_update_stats(create(_Pengine, _Application, _Options0)) :-
	flag(pengines_created, Old, Old+1).
swish_update_stats(send(_Pengine, _Event)).



is_uuid(M) :-
	atom(M),
	atom_length(M, 36),
	forall(sub_atom(M, S, 1, _, C),
	       uuid_code(S, C)).

uuid_sep(8).
uuid_sep(13).
uuid_sep(18).
uuid_sep(23).

uuid_code(S, -) :- !, uuid_sep(S).
uuid_code(_, X) :- char_type(X, xdigit(_)).

		 

:- initialization
	start_swish_stat_collector.


start_swish_stat_collector :-
	thread_property(_, alias(swish_stats)), !.
start_swish_stat_collector :-
	swish_stat_collector(swish_stats,
			     [ 60,				       60,				       24,				       7,				       52				     ],
			     1).

swish_stat_collector(Name, Dims, Interval) :-
	atom(Name), !,
	thread_create(stat_collect(Dims, Interval), _, [alias(Name)]).
swish_stat_collector(Thread, Dims, Interval) :-
	thread_create(stat_collect(Dims, Interval), Thread, []).


swish_stats(Name, Stats) :-
	stats_ring(Name, Ring),
	swish_stats(swish_stats, Ring, Stats).

stats_ring(minute, 1).
stats_ring(hour,   2).
stats_ring(day,	   3).
stats_ring(week,   4).
stats_ring(year,   5).

swish_stats(Name, Ring, Stats) :-
	thread_self(Me),
	thread_send_message(Name, Me-get_stats(Ring)),
	thread_get_message(get_stats(Ring, Stats)).

stat_collect(Dims, Interval) :-
	new_sliding_stats(Dims, SlidingStat),
	get_time(Now),
	stat_loop(SlidingStat, _{}, Now, Interval).

stat_loop(SlidingStat, Stat0, StatTime, Interval) :-
	(   thread_self(Me),
	    thread_get_message(Me, Request,
			       [ deadline(StatTime)
			       ])
	->  (   reply_stats_request(Request, SlidingStat)
	    ->	true
	    ;	debug(swish_stats, 'Failed to process ~p', [Request])
	    ),
	    stat_loop(SlidingStat, Stat0, StatTime, Interval)
	;   swish_stats(Stat1),
	    dif_stat(Stat1, Stat0, Stat),
	    push_sliding_stats(SlidingStat, Stat),
	    NextTime is StatTime+Interval,
	    stat_loop(SlidingStat, Stat1, NextTime, Interval)
	).

dif_stat(Stat1, Stat0, Stat) :-
	maplist(dif_field(Stat1, Stat0),
		[ cpu - d_cpu,
		  pengines_created - d_pengines_created
		],
		Fields), !,
	dict_pairs(Extra, _, Fields),
	put_dict(Extra, Stat1, Stat).
dif_stat(Stat, _, Stat).

dif_field(Stat1, Stat0, Key-DKey, DKey-DValue) :-
	DValue is Stat1.get(Key) - Stat0.get(Key).

reply_stats_request(Client-get_stats(Period), SlidingStat) :-
	arg(Period, SlidingStat, Ring),
	ring_values(Ring, Values),
	thread_send_message(Client, get_stats(Period, Values)).


swish_stats(stats{ cpu:CPU,
		   rss:RSS,
		   stack:Stack,
		   pengines:Pengines,
		   pengines_created:PenginesCreated
		 }) :-
	statistics(process_cputime, PCPU),
	statistics(cputime, MyCPU),
	CPU is PCPU-MyCPU,
	statistics(stack, Stack),
	catch(procps_stat(Stat), _,
	      Stat = stat{rss:0}),
	RSS = Stat.rss,
	swish_statistics(pengines(Pengines)),
	swish_statistics(pengines_created(PenginesCreated)).



new_sliding_stats(Dims, Stats) :-
	maplist(new_ring, Dims, Rings),
	compound_name_arguments(Stats, sliding_stats, Rings).

push_sliding_stats(Stats, Values) :-
	push_sliding_stats(1, Stats, Values).

push_sliding_stats(I, Stats, Values) :-
	arg(I, Stats, Ring),
	push_ring(Ring, Values, Wrap),
	(   Wrap == true
	->  average_ring(Ring, Avg),
	    I2 is I+1,
	    (	push_sliding_stats(I2, Stats, Avg)
	    ->	true
	    ;	true
	    )
	;   true
	).

new_ring(Dim, ring(0, Ring)) :-
	compound_name_arity(Ring, [], Dim).

push_ring(Ring, Value, Wrap) :-
	Ring = ring(Here0, Data),
	Here is Here0+1,
	compound_name_arity(Data, _, Size),
	Arg is (Here0 mod Size)+1,
	(   Arg == Size
	->  Wrap = true
	;   Wrap = false
	),
	nb_setarg(Arg, Data, Value),
	nb_setarg(1, Ring, Here).

ring_values(Ring, Values) :-
	Ring = ring(Here, Data),
	compound_name_arity(Data, _, Size),
	Start is Here - 1,
	End is Start - min(Here,Size),
	read_ring(Start, End, Size, Data, Values).

read_ring(End, End, _, _, []) :- !.
read_ring(Here0, End, Size, Data, [H|T]) :-
	A is (Here0 mod Size)+1,
	arg(A, Data, H),
	Here1 is Here0-1,
	read_ring(Here1, End, Size, Data, T).

average_ring(ring(_,Data), Avg) :-
	compound_name_arguments(Data, _, Dicts),
	average_dicts(Dicts, Avg).

average_dicts(Dicts, Avg) :-
	dicts_to_same_keys(Dicts, dict_fill(0), Dicts1),
	Dicts1 = [H|_],
	is_dict(H, Tag),
	dict_keys(H, Keys),
	length(Dicts1, Len),
	maplist(avg_key(Dicts1, Len), Keys, Pairs),
	dict_pairs(Avg, Tag, Pairs).

avg_key(Dicts, Len, Key, Key-Avg) :-
	maplist(get_dict(Key), Dicts, Values),
	sum_list(Values, Sum),
	Avg is Sum/Len.


		 

:- multifile
	sandbox:safe_primitive/1.

sandbox:safe_primitive(swish_debug:pengine_stale_module(_)).
sandbox:safe_primitive(swish_debug:swish_statistics(_)).
sandbox:safe_primitive(swish_debug:swish_stats(_, _)).




:- module(swish_template_hint,
	  [ visible_predicate/3,		    predicate_template/2,		    visible_predicate_templates/3 	  ]).
:- use_module(library(apply)).
:- use_module(library(pldoc), []).
:- use_module(library(pldoc/doc_man)).
:- use_module(library(pldoc/doc_process)).
:- use_module(library(pldoc/doc_wiki)).
:- use_module(library(pldoc/doc_modes)).
:- use_module(library(http/html_write)).
:- use_module(library(memfile)).
:- use_module(library(sgml)).
:- use_module(library(lists)).
:- use_module(library(pairs)).
:- use_module(library(xpath)).
:- use_module(library(sandbox)).
:- use_module(library(option)).
:- use_module(library(filesex)).
:- use_module(library(error)).

:- use_module(render).




:- dynamic
	cached_templates/3.		
visible_predicate_templates(Module, Templates, Options) :-
	cached_templates(Module, Options, Templates), !.
visible_predicate_templates(Module, Templates, Options) :-
	with_mutex(swish_template_hint,
		   visible_predicate_templates_sync(Module, Templates, Options)).

visible_predicate_templates_sync(Module, Templates, Options) :-
	cached_templates(Module, Options, Templates), !.
visible_predicate_templates_sync(Module, Templates, Options) :-
	findall(Templ,
		(   visible_predicate(PI, Module, Options),
		    predicate_template(PI, Templ)
		),
		Templates0),
	assertz(cached_templates(Module, Options, Templates0)),
	Templates0 = Templates.

clean_template_cache :-
	retractall(cached_templates(_,_,_)).

:- initialization clean_template_cache.


visible_predicate(PI, Module, Options) :-
	option(from(FromList), Options), !,
	must_be(list, FromList),
	member(From, FromList),
	must_be(ground, From),
	visible_from(From, PI, Module, Options),
	\+ no_template(PI).
visible_predicate(PI, Module, Options) :-
	PI = Name/Arity,
	predicate_property(Module:Head, visible),
	autoload(Module:Head, Options),
	safe(Module:Head, Options),
	functor(Head, Name, Arity),
	\+ no_template(PI).

no_template(use_module/1).
no_template(use_module/2).
no_template(use_rendering/1).
no_template(use_rendering/2).


visible_from(built_in, Name/Arity, _Module, Options) :- !,
	predicate_property(system:Head, built_in),
	functor(Head, Name, Arity),
	\+ sub_atom(Name, 0, _, _, $),
	safe(system:Head, Options).
visible_from(Spec, Name/Arity, _Module, _Options) :-
	compound(Spec),
	functor(Spec, _, 1),
	exists_source(Spec),
	xref_public_list(Spec, -,
			 [ exports(Exports)
			 ]),
	member(Name/Arity, Exports).


autoload(Pred, Options) :-
	option(autoload(false), Options, false), !,
	Pred = M:Head,
	functor(Head, Name, Arity),
	(   current_predicate(M:Name/Arity)
	->  \+ ( predicate_property(M:Head, imported_from(LoadModule)),
		 no_autocomplete_module(LoadModule)
	       )
	;   '$find_library'(M, Name, Arity, LoadModule, _Library),
	    \+ no_autocomplete_module(LoadModule),
	    current_predicate(LoadModule:Name/Arity)
	).
autoload(_, _).

no_autocomplete_module(pce).
no_autocomplete_module(pce_principal).
no_autocomplete_module(pce_class_template).
no_autocomplete_module(pce_dispatch).
no_autocomplete_module(pce_expansion).
no_autocomplete_module(pce_error).
no_autocomplete_module(pce_compatibility_layer).
no_autocomplete_module(backward_compatibility).
no_autocomplete_module(settings).
no_autocomplete_module(quintus).
no_autocomplete_module(toplevel_variables).
no_autocomplete_module('$qlf').
no_autocomplete_module(pldoc).
no_autocomplete_module(quasi_quotations).
no_autocomplete_module(ssl).
no_autocomplete_module(oset).
no_autocomplete_module(prolog_colour).
no_autocomplete_module(pengines_io).
no_autocomplete_module(broadcast).
no_autocomplete_module(sgml).
no_autocomplete_module(swi_system_utilities).
no_autocomplete_module(prolog_metainference).
no_autocomplete_module(thread_pool).


safe(Goal, Options) :-
	option(safe(true), Options, true), !,
	(   predicate_property(Goal, meta_predicate(_))
	->  true
	;   catch(safe_goal(Goal), _, fail)
	).
safe(_, _).


predicate_template(PI, Dict) :-
	findall(Pair, predicate_info(PI, Pair), Pairs),
	Pairs \== [],
	dict_pairs(Dict, json, Pairs).

predicate_info(PI, Pair) :-
	(   man_predicate_info(PI, Pair)
	*-> true
	;   pldoc_predicate_info(PI, Pair)
	).


man_predicate_info(PI, Name-Value) :-
	pi_head(PI, Head),
	strip_module(Head, _, PHead),
	functor(PHead, PName, Arity),
	phrase(man_page(PName/Arity,
			[ no_manual(fail),
			  links(false),
			  navtree(false)
			]), HTML),
	setup_call_cleanup(
	    new_memory_file(MF),
	    ( setup_call_cleanup(
		  open_memory_file(MF, write, Out),
		  print_html(Out, HTML),
		  close(Out)),
	      setup_call_cleanup(
		  open_memory_file(MF, read, In),
		  load_html(stream(In), DOM, [syntax_errors(quiet)]),
		  close(In))
	    ),
	    free_memory_file(MF)),
	xpath_chk(DOM, //dt(@class=pubdef), DT),
	xpath_chk(DT, a(text), ModeLine0),
	normalize_space(string(ModeLine), ModeLine0),
	(   atom_string(PName, PString),
	    Name-Value = name-PString
	;   Name-Value = arity-Arity
	;   Name-Value = (mode)-ModeLine
	;   once(catch(predicate(PName, Arity, Summary, _, _), _, fail)),
	    Name-Value = summary-Summary
	;   predicate_property(system:PHead, iso),
	    Name-Value = iso-true
	;   predicate_property(system:PHead, built_in),
	    Name-Value = type-built_in
	).


pldoc_predicate_info(PI, Name-Value) :-
	pi_head(PI, Head),
	strip_module(Head, _, PHead),
	functor(PHead, PName, Arity),
	implementation_module(Head, Module),
	doc_comment(PI, Pos, Summary, Comment), !,
	is_structured_comment(Comment, Prefixes),
	string_codes(Comment, CommentCodes),
	indented_lines(CommentCodes, Prefixes, Lines),
	process_modes(Lines, Module, Pos, Modes, _VarNames, _RestLines),
	member(mode(Mode,Vars), Modes),
	mode_head_det(Mode, ModeHead, Det),
	m_same_name_arity(ModeHead, Head),
	maplist(bind_var, Vars),
	term_string(ModeHead, ModeLine,
		    [ quoted(true),
		      module(pldoc_modes),
		      numbervars(true),
		      spacing(next_argument)
		    ]),
	(   atom_string(PName, PString),
	    Name-Value = name-PString
	;   Name-Value = arity-Arity
	;   Name-Value = (mode)-ModeLine
	;   Name-Value = summary-Summary
	;   Det \== unknown,
	    Name-Value = determinism-Det
	).


bind_var(Name=Var) :- Var = '$VAR'(Name).

mode_head_det(Head is Det, Head, Det) :- !.
mode_head_det(Head, Head, unknown).

pi_head(Var, _) :-
	var(Var), !, instantiation_error(Var).
pi_head(M0:T0, M:T) :- !,
	strip_module(M0:T0, M, T1),
	pi_head(T1, T).
pi_head(Name/Arity, Head) :- !,
	functor(Head, Name, Arity).
pi_head(Name//DCGArity, Head) :-
	Arity is DCGArity+2,
	functor(Head, Name, Arity).

implementation_module(Head, M) :-
	predicate_property(Head, imported_from(M0)), !,
	M = M0.
implementation_module(Head, M) :-
	strip_module(user:Head, M, _).

m_same_name_arity(H1, H2) :-
	strip_module(H1, _, P1),
	strip_module(H2, _, P2),
	functor(P1, Name, Arity),
	functor(P2, Name, Arity).


		 


rendering_template([ json{displayText:  "use_rendering(+Renderer).",
			  type:         "directive",
			  template:     "use_rendering(${Renderer}).",
			  varTemplates: json{'Renderer': Template}},
		     json{displayText:  "use_rendering(+Renderer, +Options).",
			  type:         "directive",
			  template:     "use_rendering(${Renderer}).",
			  varTemplates: json{'Renderer': Template}}
		   ]) :-
	findall(json{displayText: Comment,
		     text: Name},
		current_renderer(Name, Comment),
		Template).


		 


library_template(json{displayText:  "use_module(library(...))",
		      type:         "directive",
		      template:     "use_module(library(${Library})).",
		      varTemplates: json{'Library': Template}}, Options) :-
	(   option(from(From), Options)
	->  library_template_from(From, Template)
	;   library_template(library, '.', Template)
	).


:- dynamic
	library_template_cache/3.

library_template(Alias, SubDir, Values) :-
	library_template_cache(Alias, SubDir, Values), !.
library_template(Alias, SubDir, Values) :-
	with_mutex(swish_template_hint,
		   (   library_template_cache(Alias, SubDir, Values)
		   ->  true
		   ;   library_template_no_cache(Alias, SubDir, Values),
		       asserta(library_template_cache(Alias, SubDir, Values))
		   )).

library_template_no_cache(Alias, SubDir, Values) :-
	library_files(Alias, SubDir, Files, Dirs),
	maplist(library_sub_template(Alias, SubDir), Dirs, DirTemplates),
	maplist(plain_file, Files, PlainFiles),
	flatten([DirTemplates, PlainFiles], Values).

library_sub_template(Alias, Dir0, Dir,
		     json{displayText: DirSlash,
			  template: DirTemplate,
			  varTemplates: VarTemplates
			 }) :-
	directory_file_path(Dir0, Dir, Dir1),
	library_template(Alias, Dir1, Templates),
	Templates \== [], !,
	string_concat(Dir, "/", DirSlash),
	string_upper(Dir, UDir),
	atom_concat(UDir, lib, TemplateVar),
	format(string(DirTemplate), "~w/${~w}", [Dir, TemplateVar]),
	VarTemplates = json{}.put(TemplateVar, Templates).
library_sub_template(_,_,_,[]).

plain_file(File, Plain) :-
	file_name_extension(Plain, _Ext, File).


library_files(Alias, SubDir, Files, Dirs) :-
	findall(Type-Name, directory_entry(Alias, SubDir, Type, Name), Pairs),
	keysort(Pairs, Sorted),
	group_pairs_by_key(Sorted, Grouped),
	group(directory, Grouped, Dirs),
	group(prolog, Grouped, Files).

group(Key, Grouped, List) :-
	(   memberchk(Key-List0, Grouped)
	->  sort(List0, List)
	;   List = []
	).

directory_entry(Alias, SubDir, Type, Name) :-
	Spec =.. [Alias, SubDir],
	absolute_file_name(Spec, Dir,
			   [ file_type(directory),
			     file_errors(fail),
			     solutions(all),
			     access(exist)
			   ]),
	directory_files(Dir, All),
	member(Name, All),
	\+ sub_atom(Name, 0, _, _, '.'),
	directory_file_path(Dir, Name, Path),
	file_type(Path, Name, Type).

file_type(_, 'INDEX.pl', _) :- !,
	fail.
file_type(Path, _, Type) :-
	exists_directory(Path), !,
	Type = directory.
file_type(_, Name, Type) :-
	file_name_extension(_, Ext, Name),
	prolog_file_type(Ext, prolog),
	\+ prolog_file_type(Ext, qlf),
	Type = prolog.


library_template_from(From, Template) :-
	libs_from(From, Libs),
	lib_template_from(Libs, Template).

lib_template_from(Libs, Template) :-
	dirs_plain(Libs, Dirs, Plain),
	keysort(Dirs, Sorted),
	group_pairs_by_key(Sorted, Grouped),
	maplist(library_sub_template_from, Grouped, DirTemplates),
	flatten([DirTemplates, Plain], Template).

dirs_plain([], [], []).
dirs_plain([[Plain]|T0], Dirs, [Plain|T]) :- !,
	dirs_plain(T0, Dirs, T).
dirs_plain([[Dir|Sub]|T0], [Dir-Sub|T], Plain) :-
	dirs_plain(T0, T, Plain).

libs_from([], []).
libs_from([library(Lib)|T0], [Segments|T]) :- !,
	phrase(segments(Lib), Segments),
	libs_from(T0, T).
libs_from([_|T0], T) :-
	libs_from(T0, T).

segments(A/B) --> !, segments(A), segments(B).
segments(A)   --> [A].

segments_to_slash([One], One).
segments_to_slash(List, Term/Last) :-
	append(Prefix, [Last], List), !,
	segments_to_slash(Prefix, Term).


library_sub_template_from(Dir-Members,
			  json{displayText: DirSlash,
			       template: DirTemplate,
			       varTemplates: VarTemplates
			      }) :-
	lib_template_from(Members, Templates),
	string_concat(Dir, "/", DirSlash),
	string_upper(Dir, UDir),
	atom_concat(UDir, lib, TemplateVar),
	format(string(DirTemplate), "~w/${~w}", [Dir, TemplateVar]),
	VarTemplates = json{}.put(TemplateVar, Templates).



imported_library(Module, Library) :-
	setof(FromModule, imported_from(Module, FromModule), FromModules),
	member(FromModule, FromModules),
	module_property(FromModule, file(File)),
	source_file_property(File, load_context(Module, _Pos, _Opts)),
	file_name_on_path(File, Library).

imported_from(Module, FromModule) :-
	current_predicate(Module:Name/Arity),
	functor(Head, Name, Arity),
	predicate_property(Module:Head, imported_from(FromModule)).


		 

swish_templates(Template) :-
	setof(From, visible_lib(swish, From), FromList),
	swish_templates(Template, [from(FromList)]).

swish_templates(Template, Options) :-
	library_template(Template, Options).
swish_templates(Template, _Options) :-
	rendering_template(Template).
swish_templates(Templates, Options) :-
	visible_predicate_templates(swish, Templates, Options).


visible_lib(Module, Library) :-
	imported_library(Module, Lib),
	(   Lib = library(Name)
	->  \+ no_autocomplete_module(Name),
	    atomic_list_concat(Segments, /, Name),
	    segments_to_slash(Segments, Path),
	    Library = library(Path)
	;   Library = Lib
	).
visible_lib(_, Lib) :-
	visible_lib(Lib).

visible_lib(built_in).
visible_lib(library(apply)).
visible_lib(library(aggregate)).
visible_lib(library(assoc)).
visible_lib(library(base32)).
visible_lib(library(base64)).
visible_lib(library(charsio)).
visible_lib(library(clpb)).
visible_lib(library(clpfd)).
visible_lib(library(codesio)).
visible_lib(library(coinduction)).
visible_lib(library(date)).
visible_lib(library(debug)).
visible_lib(library(error)).
visible_lib(library(dif)).
visible_lib(library(gensym)).
visible_lib(library(heaps)).
visible_lib(library(lists)).
visible_lib(library(occurs)).
visible_lib(library(option)).
visible_lib(library(ordsets)).
visible_lib(library(pairs)).
visible_lib(library(random)).
visible_lib(library(rbtrees)).
visible_lib(library(statistics)).
visible_lib(library(sort)).
visible_lib(library(terms)).
visible_lib(library(ugraph)).
visible_lib(library(utf8)).
visible_lib(library(varnumbers)).
visible_lib(library(when)).



		 


swish_config:config(templates, Templates) :-
	findall(Templ, swish_templates(Templ), Templates0),
	flatten(Templates0, Templates).


:- module(swish_trace,
	  [ '$swish wrapper'/1			  ]).
:- use_module(library(debug)).
:- use_module(library(settings)).
:- use_module(library(pengines)).
:- use_module(library(apply)).
:- use_module(library(lists)).
:- use_module(library(option)).
:- use_module(library(solution_sequences)).
:- use_module(library(edinburgh), [debug/0]).
:- use_module(library(pengines_io), [pengine_io_predicate/1]).
:- use_module(library(sandbox), []).
:- use_module(library(prolog_clause)).
:- use_module(library(prolog_breakpoints)).
:- use_module(library(http/term_html)).
:- use_module(library(http/html_write)).

:- use_module(storage).

:- if(current_setting(swish:debug_info)).
:- set_setting(swish:debug_info, true).
:- endif.

:- set_prolog_flag(generate_debug_info, false).

:- meta_predicate
	'$swish wrapper'(0).



:- multifile
	user:prolog_trace_interception/4,
	user:message_hook/3.

user:message_hook(trace_mode(_), _, _) :-
	pengine_self(_), !.

user:prolog_trace_interception(Port, Frame, _CHP, Action) :-
	pengine_self(Pengine),
	prolog_frame_attribute(Frame, predicate_indicator, PI),
	debug(trace, 'HOOK: ~p ~p', [Port, PI]),
	pengine_property(Pengine, module(Module)),
	wrapper_frame(Frame, WrapperFrame),
	debug(trace, 'Me: ~p, wrapper: ~p', [Frame, WrapperFrame]),
	prolog_frame_attribute(WrapperFrame, level, WrapperDepth),
	prolog_frame_attribute(Frame, goal, Goal0),
	prolog_frame_attribute(Frame, level, Depth0),
	Depth is Depth0 - WrapperDepth - 1,
	unqualify(Goal0, Module, Goal),
	debug(trace, '[~d] ~w: Goal ~p', [Depth0, Port, Goal]),
	term_html(Goal, GoalString),
	functor(Port, PortName, _),
	Prompt0 = _{type:    trace,
		    port:    PortName,
		    depth:   Depth,
		    goal:    GoalString,
		    pengine: Pengine
		   },
	add_context(Port, Frame, Prompt0, Prompt1),
	add_source(Port, Frame, Prompt1, Prompt),
	pengine_input(Prompt, Reply),
	trace_action(Reply, Port, Frame, Action), !,
	debug(trace, 'Action: ~p --> ~p', [Reply, Action]).
user:prolog_trace_interception(Port, Frame0, _CHP, nodebug) :-
	pengine_self(_),
	prolog_frame_attribute(Frame0, goal, Goal),
	prolog_frame_attribute(Frame0, level, Depth),
	debug(trace, '[~d] ~w: Goal ~p --> NODEBUG', [Depth, Port, Goal]).

trace_action(continue, _Port, Frame, continue) :-
	pengine_self(Me),
	prolog_frame_attribute(Frame, predicate_indicator, Me:Name/Arity),
	functor(Head, Name, Arity),
	\+ pengine_io_predicate(Head), !,
	prolog_skip_level(_, very_deep),
        debug(trace, '~p', [Me:Name/Arity]).
trace_action(continue, Port, _, skip) :-
	box_enter(Port), !.
trace_action(continue, _, _, continue) :-
	prolog_skip_level(_, very_deep).
trace_action(nodebug,  _, _, nodebug).
trace_action(skip,     _, _, skip).
trace_action(retry,    _, _, retry).
trace_action(up   ,    _, _, up).
trace_action(abort,    _, _, abort).
trace_action(nodebug(Breakpoints), _, _, Action) :-
	catch(update_breakpoints(Breakpoints), E,
	      print_message(warning, E)),
	(   Breakpoints == []
	->  Action = nodebug
	;   Action = continue,
	    notrace
	).

box_enter(call).
box_enter(redo(_)).

wrapper_frame(Frame0, Frame) :-
	parent_frame(Frame0, Frame),
	prolog_frame_attribute(Frame, predicate_indicator, PI),
	debug(trace, 'Parent: ~p', [PI]),
	(   PI == swish_call/1
	->  true
	;   PI == swish_trace:swish_call/1
	), !.

parent_frame(Frame, Frame).
parent_frame(Frame, Parent) :-
	prolog_frame_attribute(Frame, parent, Parent0),
	parent_frame(Parent0, Parent).

unqualify(M:G, M, G) :- !.
unqualify(system:G, _, G) :- !.
unqualify(user:G, _, G) :- !.
unqualify(G, _, G).

term_html(Term, HTMlString) :-
	pengine_self(Pengine),
	pengine_property(Pengine, module(Module)),
	phrase(html(\term(Term,
			  [ module(Module),
			    quoted(true)
			  ])), Tokens),
	with_output_to(string(HTMlString), print_html(Tokens)).


add_context(exception(Exception0), _Frame, Prompt0, Prompt) :-
	strip_stack(Exception0, Exception),
	message_to_string(Exception, Msg), !,
	debug(trace, 'Msg = ~s', [Msg]),
	(   term_html(Exception, String)
	->  Ex = json{term_html:String, message:Msg}
	;   Ex = json{message:Msg}
	),
	Prompt = Prompt0.put(exception, Ex).
add_context(_, _, Prompt, Prompt).

strip_stack(error(Error, context(prolog_stack(S), Msg)),
	    error(Error, context(_, Msg))) :-
	nonvar(S).
strip_stack(Error, Error).


:- meta_predicate swish_call(0).

'$swish wrapper'(Goal) :-
	catch(swish_call(Goal), E, throw(E)),
	deterministic(Det),
	(   tracing,
	    Det == false
	->  (   notrace,
	        debug(trace, 'Saved tracer', [])
	    ;	debug(trace, 'Restoring tracer', []),
	        trace,
		fail
	    )
	;   notrace
	).

swish_call(Goal) :-
	Goal,
	no_lco.

no_lco.

:- '$hide'(swish_call/1).
:- '$hide'(no_lco/0).


		 

add_source(Port, Frame, Prompt0, Prompt) :-
	debug(trace(line), 'Add source?', []),
	source_location(Frame, Port, Location), !,
	Prompt = Prompt0.put(source, Location),
	debug(trace(line), 'Source ~p ~p: ~p', [Port, Frame, Location]).
add_source(_, _, Prompt, Prompt).


source_location(Frame, Port, Location) :-
	parent_frame(Frame, Port, _Steps, ShowFrame, PC),
	(   clause_position(PC)
	->  true				;   prolog_frame_attribute(ShowFrame, parent, Parent),
	    frame_file(Parent, ParentFile),
	    \+ pengine_file(ParentFile)
	),
	(   debugging(trace(file))
	->  prolog_frame_attribute(ShowFrame, level, Level),
	    prolog_frame_attribute(ShowFrame, predicate_indicator, PI),
	    debug(trace(file), '\t[~d]: ~p', [Level, PI])
	;   true
	),
	frame_file(ShowFrame, File),
	pengine_file(File), !,
	source_position(ShowFrame, PC, Location).


parent_frame(Frame0, Port0, Steps, Frame, Port) :-
	parent_frame(Frame0, Port0, 0, Steps, Frame, Port).

parent_frame(Frame, Port, Steps, Steps, Frame, Port).
parent_frame(Frame, _Port, Steps0, Steps, Parent, PC) :-
	direct_parent_frame(Frame, DirectParent, ParentPC),
	Steps1 is Steps0+1,
	parent_frame(DirectParent, ParentPC, Steps1, Steps, Parent, PC).

direct_parent_frame(Frame, Parent, PC) :-
	prolog_frame_attribute(Frame, parent, Parent),
	prolog_frame_attribute(Frame, pc, PC).



frame_file(Frame, File) :-
	prolog_frame_attribute(Frame, clause, ClauseRef), !,
	(   clause_property(ClauseRef, predicate(system:'<meta-call>'/1))
	->  prolog_frame_attribute(Frame, parent, Parent),
	    frame_file(Parent, File)
	;   clause_property(ClauseRef, file(File))
	).
frame_file(Frame, File) :-
	prolog_frame_attribute(Frame, goal, Goal),
	qualify(Goal, QGoal),
	\+ predicate_property(QGoal, foreign),
	clause(QGoal, _Body, ClauseRef), !,
	clause_property(ClauseRef, file(File)).


pengine_file(File) :-
	sub_atom(File, 0, _, _, 'pengine://'), !.
pengine_file(File) :-
	sub_atom(File, 0, _, _, 'swish://').


clause_position(PC) :- integer(PC), !.
clause_position(exit).
clause_position(unify).
clause_position(choice(_)).


subgoal_position(ClauseRef, PortOrPC, _, _, _) :-
	debugging(trace(save_pc)),
	debug(trace(save_pc), 'Position for ~p at ~p', [ClauseRef, PortOrPC]),
	asserta(subgoal_position(ClauseRef, PortOrPC)),
	fail.
subgoal_position(ClauseRef, unify, File, CharA, CharZ) :- !,
	clause_info(ClauseRef, File, TPos, _),
	head_pos(ClauseRef, TPos, PosTerm),
	nonvar(PosTerm),
	arg(1, PosTerm, CharA),
	arg(2, PosTerm, CharZ).
subgoal_position(ClauseRef, choice(CHP), File, CharA, CharZ) :- !,
	(   prolog_choice_attribute(CHP, type, jump),
	    prolog_choice_attribute(CHP, pc, To)
	->  debug(gtrace(position), 'Term-position: choice-jump to ~w', [To]),
	    subgoal_position(ClauseRef, To, File, CharA, CharZ)
	;   clause_end(ClauseRef, File, CharA, CharZ)
	).
subgoal_position(ClauseRef, Port, File, CharA, CharZ) :-
	end_port(Port), !,
	clause_end(ClauseRef, File, CharA, CharZ).
subgoal_position(ClauseRef, PC, File, CharA, CharZ) :-
	debug(trace(source), 'In clause ~p at ~p', [ClauseRef, PC]),
	clause_info(ClauseRef, File, TPos, _),
	(   '$clause_term_position'(ClauseRef, PC, List)
	->  debug(trace(source), 'Term-position: for ref=~w at PC=~w: ~w',
		  [ClauseRef, PC, List]),
	    (   find_subgoal(List, TPos, PosTerm)
	    ->  true
	    ;   PosTerm = TPos,
		debug(trace(source),
		      'Clause source-info could not be parsed', []),
		fail
	    ),
	    nonvar(PosTerm),
	    arg(1, PosTerm, CharA),
	    arg(2, PosTerm, CharZ)
	;   debug(trace(source),
		  'No clause-term-position for ref=~p at PC=~p',
		  [ClauseRef, PC]),
	    fail
	).

end_port(exit).
end_port(fail).
end_port(exception).

clause_end(ClauseRef, File, CharA, CharZ) :-
	clause_info(ClauseRef, File, TPos, _),
	nonvar(TPos),
	arg(2, TPos, CharA),
	CharZ is CharA + 1.

head_pos(Ref, Pos, HPos) :-
	clause_property(Ref, fact), !,
	HPos = Pos.
head_pos(_, term_position(_, _, _, _, [HPos,_]), HPos).


find_subgoal([A|T], term_position(_, _, _, _, PosL), SPos) :-
	nth1(A, PosL, Pos), !,
	find_subgoal(T, Pos, SPos).
find_subgoal([1|T], brace_term_position(_,_,Pos), SPos) :- !,
	find_subgoal(T, Pos, SPos).
find_subgoal(_, Pos, Pos).




source_position(Frame, PC, _{file:File, from:CharA, to:CharZ}) :-
	debug(trace(pos), '~p', [source_position(Frame, PC, _)]),
	clause_position(PC),
	prolog_frame_attribute(Frame, clause, ClauseRef), !,
	subgoal_position(ClauseRef, PC, File, CharA, CharZ).
source_position(Frame, _PC, Position) :-
	prolog_frame_attribute(Frame, goal, Goal),
	qualify(Goal, QGoal),
	\+ predicate_property(QGoal, foreign),
	(   clause(QGoal, _Body, ClauseRef)
	->  subgoal_position(ClauseRef, unify, File, CharA, CharZ),
	    Position = _{file:File, from:CharA, to:CharZ}
	;   functor(Goal, Functor, Arity),
	    functor(GoalTemplate, Functor, Arity),
	    qualify(GoalTemplate, QGoalTemplate),
	    clause(QGoalTemplate, _TBody, ClauseRef)
	->  subgoal_position(ClauseRef, unify, File, CharA, CharZ),
	    Position = _{file:File, from:CharA, to:CharZ}
	;   find_source(QGoal, File, Line),
	    debug(trace(source), 'At ~w:~d', [File, Line]),
	    Position = _{file:File, line:Line}
	).

qualify(Goal, Goal) :-
	functor(Goal, :, 2), !.
qualify(Goal, user:Goal).

find_source(Predicate, File, Line) :-
	predicate_property(Predicate, file(File)),
	predicate_property(Predicate, line_count(Line)), !.


:- multifile pengines:prepare_goal/3.

pengines:prepare_goal(Goal0, Goal, Options) :-
	option(breakpoints(Breakpoints), Options),
	Breakpoints \== [],
	pengine_self(Pengine),
	pengine_property(Pengine, source(File, Text)),
	maplist(set_file_breakpoints(Pengine, File, Text), Breakpoints),
	Goal = (debug, Goal0).

set_file_breakpoints(_Pengine, PFile, Text, Dict) :-
	debug(trace(break), 'Set breakpoints at ~p', [Dict]),
	_{file:FileS, breakpoints:List} :< Dict,
	atom_string(File, FileS),
	(   PFile == File
	->  debug(trace(break), 'Pengine main source', []),
	    maplist(set_pengine_breakpoint(File, File, Text), List)
	;   source_file_property(PFile, includes(File, _Time)),
	    atom_concat('swish://', StoreFile, File)
	->  debug(trace(break), 'Pengine included source ~p', [StoreFile]),
	    storage_file(StoreFile, IncludedText, _Meta),
	    maplist(set_pengine_breakpoint(PFile, File, IncludedText), List)
	;   debug(trace(break), 'Not in included source', [])
	).

set_pengine_breakpoint(Owner, File, Text, Line) :-
	debug(trace(break), 'Try break at ~q:~d', [File, Line]),
	line_start(Line, Text, Char),
	(   set_breakpoint(Owner, File, Line, Char, Break)
	->  !, debug(trace(break), 'Created breakpoint ~p', [Break])
	;   print_message(warning, breakpoint(failed(File, Line, 0)))
	).

line_start(1, _, 0) :- !.
line_start(N, Text, Start) :-
	N0 is N - 2,
	offset(N0, sub_string(Text, Start, _, _, '\n')), !.


update_breakpoints(Breakpoints) :-
	breakpoint_by_file(Breakpoints, NewBPS),
	pengine_self(Pengine),
	pengine_property(Pengine, source(PFile, Text)),
	current_pengine_source_breakpoints(PFile, ByFile),
	forall(( member(File-FBPS, ByFile),
		 member(Id-Line, FBPS),
		 \+ ( member(File-NFBPS, NewBPS),
		      member(Line, NFBPS))),
	       delete_breakpoint(Id)),
	forall(( member(File-NFBPS, NewBPS),
		 member(Line, NFBPS),
		 \+ ( member(File-FBPS, ByFile),
		      member(_-Line, FBPS))),
	       add_breakpoint(PFile, File, Text, Line)).

breakpoint_by_file(Breakpoints, NewBPS) :-
	maplist(bp_by_file, Breakpoints, NewBPS).

bp_by_file(Dict, File-Lines) :-
	_{file:FileS, breakpoints:Lines} :< Dict,
	atom_string(File, FileS).

add_breakpoint(PFile, PFile, Text, Line) :- !,
	set_pengine_breakpoint(PFile, PFile, Text, Line).
add_breakpoint(PFile, File, _Text, Line) :-
	atom_concat('swish://', Store, File), !,
	storage_file(Store, Text, _Meta),
	set_pengine_breakpoint(PFile, File, Text, Line).
add_breakpoint(_, _, _, _Line).			

current_pengine_source_breakpoints(PFile, ByFile) :-
	findall(Pair, current_pengine_breakpoint(PFile, Pair), Pairs0),
	keysort(Pairs0, Pairs),
	group_pairs_by_key(Pairs, ByFile).

current_pengine_breakpoint(PFile, PFile-(Id-Line)) :-
	breakpoint_property(Id, file(PFile)),
	breakpoint_property(Id, line_count(Line)).
current_pengine_breakpoint(PFile, File-(Id-Line)) :-
	source_file_property(PFile, includes(File, _Time)),
	breakpoint_property(Id, file(File)),
	breakpoint_property(Id, line_count(Line)).



:- multifile prolog_clause:open_source/2.

prolog_clause:open_source(File, Stream) :-
	sub_atom(File, 0, _, _, 'pengine://'), !,
	(   pengine_self(Pengine)
	->  true
	;   debugging(trace(_))
	),
	pengine_property(Pengine, source(File, Source)),
	open_string(Source, Stream).
prolog_clause:open_source(File, Stream) :-
	atom_concat('swish://', GittyFile, File), !,
	storage_file(GittyFile, Data, _Meta),
	open_string(Data, Stream).


		 

:- dynamic
	user:prolog_exception_hook/4,
	installed/1.

exception_hook(Ex, Ex, _Frame, Catcher) :-
	Catcher \== none,
	prolog_frame_attribute(Catcher, predicate_indicator, PI),
	debug(trace(exception), 'Ex: ~p, catcher: ~p', [Ex, PI]),
	PI == '$swish wrapper'/1,
	trace,
	fail.


install_exception_hook :-
	installed(Ref),
	(   nth_clause(_, I, Ref)
	->  I == 1, !				;   retractall(installed(Ref)),
	    erase(Ref),				    fail
	).
install_exception_hook :-
	asserta((user:prolog_exception_hook(Ex, Out, Frame, Catcher) :-
			exception_hook(Ex, Out, Frame, Catcher)), Ref),
	assert(installed(Ref)).

:- install_exception_hook.


		 

:- multifile
	sandbox:safe_primitive/1.

sandbox:safe_primitive(system:trace).
sandbox:safe_primitive(system:notrace).
sandbox:safe_primitive(system:tracing).
sandbox:safe_primitive(edinburgh:debug).
sandbox:safe_primitive(system:deterministic(_)).


		 

:- multifile
	prolog:message/3.

prolog:message(breakpoint(failed(File, Line, _Char))) -->
	[ 'Failed to set breakpoint at ~w:~d'-[File,Line] ].
:- use_module(server).

:- initialization server(3050).
:- module(server,
	  [ server/0,
	    server/1					  ]).
:- use_module(library(http/thread_httpd)).
:- use_module(library(http/http_dispatch)).
:- use_module(swish).


server :-
	server(3050).
server(Port) :-
	http_server(http_dispatch,
		    [ port(Port),
		      workers(16)
		    ]).


:- module(swish_app,
	  [
	  ]).
:- use_module(library(pengines)).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/http_path)).
:- use_module(library(option)).
:- use_module(library(settings)).

:- use_module(lib/config, []).
:- use_module(lib/page, []).
:- use_module(lib/storage).
:- use_module(lib/include).
:- use_module(lib/csv).
:- use_module(lib/examples).
:- use_module(lib/highlight).
:- use_module(lib/markdown).
:- use_module(lib/template_hint, []).


		 

user:file_search_path(swish_web, swish(web)).
user:file_search_path(js,        swish_web(js)).
user:file_search_path(css,       swish_web(css)).
user:file_search_path(icons,     swish_web(icons)).

set_swish_path :-
	absolute_file_name(swish('swish.pl'), _,
			   [file_errors(fail), access(read)]), !.
set_swish_path :-
	prolog_load_context(directory, Dir),
	asserta(user:file_search_path(swish, Dir)).

:- set_swish_path.

http:location(swish, root(.), [priority(-100)]).


		 


:- set_setting_default(http:cors, [*]).


		 

:- multifile
	swish_config:config/2,
	swish_config:source_alias/2.


term_expansion(swish_config:config(Config, _Value), []) :-
	clause(swish_config:config(Config, _), _).

swish_config:config(show_beware,        true).
swish_config:config(tabled_results,     false).
swish_config:config(application,        swish).
swish_config:config(csv_formats,        [prolog]).
swish_config:config(community_examples, false).
swish_config:config(public_access,      false).



                 

:- multifile
	pengines:prepare_module/3.

:- pengine_application(swish).
:- use_module(swish:lib/render).
:- use_module(swish:lib/trace).
:- use_module(swish:lib/jquery).
:- use_module(swish:library(pengines_io)).
pengines:prepare_module(Module, swish, _Options) :-
	pengines_io:pengine_bind_io_to_html(Module).


:- use_module(library(clpfd), []).
:- use_module(library(clpb), []).


:- use_module(swish(lib/render/sudoku),	  []).
:- use_module(swish(lib/render/chess),	  []).
:- use_module(swish(lib/render/table),	  []).
:- use_module(swish(lib/render/codes),	  []).
:- use_module(swish(lib/render/svgtree),  []).
:- use_module(swish(lib/render/graphviz), []).
:- use_module(swish(lib/render/c3),	  []).
:- use_module(library(git)).
:- use_module('../lib/gitty').

git_history(Dir, File, Limit, Objects) :-
	git_shortlog(Dir, ShortLog, [git_path(File),limit(Limit)]),
	maplist(git_content(Dir,File), ShortLog, Objects).

git_content(Dir, File, ShortLog, git{dir:Dir,file:File,commit:Commit,data:Data}) :-
	git_log_data(commit_hash, ShortLog, Commit),
	setup_call_cleanup(
	    git_open_file(Dir, File, Commit, In),
	    read_string(In, _, Data),
	    close(In)).

git_log(Dir, File) :-
	git_history(Dir, File, 100, Objects),
	append(_, [New,Old|_], Objects),
	(   data_diff(Old.data, New.data, Diffs),
	    maplist(udiff_string, Diffs, Strings)
	->  atomics_to_string(Strings, '\n', String),
	    format(user_error, '~s~n', String)
	;   gtrace,
	    data_diff(Old.data, New.data, Diffs),
	    maplist(udiff_string, Diffs, Strings)
	->  atomics_to_string(Strings, '\n', String),
	    format(user_error, '~s~n', String)
	).


:- use_module(library(dcg/basics)).
:- use_module(library(pure_input)).
:- use_module(library(readutil)).
:- use_module(library(apply)).
:- use_module(library(main)).
:- use_module(library(debug)).

:- initialization main.

main([In, Out]) :-
	process(In, Out).
main([In]) :-
	process(In, In).

process(In, Out) :-
	phrase_from_file(css(Data), In),
	setup_call_cleanup(
	    open(Out, write, O),
	    maplist(save(O), Data),
	    close(O)).

css([s(S), url(URL)|Rest]) -->
	string(Codes),
	"url(", !, string(URLCodes), ")", !,
	{ string_codes(S, Codes),
	  atom_codes(URL, URLCodes)
	},
	css(Rest).
css([s(S)]) -->
	string(Codes), \+ [_], !,
	{ string_codes(S, Codes) }.

save(Out, s(S)) :- !,
	format(Out, '~s', [S]).
save(Out, url(S)) :-
	\+ sub_string(S, 0, _, _, 'data:'),
	file_name_extension(_, Ext, S),
	image_ext(Ext),
	size_file(S, Size),
	(   sub_string(S, _, _, _, '/bower_components/')
	->  true
	;   Size < 2000
	), !,
	debug(css, 'Inlining image: ~q (~D bytes)~n', [S, Size]),
	read_file_to_codes(S, Codes, [type(binary)]),
	phrase(base64(Codes), Base64),
	format(Out, 'url(data:image/~w;base64,~s)', [Ext,Base64]).
save(Out, url(S)) :-
	debug(css, 'URL: ~q~n', [S]),
	format(Out, 'url(~s)', [S]).

image_ext(gif).
image_ext(png).
#!/usr/bin/env swipl

:- use_module(library(dcg/basics)).
:- use_module(library(pio)).
:- use_module(library(main)).

:- initialization main.

main([]) :- !,
	main(['swish.js', 'build.js.in']).
main([Main, Build]) :-
	config(Main, Config),
	phrase_from_file((string(Pre), "@CONFIG@", string(Post)), Build),
	file_name_extension(OutFile, in, Build),
	setup_call_cleanup(
	    open(OutFile, write, Out),
	    format(Out, '~s~s,~s', [Pre, Config, Post]),
	    close(Out)).

config(File, Config) :-
	phrase_from_file(config(Config), File).

config(Config) -->
	...,
	"require.config(", whites, "{",
	(   blanks, "urlArgs:", string_without(`\n`, _)
	->  []
	;   []
	),
	string(Config), blanks,
	"}", whites, ")", whites, ";", whites, "//", whites, "require.config", !,
	... .

... --> []|[_],... .
:- multifile term//1.

term(T)                           --> qual_expr(T) ; anat_expr(T).
qual_expr(Q and qualityOf some A) --> qual(Q),[of],anat_expr(A).
anat_expr(P and partOf some W)    --> anat(W),anat_expr(P).
anat_expr(A)                      --> anat(A).

anat(A)                           -->
    {entailed(subClassOf(A,anatomical_entity)),
     labelAnnotation_value(A,Label)},
    [Label].
qual(Q)                           -->
    {entailed(subClassOf(Q,quality)),
     labelAnnotation_value(Q,Label)},
     [Label].

:- use_module(library('thea2/owl2_model')).
:- use_module(library('thea2/owl2_plsyn')).
:- use_module(library('thea2/owl2_io')).
:- use_module(library('thea2/owl2_basic_reasoner')).

:- multifile term//1.

class_label(C,Label) :-
        equivalent_to(C,Expr),
        plsyn_owl(ExprX,Expr),
        phrase(term(ExprX),Toks,[]),
        concat_atom(Toks,' ',Label).

use_ids_as_labels :-
        forall(class(C),
               assert_axiom(annotationAssertion('http://www.w3.org/2000/01/rdf-schema#label', C, literal(C)))).

t :-
        load_axioms('testont_phenotype.pl'),
        consult('grammars/phenotype.pl'),
        use_ids_as_labels,
        forall(class_label(P,Label),
               format('~w => ~w~n',[P,Label])).




class(quality).
class(shape).
class(length).
class(mass).

subClassOf(shape,quality).
subClassOf(length,quality).
subClassOf(mass,quality).

class(anatomical_entity).
class(cell).
class(cell_part).

class(organ).
class(lung).
class(brain).

class(neuron).
class(pyramidal_neuron).
class(axon).

subClassOf(cell,anatomical_entity).
subClassOf(cell_part,anatomical_entity).
subClassOf(neuron,cell).
subClassOf(pyramidal_neuron,neuron).
subClassOf(axon,cell_part).
subClassOf(organ,anatomical_entity).
subClassOf(lung,organ).
subClassOf(brain,organ).

class(p1).
equivalentClasses([p1,intersectionOf([length,someValuesFrom(qualityOf,intersectionOf([axon,someValuesFrom(partOf,pyramidal_neuron)]))])]).
class(p2).
equivalentClasses([p2,intersectionOf([length,someValuesFrom(qualityOf,axon)])]).



:- use_module(library('thea2/owl2_model')).
:- use_module(library('thea2/owl2_io')).
:- use_module(library('thea2/owl2_basic_reasoner')).

ontology_references_class_in(O,C,O2) :-
        ontologyAxiom(O,Ax),
        axiom_references(Ax,C),
        class(C),
        ontologyAxiom(O2,class(C)),
        O2\=O.

mireot(O,O2,Strategy) :-
        setof(ref(O,C,O2),
              ontology_references_class_in(O,C,O2),
              Refs),
                        findall(ref(O,CA,O2),
                mireot_extend_refs(O,O2,Refs,CA,Strategy),
                ExtRefs),
        setof(Ref,member(Ref,ExtRefs),ExtRefsU),
        forall(member(ref(O,C,O2),ExtRefsU),
               mireot_class(O,C,O2)).


mireot_extend_refs(O,O2,Refs,CA,lca) :-
        member(O-C1-O2,Refs),
        member(O-C2-O2,Refs),
        least_common_ancestor(C1,C2,CA).
mireot_extend_refs(O,O2,Refs,CA,ancestor) :-
        member(O-C-O2,Refs),
        entailed(subClassOf(X,A)).

mireot_class(O,C,O2) :-
        assert_axiom(class(C),O),
        assert_axiom(annotationAssertion('http://purl.obolibrary.org/obo/OBI_0000283',C,O2),O),         format(user_error,'  Mireoted ~w~n',[C]).

mireot_files(InFile,OutFile,O) :-
        load_axioms(InFile,owl,[imports(true)]),
        (   var(O)
        ->  (   imports_closure_root(O)
            ->  true
            ;   throw('must specify ontology'))
        ;   true),
        format(user_error,'base ontology: ~w~n',[O]),
        forall(mireot(O,O2),
               format(user_error,'mireoted from ~w~n',[O2])),
        save_axioms(OutFile,owl,[ontology(O)]).

imports_closure_root(O) :-
        ontology(O),
        \+ ontologyImport(_,O).

common_ancestor(X,Y,A) :-
  entailed(subClassOf(X,A)),
  entailed(subClassOf(Y,A)).

least_common_ancestor(X,Y,A) :-
  common_ancestor(X,Y,A),
  \+ ((common_ancestor(X,Y,A2),
       A2\=A,
       entailed(subClassOf(A2,A)))).







:- use_module('thea_opencalais.pl').
:- use_module('../../owl2_util.pl').
:- use_module('../../owl2_from_rdf.pl').

pv_attr(Property,List,Value) :-
	member(Property=literal(Value),List),!.
pv_attr(Property,List,Value) :-
	member(Property=ID,List),
	oc_entity(ID,_,IDPVList,_,_),
	pv_attr('http://s.opencalais.com/1/pred/name',IDPVList,Value),!.

pv_attr(_,_,'n/a').


person_travel(Person,Date,DateString,Origin,Destination,Status,PVList) :-
	oc_relation(_I,'http://s.opencalais.com/1/type/em/r/PersonTravel',PVList),
	pv_attr('http://s.opencalais.com/1/pred/person',PVList,Person),
	pv_attr('http://s.opencalais.com/1/pred/locationdestination',PVList,Destination),
	pv_attr('http://s.opencalais.com/1/pred/locationorigin',PVList,Origin),
	pv_attr('http://s.opencalais.com/1/pred/date',PVList,Date),
	pv_attr('http://s.opencalais.com/1/pred/datestring',PVList,DateString),
	pv_attr('http://s.opencalais.com/1/pred/status',PVList,Status).


quotation(Person,Quotation) :-
	 oc_relation(_I,'http://s.opencalais.com/1/type/em/r/Quotation',PVList),
	 pv_attr('http://s.opencalais.com/1/pred/person',PVList,Person),
	 pv_attr('http://s.opencalais.com/1/pred/quote',PVList,Quotation).




o :- owl_parse_rdf('owl.opencalais-4.3.xml.owl',[imports(false),clear(complete)]).
pope :- oc_rest(http('http://news.bbc.co.uk/2/hi/uk_news/8492597.stm'),'',_X).
un :- oc_rest(http('http://www.scoop.co.nz/stories/WO0002/S00002.htm'),'',_X).
papal_visits :- oc_rest(file(papal_visits),'',_X).
stats(File) :- owl_statistics(all,XML), open(File,write,S), xml_write(S,XML,[header(true)]),close(S).


dereference(URI,Options):-
	catch(owl_parse_rdf(URI,Options),io_error(A,B,C),(nl,nl,print(A-B-C),nl,nl)).

dereference(URI,Options,Ext) :-
	atom_concat(URI,Ext,Ext_URI),
	catch(owl_parse_rdf(Ext_URI,Options),io_error(A,B,C),(nl,nl,print(A-B-C),nl,nl)).








:- module(thea_opencalais,
	  [ oc_rest/3,
	    oc_entity/5,
	    oc_relation/3,
	    oc_resolution/3
	  ]).

:-use_module(library('http/http_client')).
:-use_module('../../owl2_model.pl').
:-use_module('../../owl2_from_rdf.pl').
:-use_module('../../owl2_rl_rules.pl').




:- dynamic open_calais/1.
:- multifile open_calais/1.



oc_rest(_Request,_Params,_Result) :-
	not(open_calais(license(_))),
	throw(open_calais_exception(missing_license)),!.

oc_rest(Request,Params,Result) :-
	open_calais(license(LicenseID)),
        (   Request = http(URL) -> http_get(URL,Content,[]);
	Request = file(Filename) -> read_file_to_codes(Filename,Codes,[]),atom_codes(Content,Codes) ;
	Request = text(Content) -> true ; throw(open_calais_exception(invalid_request_type))),

	http_post('api.opencalais.com/enlighten/rest/',
		  form(['licenseID'=LicenseID,content=Content,paramsXML=Params]),
		  Result,[]),
	open('_opencalais',write,St),
	write(St,'<?xml version="1.0"?>'),nl(St),write(St,Result),
	close(St),
	owl_parse_rdf('_opencalais',[imports(false)]).





oc_entity(I,C,PVList,Instances,Resolutions) :-
	is_entailed(subClassOf(C,'http://s.opencalais.com/1/type/em/e/MarkupEntity'),_),
	classAssertion(C,I),
	findall(P=V,propertyAssertion(P,I,V),PVList),

	findall(instance_info(Instance,InstancePV),
		( propertyAssertion('http://s.opencalais.com/1/pred/subject',Instance,I),
		  classAssertion('http://s.opencalais.com/1/type/sys/InstanceInfo',Instance),
		  findall(P=V,propertyAssertion(P,Instance,V),InstancePV)
		),
		Instances),
	findall(resolution_info(Resolution,ResolutionPV),
		( propertyAssertion('http://s.opencalais.com/1/pred/subject',Resolution,I),
		  is_entailed(subClassOf(RC,'http://s.opencalais.com/1/type/er/ResolvedEntity'),_),
		  classAssertion(RC,Resolution),
		  findall(P=V,propertyAssertion(P,Resolution,V),ResolutionPV)
		),
		Resolutions).


oc_relation(I,C,PVList) :-
	class(C),subClassOf(C,'http://s.opencalais.com/1/type/em/r/Relation'),
	classAssertion(C,I),
	findall(P=V,propertyAssertion(P,I,V),PVList).



oc_resolution(R,C,PVList) :-
	is_entailed(subClassOf(C,'http://s.opencalais.com/1/type/er/ResolvedEntity'),_Expl),
	classAssertion(C,R),
	findall(P=V,propertyAssertion(P,R,V),PVList).







:- module(owlmacros,
	  [expand_all/0]).

:- use_module(library('thea2/owl2_model')).
:- use_module(library('thea2/owl2_io')).
:- use_module(library('thea2/owl2_popl')).
:- use_module(library('thea2/owl2_manchester_parser')).

literal_atom(literal(lang(_,A)),A) :- !.
literal_atom(literal(type(_,A)),A) :- !.
literal_atom(literal(A),A).


expand_assertion_to(P,T) :- 
	annotationAssertion('http://purl.obolibrary.org/obo/IAO_0000425',P,V),
	literal_atom(V,T).

expand_expression_to(P,T) :- 
	annotationAssertion('http://purl.obolibrary.org/obo/IAO_0000424',P,V),
	literal_atom(V,T).

parse_template(T,PT,[X,Y]) :-
	debug(owlmacros_details,'parsing: ~w',[T]),        
	owl_parse_manchester_expression(T,PT_1),
	!,
	deep_replace(PT_1,['?X'-X,'?Y'-Y],PT).
parse_template(T,PT,[X,Y]) :-
	owl_parse_manchester_frame(T,Axioms),
	!,
                        reverse(Axioms,AxiomsR),
	member(Axiom,AxiomsR),
	deep_replace(Axiom,['?X'-X,'?Y'-Y],PT).

parse_template(T,_,_) :-
	throw(error(no_parse(T))).

collect_mapping(annotationAssertion(P,X,Y)-PT) :-
	expand_assertion_to(P,T),
	parse_template(T,PT,[X,Y]).
collect_mapping(subClassOf(X,someValuesFrom(P,Y))-PT) :-
	expand_assertion_to(P,T), 	parse_template(T,PT,[X,Y]).
collect_mapping(subClassOf(X,hasValue(P,Y))-PT) :-
	expand_assertion_to(P,T), 	parse_template(T,PT,[X,Y]).
collect_mapping(someValuesFrom(P,Y)-PT) :-
	expand_expression_to(P,T),
	parse_template(T,PT,[_,Y]).
collect_mapping(hasValue(P,Y)-PT) :-
	expand_expression_to(P,T),
	parse_template(T,PT,[_,Y]).


expand_all :-
	!,
	debug(owlmacros,'expand_all...',[]),
        forall(collect_mapping(T1-T2),
               replace_expression_in_all_axioms(T1,T2)),
        debug(owlmacros,'done',[]).



deep_replace(Expr,_,Expr) :- var(Expr),!.

deep_replace([],_,[]) :- !.
deep_replace([H|T],Map,[H2|T2]) :-
	!,
	deep_replace(H,Map,H2),
	deep_replace(T,Map,T2).

deep_replace(Expr,Map,Expr3) :-
			(   Map=[_-V1|_],
	    var(V1)
	->  Map2=Map
	;   copy_term(Map,Map2)),
	member(Expr-Var,Map2),
		!,
	deep_replace(Var,Map,Expr2),
	deep_replace(Expr2,Map,Expr3).

deep_replace(Expr,Map,Expr2) :-
	Expr=..[F|Args],
	Args=[_|_],
	!,
	deep_replace(Args,Map,Args2),
	Expr2=..[F|Args2].
deep_replace(Expr,_,Expr) :- !. 



	


:- use_module(library('thea2/owl2_model')).
:- use_module(library('thea2/owl2_io')).
:- use_module(library('thea2/owl2_basic_reasoner')).

class_freq(C,Num) :- aggregate(count,I,entailed(classAssertion(C,I)),Num).
num_individuals(Num) :- aggregate(count,I,C^classAssertion(C,I),Num).
class_prob(C,P) :- class_freq(C,Class_freq),num_individuals(Total),P is Class_freq/Total.
class_ic(C,IC) :- class_prob(C,P),IC is -log(P)/log(2).

common_ancestor(X,Y,A) :-
  entailed(subClassOf(X,A)),
  entailed(subClassOf(Y,A)).

least_common_ancestor(X,Y,A) :-
  common_ancestor(X,Y,A),
  \+ ((common_ancestor(X,Y,A2),
       A2\=A,
       entailed(subClassOf(A2,A)))).

individual_pair_class_ic(X,Y,CZ,IC) :-
        classAssertion(CX,X),
        classAssertion(CY,Y),
        least_common_ancestor(CX,CY,CZ),
        class_ic(CZ,IC).

semsim(X,Y,maxIC,MaxIC,MaxC) :-
        setof(IC-CZ,individual_pair_class_ic(X,Y,CZ,IC),ICClassPairsR),
        reverse(ICClassPairsR,MaxIC-MaxC).
        
        




:- module(webthea,
          [
           start_server/0,
           start_server/1,
           start_server/2
          ]).

:- use_module(library('thea2/owl2_model')).
:- use_module(library('thea2/owl2_io')).
:- use_module(library('thea2/owl2_to_prolog_dlp')).

:- use_module(library('http/thread_httpd')).
:- use_module(library('http/http_dispatch')).
:- use_module(library('http/html_write')).
:- use_module(library('http/http_parameters')).

start_server :-
        start_server(9000,[]).

start_server(Port) :-
        start_server(Port,[]).

start_server(Port,Opts) :-
        forall(member(load(OwlFile),Opts),
              load_axioms(OwlFile)),
        http_server(http_dispatch, [port(Port)]).

:- http_handler('/', root, []).
:- http_handler('/hello/world', hello_world, []).
:- http_handler('/view', view_entity, []).
:- http_handler('/all/owl', show_all(owl), []).
:- http_handler('/all/dlp', show_all(dlp), []).
:- http_handler('/all/owlpl', show_all(owlpl), []).

param(title, [optional(true)]).
param(name,  [length >= 2 ]).
param(age,   [integer]).
param(url,   [optional(true),default('http://')]).
param(open,  [zero_or_more]).
param(entity,  []).

root(Request) :-
        http_parameters(Request,
                        [ url(Url),
                          open(OpenClasses)
                        ],
                        [ attribute_declarations(param)
                        ]),
        reply_html_page([ title('Demo server')
                        ],
                        [ p(a(href('hello/world'), hello)),
                          \navbar,
                          form([p('Enter URL'),
                                input([type(textfield),name(url),rows(1),value(Url)],'URL'),
                                p('route:'),
                                select([name(route)],
                                       [option([value(x)])]),
                               input([name(submit),type(submit),value(convert)])]),
                          \add_axiom_form,
                          \subclass_tree(OpenClasses)
                        
                        ]).

hello_world(Request) :-
        http_parameters(Request,
                        [ title(Title),
                          name(Name),
                          age(Age)
                        ],
                        [ attribute_declarations(param)
                        ]),
        reply_html_page([ title('Hello World')
                        ],
                        [ h1('Hello World'),
                          p('This is my first page')
                        ]).

show_all(Fmt,Request) :-
        tmp_file(Fmt,File),
        save_axioms(File,Fmt),
        read_file_to_codes(File,Codes,[]),
        atom_codes(A,Codes),
        reply_html_page([ title(Fmt)
                        ],
                        [ pre(A)
                        ]).

view_entity(Request) :-
        http_parameters(Request,
                        [ entity(E)
                        ],
                        [ attribute_declarations(param)
                        ]),
        reply_html_page([ title(E)],
                        [ h2('Axioms'),
                          \axiom_infos(E),
                          h2('Referenced in'),
                          \axiom_infos_referencing(E)
                        ]).

axiom_infos(E) -->
        {findall(\axiom_info(A),axiom_directly_about(A,E),L)},
        html(L).
axiom_infos_referencing(E) -->
        {findall(\axiom_info(A),axiom_references(A,E),L)},
        html(L).

        


navbar --> html([p(a(href('all/owl'),owl)),
                 p(a(href('all/dlp'),dlp)),
                 p(a(href('all/owlpl'),owlpl))]).

add_axiom_form -->
        {
         findall(option([value(A)]),axiompred(A/_),Opts)
         },
        html([
              form([p('Add Axiom'),
                    select([name(add_axiom)],
                           Opts),
                    input([name(submit),type(submit),value(add)])])
             ]).

subclass_tree(OpenClasses) -->
        {findall(\subclass_tree(C,OpenClasses),(class(C),\+subClassOf(C,_)),Elts)},
        html([p(open),
              p(OpenClasses)|
              Elts]
            ).

subclass_tree(Class,OpenClasses) -->
        {
         (   member(Class,OpenClasses)
         ->  findall(\subclass_tree(SubClass,OpenClasses),
                     subClassOf(SubClass,Class),
                     ChildElts)
         ;   (   \+ \+ subClassOf(_,Class)
             ->  findall(open(C),member(C,[Class|OpenClasses]),Params),
                 ChildElts=[' ',a(href(location_by_id(root)+Params),'+')]
             ;   ChildElts=[]))
         },
        html([ul(li([\class_info(Class)|
                     ChildElts]))]).

axiom_info(A) -->
        {A=..[P|L],
         findall(\entity_info(E),member(E,L),EL)},
        html([p(P),'(',p(EL),')']).

class_info(C) --> entity_info(C).

entity_info(C) -->
        {atom(C),
         display_label(C,Label)},
        !,
        html([' ',a(href(location_by_id(view_entity)+'?entity='+encode(C)),Label),' ']).

entity_info(L) -->
        {is_list(L),
         findall(\entity_info(E),member(E,L),EL)},
        html(EL).

entity_info(A) -->
        {A=..[P|L],
         findall(\entity_info(E),member(E,L),EL)},
        html([p(P)|EL]).

display_label(C,Label) :- labelAnnotation_value(C,Label),!.
display_label(C,Label) :- concat_atom([_,Label],'#',C),!.
display_label(C,C).

            


#!/usr/bin/perl -w

use strict;

while (my $f = shift @ARGV) {
    if ($f =~ /bench\d\-(\S+).out/) {
        parse_bench($f,$1);
    }
    elsif ($f =~ /owlapi\d\-(\S+).out/) {
        parse_owlapi($f,$1);
    }
    else {
        die $f;
    }
}
exit 0;

sub parse_bench {
    my $f = shift;
    my $id = shift;
    open(F,$f) || die $f;
    while (<F>) {
        if (/load_time:\s+(\S+)/) {
            print "TIME\tTHEA\t$id\t$1\n";
        }
        if (/^Heap\s+:\s+(\d+),(\d+),(\d+) Bytes/) {
            my $m = $1*1000000 + $2*1000 + $3;
            $m /= 1000000;
            print "MEM\tTHEA\t$id\t$m\n";
        }
    }
    close(F);
}

sub parse_owlapi {
    my $f = shift;
    my $id = shift;
    my $n=0;
    open(F,$f);
    while (<F>) {
        if (/^real\s+(\d+)m(\S+)s/) {
            my $s = $1 * 60 + $2;
            print "TIME\tOWLAPI\t$id\t$s\n";
        }
        if (/diff:(\d+)\s+\(bytes/) {
            $n++;
            my $m = $1/1000000;
            print "MEM\tOWLAPI\t$id\t$m\n"
                if $n == 2;
        }
    }
    close(F);
}
:- use_module(library('thea2/owl2_util')).
:- use_module(library('thea2/swrl_rdf_hooks')).
:- use_module(library('thea2/swrl')).
:- use_module(library('thea2/owl2_io')).
:- use_module(library('thea2/owl2_java_owlapi')).


run(FilesAtom) :-
        concat_atom(Args,' ',FilesAtom),
                forall(member(Arg,Args),
               load_axioms(Arg,_,[])),
        create_reasoner(Man,pellet,Reasoner),
        create_factory(Man,Fac),
        build_ontology(Man,Fac,Ont),
        (   is_consistent(Reasoner)
        ->  format(user_error,'Is Consistent. Reasoning...~n',[]),
            reasoner_classify(Reasoner,Man,Ont),
            format(user_error,'Done Reasoning~n',[]),
            forall(inferred_axiom(Reasoner,Fac,Ax),
                   format('~q.~n',[Ax]))
        ;   format('**INCONSISTENT**~n')),
        format(user_error,'Done!~n',[]).




:- use_module('../owl2_io.pl').
:- use_module('../owl2_from_rdf.pl').

main :-
	owl_parse_rdf('http://dbpedia.org/data/Velodrom',[imports(true),clear(complete)]).


deref(URI) :-
	owl_parse_rdf(URI,[imports(true),clear(complete)]).

what_axioms(All,ClassAssertions,PropertyAssertions) :-
	aggregate_all(count,owl2_model:axiom(classAssertion(_,_)),ClassAssertions),
	aggregate_all(count,owl2_model:axiom(propertyAssertion(_,_,_)),PropertyAssertions),
	aggregate_all(count,owl2_model:axiom(_),All).




:- module(thea_owllink,[main/1]).

:- use_module('../owl2_util.pl').
:- use_module('../owl2_model.pl').
:- use_module('../owl2_from_rdf.pl').
:- use_module('../owl2_owllink.pl').
:- use_module(library('http/http_client')).







main(URL) :-

        owl_link(URL,[getDescription],Response1,
	     [reasoner,
	      request_file='../examples/owllink/thea-owllink-example-GetDescription-request.xml',
	      response_file='../examples/owllink/owllink-example-GetDescription-response-20091016.xml']),
    print('--------------------'),nl,print(Response1),nl,

        owl_link(URL,[createKB([kb='http://owllink.org/examples/KB_1'],[]),
		  tell('http://owllink.org/examples/KB_1',
		       [subClassOf('A','B'),
			subClassOf('B','C')]),
		  isClassSatisfiable('http://owllink.org/examples/KB_1','A'),
		  releaseKB('http://owllink.org/examples/KB_1')
		 ],Response2,
	     [reasoner,
	      request_file='../examples/owllink/thea-owllink-example-CreateKB-request.xml',
	      response_file='../examples/owllink/owllink-example-CreateKB-response-20091016.xml']),
    print('--------------------'),nl,print(Response2),nl,

    
    owl_link(URL,[createKB([kb='http://owllink.org/examples/KB_1'],[]),
		  getSettings('http://owllink.org/examples/KB_1'),
		  releaseKB('http://owllink.org/examples/KB_1')],Response3,
	     [reasoner,
	      request_file='../examples/owllink/thea-owllink-example-RetrieveSettings-request.xml',
	      response_file='../examples/owllink/owllink-example-GetSettings-response-20091016.xml'
	     ]),
    print('--------------------'),nl,print(Response3),nl,


        owl_link(URL,[createKB([kb='http://owllink.org/examples/KB_1'],[]),
		  set('http://owllink.org/examples/KB_1','abbreviatesIRIs',[false]),
		  getSettings('http://owllink.org/examples/KB_1'),
		  releaseKB('http://owllink.org/examples/KB_1')],Response4,
	     [reasoner,
	      request_file='../examples/owllink/thea-owllink-example-SetSettings-request.xml',
	      response_file='../examples/owllink/owllink-example-Set-response-20091016.xml']),
    print('--------------------'),nl,print(Response4),nl,

        owl_link(URL,[createKB([kb='http://owllink.org/examples/KB_2'],
					['Prefix'(name='test:',fullIRI='http://www.owllink.orgtest/ont'),
					'Prefix'(name='ont:',fullIRI='http://owllink.org/examples/ontology')]),
		  tell('http://owllink.org/examples/KB_2',
		       [subClassOf('test:ClassA','ont:ClassA')]),
		  set('http://owllink.org/examples/KB_2','abbreviatesIRIs',[false]),
		  getSubClasses('http://owllink.org/examples/KB_2','http://owllink.org/examples/ontology#ClassA',false),
		  getSubClasses('http://owllink.org/examples/KB_2','ont:ClassA',false),
		  set('http://owllink.org/examples/KB_2','abbreviatesIRIs',[true]),
		  getSubClasses('http://owllink.org/examples/KB_2','http://owllink.org/examples/ontology#ClassA',false),
		  releaseKB('http://owllink.org/examples/KB_2')
		 ],
	     Response5,
	     [reasoner,
	      request_file='../examples/owllink/thea-owllink-example-Prefixes-request.xml',
	      response_file='../examples/owllink/owllink-example-Prefix-response-20091016.xml']),
    print('--------------------'),nl,print(Response5),nl,

        owl_link(URL,[createKB([kb='http://owllink.org/examples/KB_3'],
					['Prefix'(name='test:',fullIRI='http://www.owllink.orgtest/ont'),
					'Prefix'(name='ont:',fullIRI='http://owllink.org/examples/ontology')]),
			       loadOntology('http://owllink.org/examples/KB_3',
					   [ontologyIRI('IRI'='http://www.owllink.org/examples/ontologies/myOntology'),
					    ontologyIRI('IRI'='http://www.owllink.org/examples/ontologies/myOntology2'),							    'IRIMapping'(key='http://www.owlllink.org/examples/ontologies/myOntology',										 'IRI'='localhost://examples/ontologies/myOntology')
					   ]),
			       tell('http://owllink.org/examples/KB_3',
				    [subClassOf('ont:ClassA','test:ClassA')])
			      ],Response6,
	     [reasoner,
	      request_file='../examples/owllink/thea-owllink-example-LoadOntology-request.xml',
	      response_file='../examples/owllink/owllink-example-LoadOntology-response-20091016.xml']),
    print('--------------------'),nl,print(Response6),nl,

        owl_link(URL,[createKB([kb='http://owllink.org/examples/KB_1'],[]),
			       tell('http://owllink.org/examples/KB_1',
				    [subClassOf('B','A'),
				     subClassOf('C','A'),
				     equivalentClasses(['D','E']),
				     classAssertion('A','iA'),
				     subClassOf('C','A')
				    ]),
			       getAllClasses('http://owllink.org/examples/KB_1'),
			       getEquivalentClasses('http://owllink.org/examples/KB_1','D'),
			       isClassSubsumedBy('http://owllink.org/examples/KB_1',
						 'http://www.w3.org/2002/07/owl#Thing',
						 'http://www.w3.org/2002/07/owl#Nothing'),
			       getSubClasses('http://owllink.org/examples/KB_1','C'),
			       createKB([kb='http://owllink.org/examples/KB_2'],[]),
			       tell('http://owllink.org/examples/KB_2',
				    [subClassOf('A','B')]),
			       releaseKB('http://owllink.org/examples/KB_1'),
			       getAllClasses('http://owllink.org/examples/KB_1')
			      ],Response7,
	     	     [reasoner,
		      request_file='../examples/owllink/thea-owllink-example-PoolingRequests-request.xml',
		      response_file='../examples/owllink/owllink-example-poolingrequests-response-20091016.xml']),
    print('--------------------'),nl,print(Response7),nl,

    owl_link(URL,[createKB([kb='http://owllink.org/examples/KB_1'],[]),
			       getSubClassHierarchy('http://owllink.org/examples/KB_1',_),
			       createKB([kb='http://owllink.org/examples/KB_2'],[]),
			       tell('http://owllink.org/examples/KB_2',
				    [subClassOf('A','http://www.w3.org/2002/07/owl#Thing')
				    ]),
			       createKB([kb='http://owllink.org/examples/KB_3'],[]),
			       tell('http://owllink.org/examples/KB_3',
				    [subClassOf('A','http://www.w3.org/2002/07/owl#Thing'),
				     subClassOf('B','A'),
				     subClassOf('D','A')
				    ]),
			       createKB([kb='http://owllink.org/examples/KB_4'],[]),
			       tell('http://owllink.org/examples/KB_4',
				    [equivalentClasses(['A','http://www.w3.org/2002/07/owl#Thing']),
				     equivalentClasses(['C','http://www.w3.org/2002/07/owl#NoThing']),
				     subClassOf('B','http://www.w3.org/2002/07/owl#NoThing')
				    ]),
			       getSubClassHierarchy('http://owllink.org/examples/KB_2',_),
			       getSubClassHierarchy('http://owllink.org/examples/KB_3',_),
			       getSubClassHierarchy('http://owllink.org/examples/KB_4',_),

			       releaseKB('http://owllink.org/examples/KB_1'),
			       releaseKB('http://owllink.org/examples/KB_2'),
			       releaseKB('http://owllink.org/examples/KB_3'),
			       releaseKB('http://owllink.org/examples/KB_4')

			      ],Response8,
	     [reasoner,
	      request_file='../examples/owllink/thea-owllink-example-Taxonomy-request.xml',
	      response_file='../examples/owllink/owllink-example-taxonomy-response-20091016.xml']),
    print('--------------------'),nl,   print(Response8),nl.


test :-
	owl_link('http://localhost:8080',[createKB([kb='http://owllink.org/examples/KB_1'],[]),
			       tell('http://owllink.org/examples/KB_1',
				    [subClassOf('B','A'),
				     subClassOf('C','A'),
				     equivalentClasses(['D','E']),
				     				     subClassOf('C','A')
				    ]),
				tell('http://owllink.org/examples/KB_1',
				    [ classAssertion('A','iA')]),
			       getAllClasses('http://owllink.org/examples/KB_1'),
					  getSubClassHierarchy('http://owllink.org/examples/KB_1','A'),
			       getEquivalentClasses('http://owllink.org/examples/KB_1','D'),
			       isClassSubsumedBy('http://owllink.org/examples/KB_1',
						 'http://www.w3.org/2002/07/owl#Thing',
						 'http://www.w3.org/2002/07/owl#Nothing'),
			       getSubClasses('http://owllink.org/examples/KB_1','C'),
					  getAllIndividuals('http://owllink.org/examples/KB_1'),
			       createKB([kb='http://owllink.org/examples/KB_2'],[]),
			       tell('http://owllink.org/examples/KB_2',
				    [subClassOf('A','B')]),
			       releaseKB('http://owllink.org/examples/KB_1'),
			       getAllClasses('http://owllink.org/examples/KB_1')
			      ],Response7,
	     	     [reasoner,
		      request_file='../examples/owllink/thea-owllink-example-PoolingRequests-request.xml',
		      response_file='../examples/owllink/owllink-example-poolingrequests-response-20091016.xml']),
    print('--------------------'),nl,print(Response7),nl.


load_wine(Response) :-
	owl_link('http://localhost:8080',
		 [createKB([kb='http://owllink.org/examples/wine'],[]),
		  loadOntologies('http://owllink.org/examples/wine',
				 ['OntologyIRI'('IRI'='http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine')],[],false)
		 ],
		 Response,
		 [reasoner]).

release_wine(Response) :- owl_link('http://localhost:8080',[releaseKB('http://owlink.org/examples/wine')],Response,[reasoner]).

wine_classes(Response) :- owl_link('http://localhost:8080',[getAllClasses('http://owllink.org/examples/wine')],Response,[reasoner]).

wine_ask(Ask,Response) :-
	owl_link('http://localhost:8080',Ask,Response,[reasoner]).















disjoint_classes_to_pairwise(Set,Symmetric) :-
        forall((member(X,Set),
                member(Y,Set),
                (   Symmetric
                ->  X \= Y
                ;   X @< Y)),
               assert_axiom(disjointClasses([X,Y]))).

        


enforce_jepd :-
                enforce_jepd_unless(_,fail).

enforce_jepd_unless_unvetted :-
                enforce_jepd_unless(X,annotationAssertion('http://example.org#status',X,'http://example.org#unvetted')).


enforce_jepd_unless(X,ExceptionGoal) :-
        setof(X,(subClassOf(X,Y),
                 \+ ExceptionGoal)
             Xs),
        Xs=[_,_|_],                     assert_axiom(disjointUnion(Y,Xs)),
        format(user_error,'Enforced JEPD for subclasses of ~w~n',[Y]),
        fail.                   enforce_jepd_unless(_,_).




:- initialization(load_all).

load_all:-
        [owl2_model],
        [owl2_io],
        [owl2_metamodel],
        [owl2_xml].



t2:-
        load_axioms('../testfiles/wine.pl',owlpl),
        subClassOf(X,Y),
        write(X-Y),nl,fail.




nb_current(_,_) :- fail.


forall(Cond, Action) :-
	\+ (Cond, \+ Action).



maplist(Goal, List) :-
	maplist_(List, Goal).

maplist_([], _).
maplist_([Elem|Tail], Goal) :-
	call(Goal, Elem),
	maplist_(Tail, Goal).


maplist(Goal, List1, List2) :-
	maplist_(List1, List2, Goal).

maplist_([], [], _).
maplist_([Elem1|Tail1], [Elem2|Tail2], Goal) :-
	call(Goal, Elem1, Elem2),
	maplist_(Tail1, Tail2, Goal).


maplist(Goal, List1, List2, List3) :-
	maplist_(List1, List2, List3, Goal).

maplist_([], [], [], _).
maplist_([Elem1|Tail1], [Elem2|Tail2], [Elem3|Tail3], Goal) :-
	call(Goal, Elem1, Elem2, Elem3),
	maplist_(Tail1, Tail2, Tail3, Goal).



maplist(Goal, List1, List2, List3, List4) :-
	maplist_(List1, List2, List3, List4, Goal).

maplist_([], [], [], [], _).
maplist_([Elem1|Tail1], [Elem2|Tail2], [Elem3|Tail3], [Elem4|Tail4], Goal) :-
	call(Goal, Elem1, Elem2, Elem3, Elem4),
	maplist_(Tail1, Tail2, Tail3, Tail4, Goal).


:- module(owl2_catalog,
	  [
	   register_ontology_localpath/2,
	   save_catalog/0,
	   save_catalog/1,
	   load_catalog/0,
	   load_catalog/1
	  ]).

:- use_module(library(sgml)).

:- dynamic ontology_localpath/2.

register_ontology_localpath(URL,Local) :-
	retractall(ontology_localpath(URL,Local)),
	assert(ontology_localpath(URL,Local)).

owl2_from_rdf:owl_repository_hook(URL,Local) :-
	ontology_localpath(URL,Local).
owl2_from_rdf:owl_repository_hook(URL,Local) :-
	exists_file('catalog.xml'),
	url_local(URL,Local).

url_local(URL,LocalExpanded) :-
        load_structure('catalog.xml',[element(_,Atts,Elts)],[dialect(xmlns),space(remove)]),
	member('xml:base'=Base,Atts),
	member(element(_,[name=URL,local=Local],_),Elts),
	atom_concat(Base,Local,LocalExpanded).

save_catalog :-
	save_catalog('catalog.pl').

save_catalog(F) :-
	tell(F),
	forall(ontology_localpath(A,B),
	       format('~q.~n',[ontology_localpath(A,B)])),
	told.

load_catalog :-
	load_catalog('catalog.pl').

load_catalog(F) :-
	consult(F).



:- module(owl2_classifier,
          [
           generate_class_expressions/0,
           optimal_description/1
          ]).

:- use_module(owl2_model).
:- use_module(owl2_basic_reasoner).

generate_class_expressions :-
        generate_class_expression(C),
        \+ generated(C),
        format('~q.~n',[C]),
        assert(generated(C)),
        fail.
generate_class_expressions :-
        format('

generate_class_expression( intersectionOf(XC,someValuesFrom(P,YC)) ):-
        property_assertion_least_common_ancestor(P,_,_,XC,YC).

        


description_instance(D,I) :-
        entailed(classAssertion(D,I)).

description_instances(D,IL) :-
        setof(I,description_instance(D,I),IL).


candidate_description(intersectionOf([X,someValuesFrom(P,Y)])) :-
        propertyAssertion(P,XI,YI),
        classAssertion(XC,XI),
        classAssertion(YC,YI),
        entailed(subClassOf(XC,X)),
        class(X),
        entailed(subClassOf(YC,Y)),         class(Y).

optimal_description(D) :-
        specific_description(D),
        \+ ((entailed(subClassOf(D,Z)),              entailed(subClassOf(Z,D)))).

specific_description(D) :-
        candidate_description(D),
        description_instances(D,DIL),
        \+ ((candidate_description(D2),
             entailed(subClassOf(D2,D)),
             D2\=D,
             description_instances(D2,DIL))),
        writeln(D-DIL).






:- use_module(owl2_classifier).
:- use_module(owl2_model).

:- begin_tests(owl2_classifier,[setup(init_axioms),cleanup(retract_all_axioms)]).

init_axioms :-
        Axioms=[
                ontology(trophy),
                subClassOf(animal,organism),
                subClassOf(fungi,organism),
                subClassOf(yeast,fungi),
                subClassOf(vertebrate,animal),
                subClassOf(tetrapod,vertebrate),
                subClassOf(mammal,tetrapod),
                subClassOf(snake,tetrapod),
                subClassOf(bird,tetrapod),
                subClassOf(fish,vertebrate),
                subClassOf(arthropod,animal),
                subClassOf(crustacean,arthropod),
                subClassOf(insect,arthropod),
                subClassOf(drosophila,insect),
                subClassOf(dmel,drosophila),
                subClassOf(cat,mammal),
                subClassOf(mouse,mammal),
                subClassOf(dog,mammal),
                subClassOf(human,mammal),
                subClassOf(raptor,bird),
                subClassOf(eagle,raptor),
                subClassOf(kestrel,raptor),
                subClassOf(goldfish,fish),
                subClassOf(pike,fish),
                subClassOf(perch,fish),
                subClassOf(shrimp,crustacean),
                subClassOf(man_eating_shrimp,crustacean),

                equivalentClasses([man_eating_shrimp,intersectionOf([shrimp,someValuesFrom(eats,human)])]),
                equivalentClasses([dangerous_animal,intersectionOf([animal,someValuesFrom(eats,human)])]),
                equivalentClasses([carnivore,intersectionOf([organism,someValuesFrom(eats,animal)])]),
                
                classAssertion(cat,tom),
                classAssertion(mouse,jerry),
                classAssertion(goldfish,goldie),
                classAssertion(kestrel,kes),
                classAssertion(pike,pike1),
                classAssertion(perch,perch2),
                classAssertion(shrimp,shrimp3),
                classAssertion(snake,mr_slither),
                classAssertion(human,human1),
                classAssertion(man_eating_shrimp,shrimpzilla),
                classAssertion(shrimp,shrimpzuki),
                classAssertion(yeast,yeastcell1),
                classAssertion(dmel,fly1),

                propertyAssertion(eats,tom,goldie),
                propertyAssertion(eats,tom,jerry),
                propertyAssertion(eats,kes,tom),
                propertyAssertion(eats,kes,pike1),
                propertyAssertion(eats,pike1,perch2),
                propertyAssertion(eats,perch2,shrimp3),
                propertyAssertion(eats,perch2,shrimp3),
                propertyAssertion(eats,shrimpzilla,human1),
                propertyAssertion(eats,shrimpzuki,human1),
                propertyAssertion(eats,fly1,yeastcell1),
                propertyAssertion(eats,mr_slither,fly1),
                
                disjointClasses([mammal,fish])
               ],
        retract_all_axioms,
        maplist(assert_axiom,Axioms).

test(loaded) :-
        \+ \+ ontology(_).

test(classmaker) :-
        forall(optimal_description(D),
               writeln(D)).


:- end_tests(owl2_classifier).




:- module(owl2_dotty,
          [
           visualize_obj/1,
           visualize_obj/2,
           visualize_objs/1,
           visualize_objs/2,
           visualize_all/0
           ]).

:- use_module(owl2_model).
:- use_module(util/dot).

:- multifile user:parse_arg_hook/3.
user:parse_arg_hook(['--display-object',Ob|L],L,goal(owl2_dotty:visualize_obj(Ob))).
user:parse_arg_hook(['--display-all-objects'|L],L,goal(owl2_dotty:visualize_all)).

visualize_obj(Name) :-
        visualize_obj(Name,[]).
visualize_obj(Name,Opts) :-
        resolve_obj(Name,Obj),
        obj_dotgraph(Obj,G,Opts),
        graph_display(G,open).

visualize_objs(Names) :-
        visualize_objs(Names,[]).
visualize_objs(Names,Opts) :-
        maplist(resolve_obj,Names,Objs),
        objlist_dotgraph(Objs,G,Opts),
        graph_display(G,open).

visualize_all :-
        setof(E,entity(E),Objs),
        visualize_objs(Objs).

resolve_obj(N,Obj) :- labelAnnotation_value(Obj,N),!.
resolve_obj(Obj,Obj).

entity_edge(X,Y,R,Opts) :- equivalent_to(X,Z),\+option(follow(equivalentClasses),Opts),atom(X),\+atom(Z),entity_edge(Z,Y,R,Opts).
entity_edge(X,Y,cr,_Opts) :- equivalent_to(X,intersectionOf(L)),atom(X),member(Y,L),class(Y).
entity_edge(X,Y,eq,Opts) :- equivalent_to(X,Y),option(follow(equivalentClasses),Opts).
entity_edge(X,Y,subClassOf,_Opts) :- subClassOf(X,Y),class(Y).
entity_edge(X,Y,R,Opts) :- subClassOf(X,Z),\+class(Z),entity_edge(Z,Y,R,Opts).
entity_edge(someValuesFrom(R,Y),Y,R,_).
entity_edge(I,C,type,_) :- classAssertion(C,I).
entity_edge(I,J,R,_) :- propertyAssertion(R,I,J).
entity_edge(intersectionOf(L),X,cr,_Opts) :- member(X,L),class(X).
entity_edge(intersectionOf(L),Y,R,Opts) :- member(X,L),\+class(X),entity_edge(X,Y,R,Opts).

entities_edges([InEdge|ScheduledEdges],Visisted,ResultEdges,FinalEdges,Opts) :-
        debug(dot,'edge: ~w',[InEdge]),
        InEdge = edge(_,Obj,_),
	findall(Edge,
                (   entity_edge(Obj,Parent,Conn,Opts),
                    Edge=edge(Obj,Parent,Conn),
                    \+ord_memberchk(Edge,Visisted)),
                NextEdges_1),
        sort(NextEdges_1,NextEdges),
        NextEdges \= [],
	!,
	ord_union(ResultEdges,NextEdges,ResultEdgesNew),
        ord_union(ScheduledEdges,NextEdges,NewScheduledEdges),
	entities_edges(NewScheduledEdges,[InEdge|Visisted],ResultEdgesNew,FinalEdges,Opts).
entities_edges([E|ScheduledEdges],Visisted,ResultEdges,FinalEdges,Opts) :-
	!,
        	entities_edges(ScheduledEdges,[E|Visisted],ResultEdges,FinalEdges,Opts).
entities_edges([],_,ResultEdges,ResultEdges,_). 
objlist_dotgraph(Objs,G,Opts) :-
        findall(edge(s,Obj,null),
                member(Obj,Objs),
                Edges),
        entities_edges(Edges,[],[],OutEdges,Opts),
        owlgraph_dotgraph(OutEdges,G,Opts).
obj_dotgraph(Obj,G,Opts) :-
        entities_edges([edge(s,Obj,null)],[],[],OutEdges,Opts),
        owlgraph_dotgraph(OutEdges,G,Opts).

owlgraph_dotgraph(Edges,G,Opts) :-
                findall(DE,(member(E,Edges),
                    edge_to_dotedge(E,DE,Opts)),
                DEs),
        findall(N,
                (   member(edge(N,_,_),Edges)
                ;   member(edge(_,N,_),Edges)),
                Ancs_1),
        sort(Ancs_1,Ancs),
        findall(N,
                (   member(A,Ancs),
                    obj_to_dotnode(A,N,Opts)),
                Nodes),
        append(Nodes,DEs,GTerms),
        GFlat=graph(g,[],GTerms),
        graph_nest(GFlat,G,[cr]),
                writeln(G).

edge_to_dotedge(edge(S,T,R),E2,Opts) :-
        safe(S,S2),
        safe(T,T2),
        edge_to_dotedge_1(edge(S2,T2,R),E2,Opts).

edge_to_dotedge_1(E,edge(S,T,Props),Opts) :-
        E=edge(S,T,_R),
        findall(P=V,edge_prop(E,P,V,Opts),Props).

edge_prop(edge(_,_,R),label,Label,_) :- labelAnnotation_value(R,Label).
edge_prop(edge(_,_,R),label,R,_) :- atom(R),\+labelAnnotation_value(R,_).

obj_to_dotnode(X,node(X2,Props),Opts) :-
        obj_to_dotnode_1(X,node(X,Props),Opts),
        safe(X,X2).

obj_to_dotnode_1(X,node(X,Props),Opts) :-
        findall(P=V,node_prop(X,P,V,Opts),Props).

node_prop(X,label,Label,_) :- labelAnnotation_value(X,Label).
node_prop(X,label,X,_) :- atom(X), \+ labelAnnotation_value(X,_).
node_prop(X,label,'',_) :- \+ atom(X).
node_prop(X,shape,box,_) :- class(X).
node_prop(X,shape,box,_) :- \+ atom(X).

safe(X,X) :- atom(X),!.
safe(X,Y) :- term_to_atom(X,Y).





:- module(owl2_export_rdf,
	  [owl_generate_rdf/2,            owl_generate_rdf/3,            owl_generate_rdf/4,            owl_synchronize_to_rdf/0,
           owl_synchronize_to_rdf/1,
           owl_rdf2n3/0
	  ]).

:- use_module(owl2_model).
:- use_module(owl2_from_rdf).
:- use_module(swrl_rdf_hooks).
:- use_module(library('semweb/rdf_db')).

:- multifile owl2_io:save_axioms_hook/3.

owl2_io:save_axioms_hook(File,ttl,Opts) :-
        ensure_loaded(library('semweb/rdf_turtle_write')),
        owl2_io:save_axioms_hook(File,owl,[rdf_syntax(ttl)|Opts]).

owl2_io:save_axioms_hook(File,owl,Opts) :-
        (   member(rdf_load_mode(RDF_Load_Mode),Opts)
        ->  true
        ;   RDF_Load_Mode=complete),
        (   var(File)
        ->  tmp_file(owl,File),
            IsTemp=true
        ;   IsTemp=false),

                                                        (   member(merge(Merge),Opts)
        ->  true
        ;   true),

                                (   member(ontology(O),Opts)
        ->  true
        ;   setof(O,ontology(O),[O])
        ->  debug(owl_generate_rdf,'auto-selecting ontology: ~w',[O])
        ;   true),

                                (   (   var(O)
            ;   \+ ontologyAxiom(_,_))
        ->  (   nonvar(Merge),Merge=false
            ->  throw(error('cannot override merge(true) unless there is a single ontology'))
            ;   Merge=true,
                debug(owl_generate_rdf,'ignoring source of axiom, bundling all together',[]))
        ;   true),

                (   var(Merge)
        ->  Opts2=Opts
        ;   Opts2=[merge(Merge)|Opts]),

        owl_generate_rdf(O,File,RDF_Load_Mode,Opts2),

                (   IsTemp
        ->  sformat(Cmd,'cat ~w',[File]),
            shell(Cmd)
        ;   true).


owl_generate_rdf(FileName,RDF_Load_Mode) :-
        setof(Ontology,ontology(Ontology),[Ontology]),
        !,
        owl_generate_rdf(Ontology,FileName,RDF_Load_Mode).
owl_generate_rdf(FileName,RDF_Load_Mode) :-
                owl_generate_rdf(_,FileName,RDF_Load_Mode).

owl_generate_rdf(Ontology,FileName,RDF_Load_Mode) :-
        owl_generate_rdf(Ontology,FileName,RDF_Load_Mode,[]).


owl_generate_rdf(Ontology,FileName,RDF_Load_Mode,Opts) :-
        owl_generate_rdf_in_memory(Ontology,RDF_Load_Mode,Opts),
        (   member(rdf_syntax(ttl),Opts)         ->  rdf_save_turtle(FileName,Opts)
	;   rdf_db:rdf_save(FileName)).

owl_generate_rdf_in_memory(Ontology,RDF_Load_Mode,Opts) :-
	(   RDF_Load_Mode=complete -> rdf_retractall(_,_,_); true),
	retractall(blanknode_gen(_,_)),retractall(blanknode(_,_,_)),
                (   var(Ontology)
        ->  owl2_export_axiom(ontology('http://example.org'),_)
	;   owl2_export_axiom(ontology(Ontology),_)),
        (   member(merge(true),Opts)
        ->  true
        ;   SrcOntology=Ontology),
	debug(owl_generate_rdf,'exporting Ont:~w',[Ontology]),
	debug(owl_generate_rdf,'  gen: ontologyAxiom/2',[]),
	forall(ontologyAxiom(SrcOntology,Axiom),
	       (owl2_export_axiom(Axiom,main_triple(S,P,O)),
		owl2_export_annotation(Axiom,'owl:Axiom',S,P,O))),
	debug(owl_generate_rdf,'  stray axioms',[]),
                (   var(Ontology)
	->  forall((axiom(Axiom),\+ontologyAxiom(_,Axiom)),
                   (   owl2_export_axiom(Axiom,main_triple(S,P,O)),
                       owl2_export_annotation(Axiom,'owl:Axiom',S,P,O)))
        ;   true),
                forall(axiom(implies(A,C)),
               owl2_export_axiom(implies(A,C),_)).

owl_synchronize_to_rdf :-
        setof(Ont,ontology(Ont),Onts),
        !,
        maplist(owl_synchronize_to_rdf,Onts).
owl_synchronize_to_rdf :-
        owl_generate_rdf_in_memory(_,false,[]).
owl_synchronize_to_rdf(Ont) :-
        !,
        debug(owl_sync,'Synchronizing: ~w',[Ont]),
                                owl_generate_rdf_in_memory(Ont,false,[]),
        debug(owl_sync,'Copying from user to ~w',[Ont]),
        rdf_transaction(forall(rdf(S,P,O,user),
                               rdf_assert(S,P,O,Ont))),
        debug(owl_sync,' Clearing user',[]),
        rdf_retractall(_,_,_,user).






owl_rdf2n3 :-
    rdf_db:rdf(S,P,O),
    collapse_ns(S,S1,':',[]),collapse_ns(P,P1,':',[]),collapse_ns(O,O1,':',[]),
    write(S1), write(' '), write(P1), write(' '), write(O1), write(' .'),nl,
    fail.



owl2_export_axiom(ontology(O),main_triple(O,'rdf:type','owl:Ontology')) :-
	owl_rdf_assert(O,'rdf:type','owl:Ontology'),
	forall(ontologyImport(O,Import),owl_rdf_assert(O,'owl:imports',Import)),!.


owl2_export_axiom(class(C1),main_triple(C,'rdf:type','owl:Class')) :-
        translate_iri(C1,C),
	owl_rdf_assert(C,'rdf:type','owl:Class'),!.

owl2_export_axiom(objectProperty(C1),main_triple(C,'rdf:type','owl:ObjectProperty')) :-
        translate_iri(C1,C),
	owl_rdf_assert(C,'rdf:type','owl:ObjectProperty'),!.

owl2_export_axiom(dataProperty(C1),main_triple(C,'rdf:type','owl:DatatypeProperty')) :-
        translate_iri(C1,C),
	owl_rdf_assert(C,'rdf:type','owl:DatatypeProperty'),!.

owl2_export_axiom(annotationProperty(C1),main_triple(C,'rdf:type','owl:AnnotationProperty')) :-
        translate_iri(C1,C),
	owl_rdf_assert(C,'rdf:type','owl:AnnotationProperty'),!.

owl2_export_axiom(namedIndividual(C1),main_triple(C,'rdf:type','owl:NamedIndividual')) :-
        translate_iri(C1,C),
	owl_rdf_assert(C,'rdf:type','owl:NamedIndividual'),!.

owl2_export_axiom(subClassOf(C1,C2),main_triple(TC1,'rdfs:subClassOf',TC2)) :-
	owl2_export_axiom(C1,main_triple(TC1,_,_)),
	owl2_export_axiom(C2,main_triple(TC2,_,_)),
	owl_rdf_assert(TC1,'rdfs:subClassOf',TC2),!.

owl2_export_axiom(equivalentClasses([X,Y]),main_triple(Tx,'owl:equivalentClass',Ty)) :-
	owl2_export_axiom(X,main_triple(Tx,_,_)),
	owl2_export_axiom(Y,main_triple(Ty,_,_)),!,
	owl_rdf_assert(Tx,'owl:equivalentClass',Ty).

owl2_export_axiom(disjointClasses([X,Y]),main_triple(Tx,'owl:disjointWith',Ty)) :-
	owl2_export_axiom(X,main_triple(Tx,_,_)),
	owl2_export_axiom(Y,main_triple(Ty,_,_)),!,
	owl_rdf_assert(Tx,'owl:disjointWith',Ty).

owl2_export_axiom(disjointClasses(List),main_triple(BNode,'rdf:type','owl:AlldisjointClasses')) :-
	as2rdf_bnode(disjointClasses(List),BNode),
	owl2_export_list(List,LNode),
	owl_rdf_assert(BNode,'rdf:type','owl:AlldisjointClasses'),
	owl_rdf_assert(BNode,'owl:members',LNode),!.

owl2_export_axiom(disjointUnion(C,Rest),main_triple(Tc,'owl:disjointUnionOf',LNode)) :-
	owl2_export_axiom(C,main_triple(Tc,_,_)),
	owl2_export_list(Rest,LNode),
	owl_rdf_assert(Tc,'owl:disjointUnionOf',LNode),!.

owl2_export_axiom(subPropertyOf(propertyChain(PL),P2),main_triple(Tp2,'owl:propertyChainAxiom',LNode)) :-
	owl2_export_axiom(P2,main_triple(Tp2,_,_)),
	owl2_export_list(PL,LNode),
	owl_rdf_assert(Tp2,'owl:propertyChainAxiom',LNode),!.

owl2_export_axiom(subPropertyOf(P1,P2),main_triple(Tp1,'rdfs:subPropertyOf',Tp2)) :-
	owl2_export_axiom(P1,main_triple(Tp1,_,_)),
	owl2_export_axiom(P2,main_triple(Tp2,_,_)),
	owl_rdf_assert(Tp1,'rdfs:subPropertyOf',Tp2),!.


owl2_export_axiom(equivalentProperties([X,Y]),main_triple(Tx,'owl:equivalentProperty',Ty)) :-
	owl2_export_axiom(X,main_triple(Tx,_,_)),
	owl2_export_axiom(Y,main_triple(Ty,_,_)),
	owl_rdf_assert(Tx,'owl:equivalentProperty',Ty),!.


owl2_export_axiom(disjointProperties([X,Y]),main_triple(Tx,'owl:propertyDisjointWith',Ty)) :-
	owl2_export_axiom(X,main_triple(Tx,_,_)),
	owl2_export_axiom(Y,main_triple(Ty,_,_)),
	owl_rdf_assert(Tx,'owl:propertyDisjointWith',Ty),!.


owl2_export_axiom(disjointProperties(List),main_triple(BNode,'rdf:type','owl:AlldisjointProperties')) :-
	as2rdf_bnode(disjointClasses(List),BNode),
	owl2_export_list(List,LNode),
	owl_rdf_assert(BNode,'rdf:type','owl:AlldisjointProperties'),
	owl_rdf_assert(BNode,'owl:members',LNode),!.


owl2_export_axiom(propertyDomain(PE,CE),main_triple(Tpe,'rdfs:domain',Tce)) :-
	owl2_export_axiom(PE,main_triple(Tpe,_,_)),
	owl2_export_axiom(CE,main_triple(Tce,_,_)),
	owl_rdf_assert(Tpe,'rdfs:domain',Tce),!.

owl2_export_axiom(propertyRange(PE,CE),main_triple(Tpe,'rdfs:range',Tce)) :-
	owl2_export_axiom(PE,main_triple(Tpe,_,_)),
	owl2_export_axiom(CE,main_triple(Tce,_,_)),
	owl_rdf_assert(Tpe,'rdfs:range',Tce),!.

owl2_export_axiom(inverseProperties(P1,P2),main_triple(Tp1,'owl:inverseOf',Tp2)) :-
	owl2_export_axiom(P1,main_triple(Tp1,_,_)),
	owl2_export_axiom(P2,main_triple(Tp2,_,_)),
	owl_rdf_assert(Tp1,'owl:inverseOf',Tp2),!.

owl2_export_axiom(functionalProperty(P),main_triple(Tp,'rdf:type','owl:FunctionalProperty')) :-
	owl2_export_axiom(P,main_triple(Tp,_,_)),owl_rdf_assert(Tp,'rdf:type','owl:FunctionalProperty'),!.

owl2_export_axiom(inverseFunctionalProperty(P),main_triple(Tp,'rdf:type','owl:InverseFunctionalProperty')) :-
	owl2_export_axiom(P,main_triple(Tp,_,_)),owl_rdf_assert(Tp,'rdf:type','owl:InverseFunctionalProperty'),!.

owl2_export_axiom(reflexiveProperty(P),main_triple(Tp,'rdf:type','owl:ReflexiveProperty')) :-
	owl2_export_axiom(P,main_triple(Tp,_,_)),owl_rdf_assert(Tp,'rdf:type','owl:ReflexiveProperty'),!.

owl2_export_axiom(irreflexiveProperty(P),main_triple(Tp,'rdf:type','owl:IrreflexiveProperty')) :-
	owl2_export_axiom(P,main_triple(Tp,_,_)),owl_rdf_assert(Tp,'rdf:type','owl:IrreflexiveProperty'),!.

owl2_export_axiom(symmetricProperty(P),main_triple(Tp,'rdf:type','owl:SymmetricProperty')) :-
	owl2_export_axiom(P,main_triple(Tp,_,_)),owl_rdf_assert(Tp,'rdf:type','owl:SymmetricProperty'),!.

owl2_export_axiom(asymmetricProperty(P),main_triple(Tp,'rdf:type','owl:AsymmetricProperty')) :-
	owl2_export_axiom(P,main_triple(Tp,_,_)),owl_rdf_assert(Tp,'rdf:type','owl:AsymmetricProperty'),!.

owl2_export_axiom(transitiveProperty(P),main_triple(Tp,'rdf:type','owl:TransitiveProperty')) :-
	owl2_export_axiom(P,main_triple(Tp,_,_)),owl_rdf_assert(Tp,'rdf:type','owl:TransitiveProperty'),!.

owl2_export_axiom(hasKey([C|Rest]),main_triple(Tc,'owl:hasKey',LNode)) :-
	owl2_export_axiom(C,main_triple(Tc,_,_)),
	owl2_export_list(Rest,LNode),
	owl_rdf_assert(Tc,'owl:hasKey',LNode),!.


owl2_export_axiom(sameIndividual([X,Y]),main_triple(Tx,'owl:sameAs',Ty)) :-
	owl2_export_axiom(X,main_triple(Tx,_,_)),
	owl2_export_axiom(Y,main_triple(Ty,_,_)),
	owl_rdf_assert(Tx,'owl:sameAs',Ty),!.

owl2_export_axiom(differentIndividuals([X,Y]),main_triple(Tx,'owl:differentFrom',Ty)) :-
	owl2_export_axiom(X,main_triple(Tx,_,_)),
	owl2_export_axiom(Y,main_triple(Ty,_,_)),
	owl_rdf_assert(Tx,'owl:differentFrom',Ty),!.

owl2_export_axiom(differentIndividuals(List),main_triple(BNode,'rdf:type','owl:AllDifferent')) :-
	as2rdf_bnode(differentIndividuals(List),BNode),
	owl2_export_list(List,LNode),
	owl_rdf_assert(BNode,'rdf:type','owl:AllDifferent'),
	owl_rdf_assert(BNode,'owl:members',LNode),!.

owl2_export_axiom(classAssertion(CE,A),main_triple(Ta,'rdf:type',Tce)) :-
	owl2_export_axiom(A,main_triple(Ta,_,_)),
	owl2_export_axiom(CE,main_triple(Tce,_,_)),
	owl_rdf_assert(Ta,'rdf:type',Tce),
        !.

owl2_export_axiom(propertyAssertion(P,A1,A2),main_triple(Ta1,Tp,Ta2)) :-
	owl2_export_axiom(P,main_triple(Tp,_,_)),
	owl2_export_axiom(A1,main_triple(Ta1,_,_)),
	owl2_export_axiom(A2,main_triple(Ta2,_,_)),
	owl_rdf_assert(Ta1,Tp,Ta2),!.

owl2_export_axiom(propertyAssertion(inverseOf(P),A1,A2),main_triple(Ta2,Tp,Ta1)) :-
	owl2_export_axiom(P,main_triple(Tp,_,_)),
	owl2_export_axiom(A1,main_triple(Ta1,_,_)),
	owl2_export_axiom(A2,main_triple(Ta2,_,_)),
	owl_rdf_assert(Ta2,Tp,Ta1),!.

owl2_export_axiom(negativePropertyAssertion(P,A1,A2),main_triple(BNode,'rdf:type','owl:NegativePropertyAssertion')) :-
	as2rdf_bnode(negativePropertyAssertion(P,A1,A2),BNode),
	owl2_export_axiom(P,main_triple(Tp,_,_)),
	owl2_export_axiom(A1,main_triple(Ta1,_,_)),
	owl2_export_axiom(A2,main_triple(Ta2,_,_)),
	owl_rdf_assert(BNode,'rdf:type','owl:NegativePropertyAssertion'),
	owl_rdf_assert(BNode,'owl:sourceIndividual',Ta1),
	owl_rdf_assert(BNode,'owl:assertionProperty',Tp),
	owl_rdf_assert(BNode,'owl:targetIndividual',Ta2),!.



owl2_export_axiom(annotationAssertion(AP,As,Av),main_triple(TAs,AP,TAv)) :-
        atom(As),         !,
	owl2_export_axiom(As,main_triple(TAs,_,_)),
	owl2_export_axiom(Av,main_triple(TAv,_,_)),
	owl_rdf_assert(TAs,AP,TAv),!.

owl2_export_axiom(annotationAssertion(Ap,As,Av),main_triple(TAs,TAp,TAv)) :-
        as2rdf_bnode(As,BNode), 	owl2_export_axiom(Ap,main_triple(TAp,_,_)),
	owl2_export_axiom(Av,main_triple(TAv,_,_)),
	owl2_export_axiom(BNode,main_triple(TAs,_,_)).
        
owl2_export_axiom(inverseOf(P),main_triple(BNode,'owl:inverseOf',P)) :-
	as2rdf_bnode(inverseOf(P),BNode),
	owl_rdf_assert(BNode,'owl:inverseOf', P),!.


owl2_export_axiom(intersectionOf([E|Rest]),main_triple(BNode,'rdf:type',Type)) :-
	as2rdf_bnode(intersectionOf([E|Rest]),BNode),
	owl2_export_list([E|Rest],LNode),
	(   classExpression(E) -> Type = 'owl:Class'; Type = 'owl:Datatype'),
	owl_rdf_assert(BNode,'rdf:type',Type),
	owl_rdf_assert(BNode,'owl:intersectionOf', LNode),
        !.
owl2_export_axiom(unionOf([E|Rest]),main_triple(BNode,'rdf:type',Type)) :-
	as2rdf_bnode(unionOf([E|Rest]),BNode),
	owl2_export_list([E|Rest],LNode),
	(   classExpression(E) -> Type = 'owl:Class'; Type = 'owl:Datatype'),
	owl_rdf_assert(BNode,'rdf:type',Type),
	owl_rdf_assert(BNode,'owl:unionOf', LNode),!.

owl2_export_axiom(oneOf([E|Rest]),main_triple(BNode,'rdf:type',Type)) :-
	as2rdf_bnode(oneOf([E|Rest]),BNode),
	owl2_export_list([E|Rest],LNode),
	(   classExpression(E)
        ->  Type = 'owl:Class'
        ;   Type = 'owl:Datatype'),
	owl_rdf_assert(BNode,'rdf:type',Type),
	owl_rdf_assert(BNode,'owl:oneOf', LNode),!.

owl2_export_axiom(datatypeRestriction(DT,FVs),main_triple(BNode,'rdf:type','rdfs:Datatype')) :-
	as2rdf_bnode(datatypeRestriction(DT,FVs),BNode),
	owl_rdf_assert(BNode,'rdf:type','rdfs:Datatype'),
	owl2_export_axiom(DT,main_triple(Tpe,_,_)),owl_rdf_assert(BNode,'owl:onDatatype',Tpe),
	owl2_export_list(FVs,LNode),
	owl_rdf_assert(BNode,'owl:withRestrictions',LNode).

owl2_export_axiom(facetRestriction(F,V),main_triple(BNode,F2,V2)) :-
	(   sub_atom(F,_,_,_,'#')
	->  F2=F2
	;   atom_concat('xsd:',F,F2)),
	as2rdf_bnode(facetRestriction(F2,V2),BNode),
	owl_rdf_assert(BNode,F,V). 
owl2_export_axiom(complementOf(E),main_triple(BNode,'rdf:type',Type)) :-
	as2rdf_bnode(complementOf(E),BNode),
	owl2_export_axiom(E,main_triple(Te,_,_)),
	(   classExpression(E) -> Type = 'owl:complementOf'; Type = 'owl:datatypeComplementOf'),
	owl_rdf_assert(BNode,'owl:complementOf', Te),!.



owl2_export_axiom(someValuesFrom(PE,CEorDR),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(someValuesFrom(PE,CEorDR),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl2_export_axiom(PE,main_triple(Tpe,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tpe),
	owl2_export_axiom(CEorDR,main_triple(Tce,_,_)),owl_rdf_assert(BNode,'owl:someValuesFrom',Tce),!.


owl2_export_axiom(allValuesFrom(PE,CEorDR),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(allValuesFrom(PE,CEorDR),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl2_export_axiom(PE,main_triple(Tpe,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tpe),
	owl2_export_axiom(CEorDR,main_triple(Tce,_,_)),owl_rdf_assert(BNode,'owl:allValuesFrom',Tce),!.

owl2_export_axiom(hasValue(PE,Value),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(hasValue(PE,Value),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl2_export_axiom(PE,main_triple(Tpe,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tpe),
	owl2_export_axiom(Value,main_triple(TValue,_,_)),owl_rdf_assert(BNode,'owl:hasValue',TValue),!.

owl2_export_axiom(hasSelf(OPE),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(hasValue(OPE),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl2_export_axiom(OPE,main_triple(Tope,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tope),
	owl_rdf_assert(BNode,'owl:hasSelf',	literal(type('http://www.w3.org/2001/XMLSchema#boolean','true'))),!.


owl2_export_axiom(minCardinality(N,OPE),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(minCardinality(N,OPE),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl_rdf_assert(BNode,'owl:minCardinality',literal(type('http://www.w3.org/2001/XMLSchema#nonNegativeInteger',N))),
	owl2_export_axiom(OPE,main_triple(Tope,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tope),!.

owl2_export_axiom(minCardinality(N,OPE,CEorDR),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(minCardinality(N,OPE,CEorDR),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl_rdf_assert(BNode,'owl:minQualifiedCardinality',literal(type('http://www.w3.org/2001/XMLSchema#nonNegativeInteger',N))),
	owl2_export_axiom(OPE,main_triple(Tope,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tope),
	owl2_export_axiom(CEorDR,main_triple(Tce,_,_)),
	(   classExpression(CEorDR) -> owl_rdf_assert(BNode,'owl:onClass',Tce); owl_rdf_assert(BNode,'owl:onDataRange',Tce)),!.


owl2_export_axiom(maxCardinality(N,OPE),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(maxCardinality(N,OPE),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl_rdf_assert(BNode,'owl:maxCardinality',literal(type('http://www.w3.org/2001/XMLSchema#nonNegativeInteger',N))),
	owl2_export_axiom(OPE,main_triple(Tope,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tope),!.

owl2_export_axiom(maxCardinality(N,OPE,CEorDR),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(maxCardinality(N,OPE,CEorDR),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl_rdf_assert(BNode,'owl:maxQualifiedCardinality',literal(type('http://www.w3.org/2001/XMLSchema#nonNegativeInteger',N))),
	owl2_export_axiom(OPE,main_triple(Tope,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tope),
	owl2_export_axiom(CEorDR,main_triple(Tce,_,_)),
	(   classExpression(CEorDR) -> owl_rdf_assert(BNode,'owl:onClass',Tce); owl_rdf_assert(BNode,'owl:onDataRange',Tce)),!.


owl2_export_axiom(exactCardinality(N,OPE),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(exactCardinality(N,OPE),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl_rdf_assert(BNode,'owl:cardinality',literal(type('http://www.w3.org/2001/XMLSchema#nonNegativeInteger',N))),
	owl2_export_axiom(OPE,main_triple(Tope,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tope),!.

owl2_export_axiom(exactCardinality(N,OPE,CEorDR),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(exactCardinality(N,OPE,CEorDR),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl_rdf_assert(BNode,'owl:qualifiedCardinality',literal(type('http://www.w3.org/2001/XMLSchema#nonNegativeInteger',N))),
	owl2_export_axiom(OPE,main_triple(Tope,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tope),
	owl2_export_axiom(CEorDR,main_triple(Tce,_,_)),
	(   classExpression(CEorDR) -> owl_rdf_assert(BNode,'owl:onClass',Tce); owl_rdf_assert(BNode,'owl:onDataRange',Tce)),!.


owl2_export_axiom(implies(AL,CL),main_triple(RuleNode,'rdf:type','swrl:Imp')) :-
                        !,
                as2rdf_bnode(implies(AL,CL),RuleNode),
	owl_rdf_assert(RuleNode,'rdf:type','swrl:Imp'),
	swrl_export_atom_list(AL,ALNode),
	swrl_export_atom_list(CL,CLNode),
        owl_rdf_assert(RuleNode,'swrl:body', ALNode),
        owl_rdf_assert(RuleNode,'swrl:head', CLNode).


:- multifile translate_iri_hook/2.
owl2_export_axiom(IRI,main_triple(T,_,_)) :- translate_iri_hook(IRI,T), !.

owl2_export_axiom(IRI,main_triple(IRI,_,_)) :- atom(IRI),!. owl2_export_axiom(X,main_triple(X,_,_)) :- X=literal(_),!. owl2_export_axiom(Any,main_triple(Any,_,_)) :- format(user_error,'unresolved: ~w~n',[Any]).

translate_iri(X,Y) :- translate_iri_hook(X,Y),!.
translate_iri(X,X).






owl2_export_annotation(annotation(_,_,_),_,S,_,_) :-
        \+ atom(S),         !.
owl2_export_annotation(Parent,ParentType,S,ParentP,ParentO) :-
	(   Parent = annotation(_,ParentAP,ParentAV)
        ->  P = ParentAP,
            O = ParentAV,
	    owl_rdf_assert(S,P,O)
        ;   P = ParentP, O = ParentO),
	findall(annotation(Parent,AP,AV),annotation(Parent,AP,AV),ANNs),
	(   ANNs = [_|_]
        ->  as2rdf_bnode(Parent,BNode),
	    reify(BNode,'rdf:type',ParentType,S,P,O),
	    forall(member(ANN,ANNs),owl2_export_annotation(ANN,'owl:Annotation',BNode,_,_))
        ;   true).

reify(SNode,PTerm,OTerm,S,P,O) :-
	owl_rdf_assert(SNode,PTerm,OTerm),
	owl_rdf_assert(SNode,'owl:annotatedSource',S),
	owl_rdf_assert(SNode,'owl:annotatedProperty',P),
	owl_rdf_assert(SNode,'owl:annotatedTarget',O).





owl2_export_list([],'rdf:nil').

owl2_export_list([S|Rest],Node) :-
	as2rdf_bnode([S|Rest],Node),
	owl2_export_axiom(S,main_triple(Ts,_,_)),
                (   S=literal(_)
        ->  true
        ;   owl_rdf_assert(Node,'rdf:type', 'rdf:List')),
	owl_rdf_assert(Node,'rdf:first', Ts),
	owl2_export_list(Rest,Node2),
	owl_rdf_assert(Node,'rdf:rest',Node2).

swrl_export_atom_list([],'rdf:nil').

swrl_export_atom_list([S|Rest],Node) :-
	as2rdf_bnode([S|Rest],Node),
	swrl_export_atom(S,main_triple(Ts,_,_)),
		owl_rdf_assert(Node,'rdf:type', 'rdf:List'),
	owl_rdf_assert(Node,'rdf:first', Ts),
	swrl_export_atom_list(Rest,Node2),
	owl_rdf_assert(Node,'rdf:rest',Node2).

swrl_export_atom_list(X,Node) :-
        \+ atom(X),
        swrl_export_atom_list([X],Node).

swrl_export_argument_list([],'rdf:nil').

swrl_export_argument_list([S|Rest],Node) :-
	as2rdf_bnode([S|Rest],Node),
	swrl_export_argument(S,main_triple(Ts,_,_)),
	owl_rdf_assert(Node,'rdf:type', 'swrl:ArgumentList'),
	owl_rdf_assert(Node,'rdf:first', Ts),
	swrl_export_argument_list(Rest,Node2),
	owl_rdf_assert(Node,'rdf:rest',Node2).


swrl_export_atom(propertyAssertion(OPE,A1,A2),main_triple(BNode,'rdf:type','swrl:DatavaluedPropertyAtom')) :-
        dataProperty(OPE),
        !,
        rdf_bnode(BNode),
	owl_rdf_assert(BNode,'rdf:type','swrl:DatavaluedPropertyAtom'),
	owl2_export_axiom(OPE,main_triple(Tope,_,_)),owl_rdf_assert(BNode,'swrl:propertyPredicate',Tope),
        swrl_export_argument(A1,main_triple(TA1,_,_)),owl_rdf_assert(BNode,'swrl:argument1',TA1),
        swrl_export_argument(A2,main_triple(TA2,_,_)),owl_rdf_assert(BNode,'swrl:argument2',TA2).

swrl_export_atom(propertyAssertion(OPE,A1,A2),main_triple(BNode,'rdf:type','swrl:IndividualPropertyAtom')) :-
        !,
        rdf_bnode(BNode),
        	owl_rdf_assert(BNode,'rdf:type','swrl:IndividualPropertyAtom'),
	owl2_export_axiom(OPE,main_triple(Tope,_,_)),owl_rdf_assert(BNode,'swrl:propertyPredicate',Tope),
        swrl_export_argument(A1,main_triple(TA1,_,_)),owl_rdf_assert(BNode,'swrl:argument1',TA1),
        swrl_export_argument(A2,main_triple(TA2,_,_)),owl_rdf_assert(BNode,'swrl:argument2',TA2).

swrl_export_atom(builtin(OPE,Args),main_triple(BNode,'rdf:type','swrl:BuiltinAtom')) :-
        !,
        rdf_bnode(BNode),
	owl_rdf_assert(BNode,'rdf:type','swrl:BuiltinAtom'),
		atom_concat('swrlb:',OPE,Builtin),owl_rdf_assert(BNode,'swrl:builtin',Builtin),
        swrl_export_argument_list(Args,ListNode),
        owl_rdf_assert(BNode,'swrl:arguments',ListNode).

swrl_export_atom(description(C,A1),main_triple(BNode,'rdf:type','swrl:ClassAtom')) :-
        !,
        rdf_bnode(BNode),
        	owl_rdf_assert(BNode,'rdf:type','swrl:ClassAtom'),
	owl2_export_axiom(C,main_triple(TC,_,_)),owl_rdf_assert(BNode,'swrl:classPredicate',TC),
        swrl_export_argument(A1,main_triple(TA1,_,_)),owl_rdf_assert(BNode,'swrl:argument1',TA1).

swrl_export_atom(differentFrom(A1,A2),main_triple(BNode,'rdf:type','swrl:DifferentIndividualsAtom')) :-
        !,
        rdf_bnode(BNode),
		owl_rdf_assert(BNode,'rdf:type','swrl:DifferentIndividualsAtom'),
        swrl_export_argument(A1,main_triple(TA1,_,_)),owl_rdf_assert(BNode,'swrl:argument1',TA1),
        swrl_export_argument(A2,main_triple(TA2,_,_)),owl_rdf_assert(BNode,'swrl:argument2',TA2).

swrl_export_atom(sameAs(A1,A2),main_triple(BNode,'rdf:type','swrl:SameIndividualAtom')) :-
        !,
        rdf_bnode(BNode),
	        owl_rdf_assert(BNode,'rdf:type','swrl:SameIndividualAtom'),
        swrl_export_argument(A1,main_triple(TA1,_,_)),owl_rdf_assert(BNode,'swrl:argument1',TA1),
        swrl_export_argument(A2,main_triple(TA2,_,_)),owl_rdf_assert(BNode,'swrl:argument2',TA2).

swrl_export_atom(CA,T) :-
        CA=..[C,A],
        !,
        swrl_export_atom(class(C,A),T).
swrl_export_atom(PA,T) :-
        PA=..[P,A1,A2],
        !,
        swrl_export_atom(propertyAssertion(P,A1,A2),T).


swrl_export_argument(v(V),main_triple(V1,'rdf:type','swrl:Variable')) :-
        !,
        (   number(V)
        ->  atom_concat('#v',V,V1)
        ;   V1=V),
        owl_rdf_assert(V1,'rdf:type','swrl:Variable'),!.

swrl_export_argument(d(V),T) :- swrl_export_argument(v(V),T).
swrl_export_argument(i(V),T) :- swrl_export_argument(v(V),T).
swrl_export_argument(V,T) :- owl2_export_axiom(V,T).



owl_rdf_assert(S,P,O) :-
	expand_ns(S,S1),expand_ns(P,P1),expand_ns(O,O1),
        debug(rdf_assert,'assert: ~w ~w ~w.',[S,P,O]),
	rdf_db:rdf_assert(S1,P1,O1), !.


as2rdf_bnode(X,Node) :-
	blanknode_gen(Node,X),
        debug(bnode,'bnode REUSE ~w ==> ~w',[X,Node]),
        !.

as2rdf_bnode(X,Node) :-
	rdf_db:rdf_bnode(Node),
	assert(blanknode_gen(Node,X)),
        debug(bnode,'bnode NEW ~w ==> ~w',[X,Node]),
        !.



:- use_module(owl2_io).
:- use_module(owl2_model).
:- use_module(owl2_export_rdf).

:- begin_tests(wine_trip,[setup(roundtrip('testfiles/wine.owl'))]).

roundtrip(F):-
        debug(test,'loading ~w',[F]),
        load_axioms(F),
        atom_concat(F,'.tmp',TempF),
        save_axioms(TempF,owl),
        retract_all_axioms,
        load_axioms(TempF,owl).

test(loaded) :-
        \+ \+ ontology(_).

test(subclasses) :-
        findall(A-B,subClassOf(A,B),Axs),
                Axs\=[].

test(expected) :-
        findall(Ax,
                (   expected(Ax),
                    debug(test,'Testing for: ~w',[Ax]),
                    \+ Ax,
                    debug(test,'** FAILED: ~w',[Ax])),
                FailedAxs),
        length(FailedAxs,NumFailed),
        debug(test,'*** TOTAL FAILED: ~d',[NumFailed]),
        FailedAxs=[].

expected(objectProperty('http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#locatedIn')).
expected(subClassOf('http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#Wine', 'http://www.w3.org/TR/2003/PR-owl-guide-20031209/food#PotableLiquid')).
expected(subClassOf(intersectionOf(['http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#Loire',
                                    hasValue('http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#locatedIn',
                                             'http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#ToursRegion')]),
                    hasValue('http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#madeFromGrape',
                             'http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#CheninBlancGrape'))).
expected(ontologyAxiom('http://www.w3.org/TR/2003/CR-owl-guide-20030818/wine',
                       propertyAssertion('http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#hasBody',
                                         'http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#SelaksIceWine',
                                         'http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#Medium'))).


:- end_tests(wine_trip).



:- module(owl2_fol,
          [
           ]).

:- use_module(owl2_model).
:- use_module(owl2_from_rdf,[collapse_ns/4]).

:- multifile owl2_io:save_axioms_hook/3.
owl2_io:save_axioms_hook(File,fol,Opts) :-
        (   nonvar(File) -> tell(File) ; true),
        write_owlaxioms_as_fol(Opts),
        told.

write_owlaxioms_as_fol(Opts) :-
        forall(axiom(Axiom),
               write_owlaxiom_as_fol(Axiom,Opts)).

write_owlaxiom_as_fol(Ax,_):-
        owlaxiom_to_fol(Ax,Fol,_),
        writeln(Fol).




owlaxiom_to_fol(class(_),none,_) :- !.

owlaxiom_to_fol(equivalentClasses([_]),none,_) :- !.

owlaxiom_to_fol(equivalentClasses([]),none,_) :- !.


owlaxiom_to_fol(equivalentClasses(L),SL,_) :- !,
        findall(forall([X],iff(TC,TD)),
                (   member(C,L),
                    member(D,L),
                    C@<D,
                                        owlaxiom_to_fol(description(C,X),TC,_),
                    owlaxiom_to_fol(description(D,X),TD,_)),
                SL).

owlaxiom_to_fol(disjointClasses(L),RL,_) :- !,
        findall(not(exists([X],and(TC,TD))),
                (   member(C,L),
                    member(D,L),
                    C@<D,
                                        owlaxiom_to_fol(description(C,X),TC,_),
                    owlaxiom_to_fol(description(D,X),TD,_)),
                RL).

owlaxiom_to_fol(differentIndividuals(_),none,_) :- !.



owlaxiom_to_fol(subClassOf(A,B),R,_) :-
        X=x,
        owlaxiom_to_fol(description(A,X),Rb,_),
        owlaxiom_to_fol(description(B,X),Rh,_),
        !,     
        R = forall([X],if(Rb,Rh)).

owlaxiom_to_fol(description(hasSelf(_),_),false,fact):- !.

owlaxiom_to_fol(description(intersectionOf(DL),X),R,Param):- !,
	owlaxiom_to_fol(description_list(DL,X,and),R,Param).

owlaxiom_to_fol(description(unionOf(DL),X),R,Param):- !,
        owlaxiom_to_fol(description_list(DL,X,or),R,Param). 


owlaxiom_to_fol(description(complementOf(_),_),false,_) :- !.



owlaxiom_to_fol(description(oneOf(_),_),false,_) :- !.



owlaxiom_to_fol(description(hasValue(PropertyID,Value),X),R,_) :- 
	R = [PropertyID,X,Value],!.



owlaxiom_to_fol(description(allValuesFrom(PropertyID,Descr),_),R,_) :-  !,
	owlaxiom_to_fol(description(Descr,y),D,_),
	R =  forall([y],if([PropertyID,x,y]), D).



owlaxiom_to_fol(description(someValuesFrom(PropertyID,Descr),_),R,body) :-  !,
	owlaxiom_to_fol(description(Descr,y),D,body),
	R =  exists([y],and(D,[PropertyID,x,y])).


owlaxiom_to_fol(description(maxCardinality(_,_),_),false,_) :-  !.
owlaxiom_to_fol(description(minCardinality(_,_),_),false,_) :-  !.
owlaxiom_to_fol(description(exactCardinality(_,_),_),false,_) :-  !.

owlaxiom_to_fol(description(maxCardinality(_,_,_),_),false,_) :-  !.
owlaxiom_to_fol(description(minCardinality(_,_,_),_),false,_) :-  !.
owlaxiom_to_fol(description(exactCardinality(_,_,_),_),false,_) :-  !.



owlaxiom_to_fol(description(Any,X),[Any,X],_) :- !.




owlaxiom_to_fol(description_list([],_,_),[],_) :- !.

owlaxiom_to_fol(description_list([Descr],X,_),R,body) :- !,
	owlaxiom_to_fol(description(Descr,X),R,body).

owlaxiom_to_fol(description_list([Descr|Rest],X,Separator),T,Param) :-
	owlaxiom_to_fol(description(Descr,X),H,Param),!,	
	owlaxiom_to_fol(description_list(Rest,X,Separator),Tail,Param),
	(   Param = body , ! ,  
	    (H = false, !, T = [false] ; Tail = false, !, T = false
	    ; 
	    T =.. [Separator,H,Tail]
	    ) ; 	    
	T = [H|Tail]
	).


owlaxiom_to_fol(subPropertyOf(P,SuperP),forall([x,y],if(SPE,PE)),_) :- !,
        owlaxiom_to_fol(propertyExpression(P),PE,head),
        owlaxiom_to_fol(propertyExpression(SuperP),SPE,body).

owlaxiom_to_fol(propertyExpression(inverseOf(P)),[P,y,x], _) :- !.

owlaxiom_to_fol(propertyExpression(propertyChain(PL)),ChainGoal, _) :-
        chain_to_goal(PL,ChainGoal).


owlaxiom_to_fol(propertyExpression(P),[P,x,y], _) :- !.


owlaxiom_to_fol(propertyDomain(P,D),forall([x,var],(if([P,x,var],DT))), _) :- !,
        owlaxiom_to_fol(description(D,x),DT,_).


owlaxiom_to_fol(propertyRange(P,D),forall([x,var],(if([P,var,x],DT))), _) :- !,
        owlaxiom_to_fol(description(D,x),DT,_).


map_description(head,_,D,L).


owlaxiom_to_fol(objectProperty(_),[],_) :- !.
owlaxiom_to_fol(dataProperty(_),[],_) :- !.
owlaxiom_to_fol(annotationProperty(_),[],_) :- !.


owlaxiom_to_fol(classAssertion(C,I),[C,I],_) :- !.

owlaxiom_to_fol(propertyAssertion(P,I,J), [P,I,J],_) :- !.

owlaxiom_to_fol(owl(_,_,_,_),[],_) :- !.
owlaxiom_to_fol(ontology(_,_),[],_) :- !.

owlaxiom_to_fol(annotationAssertion(_,_,_), [], _) :- !.


	

owlaxiom_to_fol(functionalProperty(P), forall([x,y,z],if(and([P,z,x],[P,z,y]), x=y)),_) :- !.
owlaxiom_to_fol(inverseFunctionalProperty(P), forall([x,y,z],if(and([P,x,z],[P,y,z]), x=y)),_) :- !.
owlaxiom_to_fol(transitiveProperty(P), forall([x,y,z],if(and([P,x,z],[P,z,y]), [P,x,y])),_) :- !.
owlaxiom_to_fol(symmetricProperty(P), forall([x,y],if([P,x,y],[P,y,x])),_) :- !.
owlaxiom_to_fol(inverseProperties(P,inverseOf(P)),none,_) :- !. owlaxiom_to_fol(inverseProperties(inverseOf(P),P),none,_) :- !. 




owlaxiom_to_fol(implies(A,C),(CP :- AP), _) :- !,
              owlaxiom_to_fol(swrl(A),AP,body),
              owlaxiom_to_fol(swrl(C),CP,head).

owlaxiom_to_fol(swrl(L),PL, Type) :- !,
         is_list(L),
         !,
         findall(P,(member(A,L),owlaxiom_to_fol(swrl(A),P,Type)),PL). 
owlaxiom_to_fol(swrl(A),swrlproperty(P,PX,PY), Type) :- !,
        A=..[P,X,Y],
        !,
        owlaxiom_to_fol(swrl(X),PX,Type),
        owlaxiom_to_fol(swrl(Y),PY,Type).
owlaxiom_to_fol(swrl(i(V)),V,_) :- !.

chain_to_goal(PL,Goal) :-
        chain_to_goal(PL,x,v(1),ChainGoal),
        Goal =.. [and|ChainGoal].

chain_to_goal([P],V,_,[Goal]) :-
        !,
        (   P=inverseOf(PI)
        ->  Goal=[PI,y,V]
        ;   Goal=[P,V,y]).
chain_to_goal([P|PL],V,VN,[Goal|ChainGoal]) :-
        !,
        (   P=inverseOf(PI)
        ->  Goal=[PI,VN,V]
        ;   Goal=[P,V,VN]),
        VN=v(N),
        NPlus1 is N+1,
        chain_to_goal(PL,VN,v(NPlus1),ChainGoal).



map_description(fact,X,Description,:-(DMap,none)) :- !,
	owlaxiom_to_fol(description(Description,X),DMap,fact).

map_description(Type,X,Description,DMap) :- !,
	owlaxiom_to_fol(description(Description,X),DMap,Type).
                 






:- module(owl2_from_rdf,
	  [
           owl_parse_rdf/1,
           owl_parse_rdf/2,
           translate_rdf_db/1,
           owl_parse/4,
           rdf_db_to_owl/0,
            convert/3,
	    expand_ns/2,                  	    collapse_ns/4,

            valid_axiom_annotation_mode/5,
	    uri_split/4,

            owl_description/2,
	    blanknode/3,
	    use_owl/4,
	    test_use_owl/3 	    	  ]).




:- use_module(owl2_model).

:- use_module(library(debug)).
:- use_module(library('semweb/rdf_db')).
:- use_module(library('semweb/rdf_edit')).
:- use_module(library('semweb/rdfs')).
:- use_module(library('url')).
:- use_module(library('http/http_open')).

:- dynamic(owl/4).
:- dynamic(blanknode/3).
:- dynamic(outstream/1).

:- dynamic(aNN/3). :- dynamic(annotation_r_node/4).  :- dynamic(axiom_r_node/4).       :- dynamic(owl_repository/2). :- multifile(owl_repository/2).


:- discontiguous owl_parse_axiom/3.
:- discontiguous dothislater/1.

:- multifile owl_parse_axiom_hook/3.

:- include('owl2_from_rdf_utils.pl').


:- multifile owl2_io:load_axioms_hook/3.

owl2_io:load_axioms_hook(File,owl,Opts) :-
        owl_parse_rdf(File,Opts).

owl2_io:load_axioms_hook(File,ttl,Opts) :-
        ensure_loaded(library('semweb/rdf_turtle')),
        owl_parse_rdf(File,Opts).

owl_parse_rdf(F):-
	owl_parse_rdf(F,[]).

owl_parse_rdf(F,Opts):-
	(   member(imports(Imports),Opts)
	->  true
	;   Imports=false),
	(   member(clear(Clear),Opts)
	->  true
	;   Clear=false),
	owl_parse(F,Clear,Clear,Imports),
	debug(owl_parser,'parsed ~w',[F]).




owl_parse(URL, RDF_Load_Mode, OWL_Parse_Mode,ImportFlag) :-
	(   RDF_Load_Mode=complete
	->  rdf_retractall(_,_,_), retractall(rdf_db:rdf_source(_,_,_,_))
        ;   true),
	(   OWL_Parse_Mode=complete
        ->  owl_clear_as,retractall(blanknode(_,_,_)), retractall(owl(_,_,_,_))
        ;   true),
        !,
        debug(owl_parser,'Loading stream ~w',[URL]),
	owl_canonical_parse_2([URL],URL,ImportFlag,[],ProcessedIRIs),
        debug(owl_parser,'rdf_db populated, the following IRIs were processed: ~w',[ProcessedIRIs]),
	owl2_model_init,
	owl_canonical_parse_3(ProcessedIRIs).

owl_canonical_parse_2([],_,_,Processed,Processed) :- !.

owl_canonical_parse_2([IRI|ToProcessRest],Parent,ImportFlag,ProcessedIn,ProcessedOut) :-
	member(IRI,ProcessedIn),
        !,
	owl_canonical_parse_2(ToProcessRest,Parent,ImportFlag,ProcessedIn,ProcessedOut).

owl_canonical_parse_2([IRI|ToProcessRest],Parent,ImportFlag,ProcessedIn,ProcessedOut) :-
		rdf_load_stream(IRI,O,BaseURI,Imports),
	(   nonvar(O)
        ->  Ont = O
        ;   Ont = Parent),         debug(owl_parser,'Commencing rdf_2_owl. Generating owl/4',[]),
	rdf_2_owl(BaseURI,Ont),  		(   ImportFlag = true
        ->  owl_canonical_parse_2(Imports,Ont,ImportFlag,[Ont|ProcessedIn],ProcessedIn1)
        ;   ProcessedIn1=[Ont|ProcessedIn]),
	owl_canonical_parse_2(ToProcessRest,Parent,ImportFlag,ProcessedIn1,ProcessedOut).


owl_canonical_parse_3([]).

owl_canonical_parse_3([IRI|Rest]) :-
		retractall(owl(_,_,_,not_used)),
		forall(owl(S,P,O,IRI),assert(owl(S,P,O,not_used))),

        debug(owl_parser,'Anon individuals in reification [see table 8]',[]),


	collect_r_nodes,

	        owl_parse_annotated_axioms(ontology/1),

        debug(owl_parser,'Replacing patterns [see table 5]',[]),
		(   forall((triple_remove(Pattern,Remove), test_use_owl(Pattern)),
	        forall(member(owl(S,P,O),Remove),use_owl(S,P,O,removed))) -> true ; true),


                        forall((test_use_owl(S,P,BNode),
                atom(BNode),
                sub_atom(BNode,0,2,_,'__'),
                test_use_owl(BNode,'http://www.w3.org/1999/02/22-rdf-syntax-ns#datatype',literal(_))),
               (   use_owl(S,P,BNode,datatype_fix),
                   use_owl(BNode,'http://www.w3.org/1999/02/22-rdf-syntax-ns#datatype',literal(_)),
                   expand_and_assert(S,P,literal('')))),

	        debug(owl_parser,'Replacing patterns [see table 6]',[]),
	(   setof(ReplaceWith,
                  Pattern^(   triple_replace(Pattern,ReplaceWith),                               use_owl(Pattern),
                              debug(owl_parser,'Replacing ~w ==> ~w [see table 6]',[Pattern,ReplaceWith])),
                  ReplacementSetList)
        ->  forall((member(ReplacementSet,ReplacementSetList),member(owl(S,P,O),ReplacementSet)),
                   expand_and_assert(S,P,O))
        ;   debug(owl_parser,'No replacements required',[])),

        

			findall(X, (member(Y,['owl:Axiom','owl:Annotation',
			      'owl:AllDisjointClasses','owl:AllDisljointProperties',
			      'owl:AllDifferent','owl:NegativePropertyAssertion']),
                    test_use_owl(X,'rdf:type',Y)
                   ),
                RIND),
	nb_setval(rind,RIND),

        	        debug(owl_parser,'asserting annotationProperty/1 for all APs',[]),
	forall( test_use_owl(D,'rdf:type','owl:AnnotationProperty'),
		assert_axiom(annotationProperty(D))),

                debug(owl_parser,'Implements function ANN(x) 3.2.2 Table 10.',[]),
	findall(_,ann(_,_),_), 
        debug(owl_parser,'Commencing parse of annotated axioms',[]),
        forall((axiompred(PredSpec),\+dothislater(PredSpec),\+omitthis(PredSpec)),
               owl_parse_annotated_axioms(PredSpec)),
        forall((axiompred(PredSpec),dothislater(PredSpec),\+omitthis(PredSpec)),
               owl_parse_annotated_axioms(PredSpec)),

        debug(owl_parser_detail,'Commencing parse of unannotated axioms',[]),
	forall((axiompred(PredSpec),\+dothislater(PredSpec),\+omitthis(PredSpec)),
               owl_parse_nonannotated_axioms(PredSpec)),
        forall((axiompred(PredSpec),dothislater(PredSpec),\+omitthis(PredSpec)),
               owl_parse_nonannotated_axioms(PredSpec)),!,
		parse_annotation_assertions,
	forall(owl_parse_compatibility_DL(Axiom),assert_axiom(Axiom)),
	owl_canonical_parse_3(Rest).

rdf_db_to_owl :-
	owl2_model_init,
        findall(BaseURI,
                (   rdf(Ont,'http://www.w3.org/1999/02/22-rdf-syntax-ns#type','http://www.w3.org/2002/07/owl#Ontology',BaseURI:_),
                    rdf_2_owl(BaseURI,Ont),
                    owl_canonical_parse_3(IRIs)),
                IRIs).

translate_rdf_db(BaseURI) :-
        rdf(Ont,'http://www.w3.org/1999/02/22-rdf-syntax-ns#type','http://www.w3.org/2002/07/owl#Ontology',BaseURI:_),
        !,
        rdf_2_owl(BaseURI,Ont),
        owl2_model_init,
        owl_canonical_parse_3(BaseURI).


omitthis(ontology/1).


owl_parse_annotated_axioms(Pred/Arity) :-
        debug(owl_parser_detail,'[ann] Parsing all of type: ~w',[Pred]),
        functor(Head,Pred,Arity),
	forall(owl_parse_axiom(Head,true,Annotations),
	       (   assert_axiom(Head),
                   debug(owl_parser_detail_anns,' parsed: ~w : anns: ~w',[Head,Annotations]),
		   forall(member(X,Annotations),
			  forall(aNN(X,AP,AV),
				 assert_axiom(annotation(Head,AP,AV)))
			 )
	       )
	      ),
        debug(owl_parser_detail,'[ann] Done parsing all of type: ~w',[Pred]).

owl_parse_nonannotated_axioms(Pred/Arity) :-
        debug(owl_parser_detail,'[unann] Parsing all of type: ~w',[Pred]),
        functor(Head,Pred,Arity),
	forall(owl_parse_axiom(Head,false,_),
	       assert_axiom(Head)
	      ).





rdf_load_stream(URL,Ontology,BaseURI,Imports) :-
        owl_repository(URL,RURL),
        !,
                rdf_load_stream(RURL,Ontology,BaseURI,Imports).

rdf_load_stream(URL,Ontology,BaseURI,Imports) :-
	BaseURI = URL,
  	(   sub_atom(URL,0,4,_,'http')
        ->  catch((http_open(URL,RDF_Stream,[]),
	      rdf_load(RDF_Stream,[if(true),base_uri(BaseURI),blank_nodes(noshare),
				   result(Action, Triples, MD5),register_namespaces(true)]),
		   debug(owl_parser,' Loaded ~w stream: ~w Action: ~w Triples:~w MD5: ~w',[URL,RDF_Stream,Action,Triples,MD5]),
                   close(RDF_Stream)),
                  Message,
                  throw(io_error(URL,'rdf_load/2 failed',Message)))         ;  RDF_Stream = URL, rdf_load(RDF_Stream,[blank_nodes(noshare),if(true),base_uri(BaseURI),register_namespaces(true)])
	),
        	(   rdf(Ontology,'http://www.w3.org/1999/02/22-rdf-syntax-ns#type','http://www.w3.org/2002/07/owl#Ontology',BaseURI:_)
        ->  findall(I,rdf(Ontology,'http://www.w3.org/2002/07/owl#imports',I,BaseURI:_),Imports)
	;   Imports = []
	).







owl_description_list('http://www.w3.org/1999/02/22-rdf-syntax-ns#nil',[]) :- !.

owl_description_list(X,[F|R]) :-
		use_owl(X,'rdf:first',Element,first),
	owl_description(Element,F),
	use_owl(X,'rdf:rest',Y,rest),
	!,owl_description_list(Y,R).



owl_individual_list('http://www.w3.org/1999/02/22-rdf-syntax-ns#nil',[]) :- !.

owl_individual_list(X,[F|R]) :-
		use_owl(X,'rdf:first',F,first),
	use_owl(X,'rdf:rest',Y,rest),
	!,owl_individual_list(Y,R).


owl_property_list('http://www.w3.org/1999/02/22-rdf-syntax-ns#nil',[]) :- !.

owl_property_list(X,[F|R]) :-
		use_owl(X,'rdf:first',Element,first),
	owl_property_expression(Element,F),
	use_owl(X,'rdf:rest',Y,rest),
	!,owl_property_list(Y,R).


owl_datarange_list('http://www.w3.org/1999/02/22-rdf-syntax-ns#nil',[]) :- !.

owl_datarange_list(X,[F|R]) :-
		use_owl(X,'rdf:first',Element,first),
	owl_datarange(Element,F),
	use_owl(X,'rdf:rest',Y,rest),
	!,owl_datarange_list(Y,R).


owl_datatype_restriction_list('http://www.w3.org/1999/02/22-rdf-syntax-ns#nil',[]) :- !.

owl_datatype_restriction_list(X,[facetRestriction(W2,L)|R]) :-
		use_owl(X,'rdf:first',Element,first_datatype_restr),
	use_owl(Element,W,L,datatype_restr),
	(   concat_atom([_,W2],'#',W)
	->  true
	;   W2=W),
	use_owl(X,'rdf:rest',Y,rest_datatype_restr),
	!,owl_datatype_restriction_list(Y,R).





owl_parse_axiom(ontology(O),AnnMode,List) :-
        test_use_owl(O,'rdf:type','owl:Ontology'),
	\+ test_use_owl([owl(U,_W,O),owl(U,'rdf:type','owl:Ontology')]),
	valid_axiom_annotation_mode(AnnMode,O,'rdf:type','owl:Ontology',List),
        use_owl(O,'rdf:type','owl:Ontology',ontology),
        nb_setval(current_ontology,O),
	forall(use_owl(O,'owl:imports',IRI,ontology_import), assert_axiom(ontologyImport(O,IRI))),
	forall(use_owl(O,'owl:versionInfo',IRI2,ontology_version_info), assert_axiom(ontologyVersionInfo(O,IRI2))),!. 

triple_remove([owl(X,'rdf:type','owl:Ontology')],[owl(X,'rdf:type','owl:Ontology')]).
triple_remove([owl(X,'rdf:type','owl:Class'),owl(X,'rdf:type','rdfs:Class')],[owl(X,'rdf:type','rdfs:Class')]).
triple_remove([owl(X,'rdf:type','rdfs:Datatype'),owl(X,'rdf:type','rdfs:Class')],[owl(X,'rdf:type','rdfs:Class')]).
triple_remove([owl(X,'rdf:type','owl:DataRange'),owl(X,'rdf:type','rdfs:Class')],[owl(X,'rdf:type','rdfs:Class')]).
triple_remove([owl(X,'rdf:type','owl:Restriction'),owl(X,'rdf:type','rdfs:Class')],[owl(X,'rdf:type','rdfs:Class')]).
triple_remove([owl(X,'rdf:type','owl:Restriction'),owl(X,'rdf:type','owl:Class')],[owl(X,'rdf:type','owl:Class')]).
triple_remove([owl(X,'rdf:type','owl:ObjectProperty'),owl(X,'rdf:type','rdf:Property')],[owl(X,'rdf:type','rdf:Property')]).
triple_remove([owl(X,'rdf:type','owl:FunctionalProperty'),owl(X,'rdf:type','rdf:Property')],[owl(X,'rdf:type','rdf:Property')]).
triple_remove([owl(X,'rdf:type','owl:InverseFunctionalProperty'),owl(X,'rdf:type','rdf:Property')],[owl(X,'rdf:type','rdf:Property')]).
triple_remove([owl(X,'rdf:type','owl:TransitiveProperty'),owl(X,'rdf:type','rdf:Property')],[owl(X,'rdf:type','rdf:Property')]).
triple_remove([owl(X,'rdf:type','owl:DatatypeProperty'),owl(X,'rdf:type','rdf:Property')],[owl(X,'rdf:type','rdf:Property')]).
triple_remove([owl(X,'rdf:type','owl:AnnotationProperty'),owl(X,'rdf:type','rdf:Property')],[owl(X,'rdf:type','rdf:Property')]).
triple_remove([owl(X,'rdf:type','owl:OntologyProperty'),owl(X,'rdf:type','rdf:Property')],[owl(X,'rdf:type','rdf:Property')]).
triple_remove([owl(X,'rdf:type','rdf:List'),owl(X,'rdf:first',_Y),owl(X,'rdf:rest',_Z)],[owl(X,'rdf:type','rdf:List')]).

triple_replace([owl(X,'rdf:type','owl:OntologyProperty')],[owl(X,'rdf:type','owl:AnnotationProperty')]).
triple_replace([owl(X,'rdf:type','owl:InverseFunctionalProperty')],[owl(X,'rdf:type','owl:ObjectProperty'),owl(X,'rdf:type','owl:InverseFunctionalProperty')]).
triple_replace([owl(X,'rdf:type','owl:TransitiveProperty')],[owl(X,'rdf:type','owl:ObjectProperty'),owl(X,'rdf:type','owl:TransitiveProperty')]).
triple_replace([owl(X,'rdf:type','owl:SymmetricProperty')],[owl(X,'rdf:type','owl:ObjectProperty'),owl(X,'rdf:type','owl:SymmetricProperty')]).

triple_replace([owl(X,'rdf:type','rdfs:Class')],[owl(X,'rdf:type','owl:Class')]).


owl_parse_axiom(class(C),AnnMode,List) :-
	test_use_owl(C,'rdf:type','owl:Class'),
	valid_axiom_annotation_mode(AnnMode,C,'rdf:type','owl:Class',List),
        (   use_owl(C,'rdf:type','owl:Class',named,class(C)) -> true ; use_owl(C,'rdf:type','rdfs:Class',named,class(C))),
	not(class(C)).


owl_parse_axiom(datatype(D), AnnMode, List) :-
        test_use_owl(D,'rdf:type','rdf:Datatype'),
        valid_axiom_annotation_mode(AnnMode,D,'rdf:type','rdf:Datatype',List),
        use_owl(D,'rdf:type','rdf:Datatype',datatype(D)).


owl_parse_axiom(objectProperty(D), AnnMode, List) :-
        test_use_owl(D,'rdf:type','owl:ObjectProperty'),
        valid_axiom_annotation_mode(AnnMode,D,'rdf:type','owl:ObjectProperty',List),
        use_owl(D,'rdf:type','owl:ObjectProperty',objectProperty(D)),
	not(objectProperty(D)).


owl_parse_axiom(dataProperty(D), AnnMode, List) :-
        test_use_owl(D,'rdf:type','owl:DatatypeProperty'),
        valid_axiom_annotation_mode(AnnMode,D,'rdf:type','rdf:DatatypeProperty',List),
        use_owl(D,'rdf:type','owl:DatatypeProperty',dataProperty(D)),
	not(dataProperty(D)).

owl_parse_axiom(annotationProperty(D), AnnMode, List) :-
        test_use_owl(D,'rdf:type','owl:AnnotationProperty'),
        valid_axiom_annotation_mode(AnnMode,D,'rdf:type','rdf:AnnotationProperty',List),
        use_owl(D,'rdf:type','owl:AnnotationProperty',annotationProperty(D)),
	not(annotationProperty(D)).


owl_parse_axiom(namedIndividual(D), AnnMode, List) :-
        test_use_owl(D,'rdf:type','owl:NamedIndividual'),
        valid_axiom_annotation_mode(AnnMode,D,'rdf:type','rdf:NamedIndividual',List),
        use_owl(D,'rdf:type','owl:NamedIndividual',namedIndividual(D)).









ann(X,Y) :-
	ann(X,X,Y).



ann(X,X1, annotation(X1,Y,Z)) :-
	annotationProperty(Y),
        debug(owl_parser_detail,'annotation property: ~w',[Y]),
        owl(X,Y,Z,not_used),
        use_owl(X,Y,Z,annotationProperty(Y)),
	u_assert(aNN(X1,Y,Z)),
	ann2(X,Y,Z,X1).


ann2(X,Y,Z,X1) :-
	annotation_r_node(X,Y,Z,W),
	ann(W,annotation(X1,Y,Z),Term),
        u_assert(Term).

ann2(X,Y,Z,X1) :-
	axiom_r_node(X,Y,Z,W),
	ann(W,annotation(X1,Y,Z),Term),
        u_assert(Term).


ann2(_,_,_,_).



is_bnode(C) :-
	atom(C),
	sub_atom(C,0,2,_,'__').


	owl_property_expression(C,C) :-
	not(is_bnode(C)), 		not(C='http://www.w3.org/1999/02/22-rdf-syntax-ns#first'),
	not(C='http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'),
        !.

owl_property_expression(C,D) :-
	blanknode(C,D,Use),
	(   Use = used,
	    retractall(blanknode(C,D,used)),
	    assert(blanknode(C,D,shared))
	;
	    true).

owl_property_expression(P,inverseOf(Q)) :-
        use_owl(P,'owl:inverseOf',Q,inverseof(P,Q)),
        owl_get_bnode(P,inverseOf(Q)).



owl_datarange(D,D) :-
	not(is_bnode(D)),!.  
owl_datarange(C,D) :-
	blanknode(C,D,Use),
	(   Use = used,
	    retractall(blanknode(C,D,used)),
	    assert(blanknode(C,D,shared))
	;
	true).

owl_datarange(D,intersectionOf(L)) :-
	use_owl(D,'rdf:type','rdfs:Datatype',datarange(D)),
	use_owl(D,'owl:intersectionOf',Y,datarange(D)),
	        owl_datarange_list(Y,L),
	owl_get_bnode(D,intersectionOf(L)).

owl_datarange(D,unionOf(L)) :-
	use_owl(D,'rdf:type','rdfs:Datatype',datarange(D)),
	use_owl(D,'owl:unionOf',Y,datarange(D)),
        owl_datarange_list(Y,L),
	owl_get_bnode(D,unionOf(L)).


owl_datarange(D,complementOf(DY)) :-
	use_owl(D,'rdf:type','rdfs:Datatype',dataRange(D)),
	use_owl(D,'owl:datatypeComplementOf',Y,datacomplement(D)),
        owl_datarange(Y,DY),
	owl_get_bnode(D,complementOf(DY)).

 owl_datarange(D,complementOf('rdfs:Literal')) :-
	use_owl(D,'rdf:type','rdfs:DataRange',dataRange(D)),
	use_owl(D,'owl:oneOf',[],oneOf(D)),
	owl_get_bnode(D,complementOf('rdfs:Literal')).

owl_datarange(D,oneOf(L)) :-
	use_owl(D,'rdf:type','rdfs:Datatype',dataType(D)),
	use_owl(D,'owl:oneOf',L1,oneOf(D)),
	owl_individual_list(L1,L),
	owl_get_bnode(D,oneOf(L)).

owl_datarange(D,oneOf(L)) :-
	use_owl(D,'rdf:type','rdfs:DataRange',datarange(D)),
	use_owl(D,'owl:oneOf',L1,datarange(D)),
	owl_individual_list(L1,L),
	owl_get_bnode(D,oneOf(L)).


owl_datarange(D,datatypeRestriction(DY,L)) :-
	use_owl(D,'rdf:type','rdfs:Datatype',datarange(D)),
	use_owl(D,'owl:onDatatype',Y,datarange(D)),
	owl_datarange(Y,DY),
	use_owl(D,'owl:withRestrictions',L1,datarange(D)),
	owl_datatype_restriction_list(L1,L),
	owl_get_bnode(D,datatypeRestriction(DY,L)).



owl_description(C,C) :-
	not(is_bnode(C)),!. 

owl_description(C,D) :-
	blanknode(C,D,Use),
	(   Use = used,
	    retractall(blanknode(C,D,used)),
	    assert(blanknode(C,D,shared))
	;
	    true),!.

owl_description(D,intersectionOf(L)) :-
	use_owl(D,'owl:intersectionOf',L1,intersectionOf(D)),
	owl_description_list(L1,L),
	\+L = [],
	owl_get_bnode(D,intersectionOf(L)),!.

owl_description(D,unionOf(L)) :-
	use_owl(D,'owl:unionOf',L1,union(D)),
	owl_description_list(L1,L),
	owl_get_bnode(D,unionOf(L)),!.


owl_description(D,complementOf(Descr)) :-
	use_owl(D,'owl:complementOf',D1,complementOf(D)),
	owl_description(D1,Descr),
	owl_get_bnode(D,complementOf(Descr)),!.

owl_description(D,oneOf(L)) :-
	use_owl(D,'owl:oneOf',L1,oneOf(D)),
	(   use_owl(D,'rdf:type','owl:Class',oneOf(D,L)) ; true),
	owl_individual_list(L1,L),
	owl_get_bnode(D,oneOf(L)),!.

owl_description(D,datatypeRestriction(DY,L)) :-
	use_owl(D,'rdf:type','rdfs:Datatype',datatypeRestr(D)),
	use_owl(D,'owl:onDatatype',Y,dataType(D)),
	owl_datarange(Y,DY),
	use_owl(D,'owl:withRestrictions',L1,withRestrictions(D)),
	owl_datatype_restriction_list(L1,L),
	owl_get_bnode(D,datatypeRestriction(DY,L)).

owl_description(D,Restriction) :-
	owl_restriction(D, Restriction),
	owl_get_bnode(D,Restriction),!.


owl_description(D,Result) :-
	not(is_bnode(D)), 	use_owl(D,'rdf:type','owl:Class',description(D)),
	use_owl(D,'owl:unionOf',L,unionOf(L)),
	owl_description_list(L,DL),
	(   DL = [], Result = 'owl:Nothing' ;
	    DL = [D1], Result = D1),
	owl_get_bnode(D,Result),!.

owl_description(D,Result) :-
	not(is_bnode(D)), 	use_owl(D,'rdf:type','owl:Class',dl_compatibility_descr(D)),
	use_owl(D,'owl:intersectionOf',L,intersectionOf(D)),
	owl_description_list(L,DL),
	(   DL = [], Result = 'owl:Thing' ;
	    DL = [D1], Result = D1),
	owl_get_bnode(D,Result),!.

owl_description(D,Result) :-
	not(is_bnode(D)),!, 	use_owl(D,'rdf:type','owl:Class',dl_compatibility_descr(D)),
	use_owl(D,'owl:oneOf',[],oneOf(D)),
	Result = 'owl:Nothing',
	owl_get_bnode(D,Result).

onClass(E,D) :- use_owl(E,'http://www.w3.org/2006/12/owl2#onClass',D,onClass(E)).
onClass(E,D) :- use_owl(E,'owl:onClass',D,onClass(E)).

onDataRange(E,D) :- use_owl(E, 'owl:onDataRange',D,onDatarange(E)).



owl_restriction(Element,Restriction) :-
	use_owl(Element,'rdf:type','owl:Restriction',restriction(Element)),
	(   use_owl(Element, 'owl:onProperty',PropertyID,onProperty(Element,PropertyID)) ;
    	    use_owl(Element, 'owl:onProperties',PropertyID,onProperties(Element,PropertyID))
	),
	owl_restriction_type(Element,PropertyID, Restriction),
        debug(owl_parser_detail,'Restriction: ~w',[Restriction]).



owl_restriction_type(E, P, someValuesFrom(PX, DX)) :-
	use_owl(E, 'owl:someValuesFrom',D,someValuesFrom(E,P)),
	(   owl_description(D, DX) ; owl_datarange(D,DX)),
        (   P = [_|_], owl_property_list(P,PX) ;  owl_property_expression(P, PX)).


owl_restriction_type(E, P, allValuesFrom(PX,DX)) :-
	use_owl(E, 'owl:allValuesFrom',D,allValuesFrom(E,P)),
	(   owl_description(D, DX) ; owl_datarange(D,DX)),
        (   P = [_|_], owl_property_list(P,PX) ;  owl_property_expression(P, PX)).


owl_restriction_type(E, P, hasValue(PX,Value)) :-
	use_owl(E, 'owl:hasValue',Value,hasValue(E)),
        owl_property_expression(P, PX).

owl_restriction_type(E, P, hasSelf(PX)) :-
	use_owl(E, 'owl:hasSelf', true,hasSelf(E)),
        owl_property_expression(P, PX).


owl_restriction_type(E, P, exactCardinality(N,PX,DX)) :-
	test_use_owl(E, 'owl:cardinality',Lit),
        onClass(E,D),
	owl_description(D, DX),!,
	use_owl(E, 'owl:cardinality',Lit,cardinality(E)),
        literal_integer(Lit,N),
        owl_property_expression(P, PX).

owl_restriction_type(E, P, minCardinality(N,PX,DX)) :-
	test_use_owl(E, 'owl:minCardinality',Lit),
        (   onClass(E,D),owl_description(D, DX)
        ;   onDataRange(E,D), owl_datarange(D,DX)),
	!,
        	use_owl(E, 'owl:minCardinality',Lit,minCardinality(E)),
        literal_integer(Lit,N),
        owl_property_expression(P, PX).

owl_restriction_type(E, P, maxCardinality(N,PX,DX)) :-
	test_use_owl(E, 'owl:maxCardinality',Lit),
        (   onClass(E,D),owl_description(D, DX)
        ;   onDataRange(E,D), owl_datarange(D,DX)),
	!,
        	use_owl(E, 'owl:maxCardinality',Lit,maxCard(E)),
        literal_integer(Lit,N),
        owl_property_expression(P, PX).



owl_restriction_type(E, P,exactCardinality(N,PX)) :-
	use_owl(E, 'owl:cardinality',Lit,cardinality(E)),
        literal_integer(Lit,N),
        owl_property_expression(P, PX).

owl_restriction_type(E, P,exactCardinality(N,PX,DX)) :-
	use_owl(E, 'owl:qualifiedCardinality',Lit),literal_integer(Lit,N),
	(   onClass(E,D),owl_description(D, DX) ;
	    onDataRange(E,D), owl_datarange(D,DX)
	),
        owl_property_expression(P, PX).


owl_restriction_type(E, P, minCardinality(N,PX)) :-
	use_owl(E, 'owl:minCardinality',Lit,cardinality(E)),literal_integer(Lit,N),
        owl_property_expression(P, PX).

owl_restriction_type(E, P, minCardinality(N,PX,DX)) :-
	use_owl(E, 'owl:minQualifiedCardinality',Lit,cardinality(E)),literal_integer(Lit,N),
	(   onClass(E,D),owl_description(D, DX);
	    onDataRange(E,D), owl_datarange(D,DX)
	),
        owl_property_expression(P, PX).


owl_restriction_type(E, P, maxCardinality(N,PX)) :-
	use_owl(E, 'owl:maxCardinality',Lit,maxCardinality(E)),literal_integer(Lit,N),
        owl_property_expression(P, PX).

owl_restriction_type(E, P, maxCardinality(N,PX,DX)) :-
	use_owl(E, 'owl:maxQualifiedCardinality',Lit,cardinality(E,Lit)),
	literal_integer(Lit,N),
	(   onClass(E,D),owl_description(D, DX);
	    onDataRange(E,D), owl_datarange(D,DX)),
        owl_property_expression(P, PX).





collect_r_nodes :-
	retractall(axiom_r_node(_,_,_,_)),
	forall(( test_use_owl(Node,'rdf:type','owl:Axiom'),
		 test_use_owl(Node,'owl:annotatedSource',S),
		 test_use_owl(Node,'owl:annotatedProperty',P),
		 test_use_owl(Node,'owl:annotatedTarget',O)),
	       (assert(axiom_r_node(S,P,O,Node)),
                debug(owl_parser_detail,'~w',[axiom_r_node(S,P,O,Node)]),
		use_owl([owl(Node,'rdf:type','owl:Axiom'),
			 owl(Node,'owl:annotatedSource',S),
			 owl(Node,'owl:annotatedProperty',P),
			 owl(Node,'owl:annotatedTarget',O)]))),

	retractall(annotation_r_node(_,_,_,_)),
	forall(( test_use_owl(W,'rdf:type','owl:Annotation'),
		 test_use_owl(W,'owl:annotatedSource',S),
		 test_use_owl(W,'owl:annotatedProperty',P),
		 test_use_owl(W,'owl:annotatedTarget',O)),
	       (assert(annotation_r_node(S,P,O,Node)),
                debug(owl_parser_detail,'~w',[annotation_r_node(S,P,O,Node)]),
		use_owl([owl(W,'rdf:type','owl:Annotation'),
			 owl(W,'owl:annotatedSource',S),
			 owl(W,'owl:annotatedProperty',P),
			 owl(W,'owl:annotatedTarget',O)]))).


valid_axiom_annotation_mode(_Mode,S,P,O,List) :-
	findall(Node,axiom_r_node(S,P,O,Node),List).


owl_parse_axiom(subClassOf(DX,DY),AnnMode,List) :-
	test_use_owl(X,'rdfs:subClassOf',Y),
	valid_axiom_annotation_mode(AnnMode,X,'rdfs:subClassOf',Y,List),
	use_owl(X,'rdfs:subClassOf',Y,subclassOf(X,Y)),
        owl_description(X,DX),
	owl_description(Y,DY).


owl_parse_axiom(equivalentClasses(DL),AnnMode,List) :-
	test_use_owl(X,'owl:equivalentClass',Y),
	valid_axiom_annotation_mode(AnnMode,X,'owl:equivalentClass',Y,List),
	use_owl(X,'owl:equivalentClass',Y,equivalentClass(X,Y)),
                maplist(owl_description,[X,Y],DL),
        debug(owl_parser_detail,'equivalentClasses Descs: ~w',[DL]).


owl_parse_axiom(equivalentClasses([C,intersectionOf(D)]),AnnMode,List) :-
	class(C),
	test_use_owl(C,'owl:intersectionOf',D1),
	debug(owl_parser,'equivalent collection; intersection for ~w',[C]),
	valid_axiom_annotation_mode(AnnMode,C,'owl:intersectionOf',D1,List),
	owl_description(C,intersectionOf(D)).

owl_parse_axiom(equivalentClasses([C,unionOf(D)]),AnnMode,List) :-
	class(C),
	test_use_owl(C,'owl:unionOf',D1),
	debug(owl_parser,'equivalent collection; union for ~w',[C]),
	valid_axiom_annotation_mode(AnnMode,C,'owl:unionOf',D1,List),
	owl_description(C,unionOf(D)).

owl_parse_axiom(equivalentClasses([C,oneOf(D)]),AnnMode,List) :-
	class(C),
	test_use_owl(C,'owl:oneOf',D1),
	debug(owl_parser,'equivalent collection; one of for ~w',[C]),
	valid_axiom_annotation_mode(AnnMode,C,'owl:oneOf',D1,List),
	owl_description(C,oneOf(D)).


owl_parse_axiom(equivalentClasses([C,D])) :-
                (   test_use_owl(C,'rdf:type','owl:Class',named)
        ;   test_use_owl(C,'rdf:type','rdfs:Class',named)
        ;   class(C)),
        owl_description(C,D),
        C\=D.


owl_parse_axiom(disjointClasses([DX,DY]),AnnMode,List) :-
	test_use_owl(X,'owl:disjointWith',Y),
	valid_axiom_annotation_mode(AnnMode,X,'owl:disjointWith',Y,List),
	use_owl(X,'owl:disjointWith',Y,disjointWith(X,Y)),
        owl_description(X,DX),
	owl_description(Y,DY).


owl_parse_axiom(disjointClasses(L),_AnnMode,[X]) :-
        	use_owl(X,'rdf:type','owl:AllDisjointClasses',allDisjointClasses(X)),
        use_owl(X,'owl:members',L1,members(L1)),
        owl_description_list(L1,L).


owl_parse_axiom(disjointUnion(DX,DY),AnnMode,List) :-
	test_use_owl(X,'owl:disjointUnionOf',Y),
	valid_axiom_annotation_mode(AnnMode,X,'owl:disjointUnionOf',Y,List),
	use_owl(X,'owl:disjointUnionOf',Y,disjointUnionOf(X,Y)),
        owl_description(X,DX),
        owl_description_list(Y,DY).




owl_parse_axiom(subPropertyOf(propertyChain(PL),QX),AnnMode,List) :-
	test_use_owl(Q,'owl:propertyChainAxiom',L1),
	valid_axiom_annotation_mode(AnnMode,Q,'owl:propertyChainAxiom',L1,List),
	use_owl(Q,'owl:propertyChainAxiom',L1,propertyChainAxiom(Q)),
	owl_property_list(L1,PL),
        owl_property_expression(Q,QX).

owl_parse_axiom(subPropertyOf(PX,QX),AnnMode,List) :-
	test_use_owl(P,'rdfs:subPropertyOf',Q),
	valid_axiom_annotation_mode(AnnMode,P,'rdfs:subPropertyOf',Q,List),
	use_owl(P,'rdfs:subPropertyOf',Q,subPropertyOf(P,Q)),
        owl_property_expression(P,PX),
        owl_property_expression(Q,QX).



owl_parse_axiom(equivalentProperties(OPEL),AnnMode,List) :-
	test_use_owl(X,'owl:equivalentProperty',Y),
	valid_axiom_annotation_mode(AnnMode,X,'owl:equivalentProperty',Y,List),
	use_owl(X,'owl:equivalentProperty',Y,equivProperty(X,Y)),
		maplist(owl_property_expression,[X,Y],OPEL).



owl_parse_axiom(disjointProperties([DX,DY]),AnnMode,List) :-
	test_use_owl(X,'owl:propertyDisjointWith',Y),
	valid_axiom_annotation_mode(AnnMode,X,'owl:propertyDisjointWith',Y,List),
	use_owl(X,'owl:propertyDisjointWith',Y,propertyDisjointWith(X,Y)),
        owl_description(X,DX),
	owl_description(Y,DY).


owl_parse_axiom(disjointProperties(L),_AnnMode,[X]) :-
        	use_owl(X,'rdf:type','owl:AllDisjointProperties',allDisjointProps(X,L1)),
        use_owl(X,'owl:members',L1,members(L1)),
        L1 = [_,_|_],                   owl_property_list(L1,L).


owl_parse_axiom(propertyDomain(PX,CX),AnnMode,List) :-
	test_use_owl(P,'rdfs:domain',C),
	valid_axiom_annotation_mode(AnnMode,P,'rdfs:domain',C,List),
        use_owl(P,'rdfs:domain',C,domain(P,C)),
	(   annotationProperty(P),CX = C ;
	    owl_property_expression(P,PX),
	    owl_description(C,CX)
	).


owl_parse_axiom(propertyRange(PX,CX),AnnMode,List) :-
	test_use_owl(P,'rdfs:range',C),
	valid_axiom_annotation_mode(AnnMode,P,'rdfs:range',C,List),
        use_owl(P,'rdfs:range',C,range(P,C)),
	(   annotationProperty(P) -> PX = P, CX = C ;
	    owl_property_expression(P,PX),
            (   owl_description(C,CX) -> true ; owl_datarange(C,CX))
	).

owl_parse_axiom(inverseProperties(PX,QX),AnnMode,List) :-
	test_use_owl(P,'owl:inverseOf',Q),
	valid_axiom_annotation_mode(AnnMode,P,'owl:inverseOf',Q,List),
	use_owl(P,'owl:inverseOf',Q,inverseOf(P,Q)),
        owl_property_expression(P,PX),
        owl_property_expression(Q,QX).

owl_parse_axiom(functionalProperty(P),AnnMode,List) :-
	test_use_owl(P,'rdf:type','owl:FunctionalProperty'),
	valid_axiom_annotation_mode(AnnMode,P,'rdf:type','owl:FunctionalProperty',List),
        use_owl(P,'rdf:type','owl:FunctionalProperty',functionalProperty(P)).

owl_parse_axiom(inverseFunctionalProperty(P),AnnMode,List) :-
	test_use_owl(P,'rdf:type','owl:InverseFunctionalProperty'),
	valid_axiom_annotation_mode(AnnMode,P,'rdf:type','owl:InverseFunctionalProperty',List),
        use_owl(P,'rdf:type','owl:InverseFunctionalProperty',inverseFunctionalProperty(P)).

owl_parse_axiom(reflexiveProperty(P),AnnMode,List) :-
	test_use_owl(P,'rdf:type','owl:ReflexiveProperty'),
	valid_axiom_annotation_mode(AnnMode,P,'rdf:type','owl:ReflexiveProperty',List),
        use_owl(P,'rdf:type','owl:ReflexiveProperty',reflexiveProperty(P)).

owl_parse_axiom(irreflexiveProperty(P),AnnMode,List) :-
	test_use_owl(P,'rdf:type','owl:IrreflexiveProperty'),
	valid_axiom_annotation_mode(AnnMode,P,'rdf:type','owl:IrreflexiveProperty',List),
        use_owl(P,'rdf:type','owl:IrreflexiveProperty',irreflexiveProperty(P)).

owl_parse_axiom(symmetricProperty(P),AnnMode,List) :-
	test_use_owl(P,'rdf:type','owl:SymmetricProperty'),
	valid_axiom_annotation_mode(AnnMode,P,'rdf:type','owl:SymmetricProperty',List),
        use_owl(P,'rdf:type','owl:SymmetricProperty',symmetricProperty(P)).

owl_parse_axiom(asymmetricProperty(P),AnnMode,List) :-
	test_use_owl(P,'rdf:type','owl:AsymmetricProperty'),
	valid_axiom_annotation_mode(AnnMode,P,'rdf:type','owl:AsymmetricProperty',List),
        use_owl(P,'rdf:type','owl:AsymmetricProperty',assymetricProperty(P)).

owl_parse_axiom(transitiveProperty(P),AnnMode,List) :-
	test_use_owl(P,'rdf:type','owl:TransitiveProperty'),
	valid_axiom_annotation_mode(AnnMode,P,'rdf:type','owl:TransitiveProperty',List),
	use_owl(P,'rdf:type','owl:TransitiveProperty',transitiveProperty(P)).

owl_parse_axiom(hasKey(CX,L),AnnMode,List) :-
	test_use_owl(C,'owl:hasKey',L1),
	valid_axiom_annotation_mode(AnnMode,C,'owl:hasKey',L1,List),
	use_owl(C,'owl:hasKey',L1,hasKey(C)),
	owl_description(C,CX),
        L1 = [_,_|_],                   owl_property_list(L1,L).


owl_parse_axiom(sameIndividual([X,Y]),AnnMode,List) :-
	test_use_owl(X,'owl:sameAs',Y),
	valid_axiom_annotation_mode(AnnMode,X,'owl:sameAs',Y,List),
	use_owl(X,'owl:sameAs',Y,sameAs(X,Y)).

owl_parse_axiom(differentIndividuals([X,Y]),AnnMode,List) :-
	test_use_owl(X,'owl:differentFrom',Y),
	valid_axiom_annotation_mode(AnnMode,X,'owl:differentFrom',Y,List),
	use_owl(X,'owl:differentFrom',Y,differentFrom(X,Y)).

owl_parse_axiom(differentIndividuals(L),_AnnMode,[X]) :-
	use_owl(X,'rdf:type','owl:AllDifferent',allDifferent(L)),
	use_owl(X,'owl:distinctMembers',L1,distinctMembers(L)),
        owl_individual_list(L1,L).

owl_parse_axiom(differentIndividuals(L),_AnnMode,[X]) :-
	use_owl(X,'rdf:type','owl:AllDifferent',allDifferent(X)),
	use_owl(X,'owl:members',L1,members(L)),
        owl_individual_list(L1,L).

owl_parse_axiom(annotationAssertion('owl:deprecated', X, true),AnnMode,List) :-
	test_use_owl(X, 'rdf:type', 'owl:DeprecatedClass'),
	valid_axiom_annotation_mode(AnnMode,X,'rdf:type','owl:DeprecatedClass',List),
	use_owl(X, 'rdf:type', 'owl:DeprecatedClass',deprecatedClass(X)).

owl_parse_axiom(annotationAssertion('owl:deprecated', X, true),AnnMode,List) :-
	test_use_owl(X, 'rdf:type', 'owl:DeprecatedProperty'),
	valid_axiom_annotation_mode(AnnMode,X,'rdf:type','owl:DeprecatedProperty',List),
	use_owl(X, 'rdf:type', 'owl:DeprecatedProperty',deprecatedProperty(X)).


dothislater(annotationAssertion/3).

owl_parse_axiom(annotationAssertion(P,A,B),AnnMode,List) :-
        annotationProperty(P),
        test_use_owl(A,P,B),                 valid_axiom_annotation_mode(AnnMode,A,P,B,List),
        use_owl(A,P,B,annotationProperty(P)).


dothislater(classAssertion/2).
owl_parse_axiom(classAssertion(CX,X),AnnMode,List) :-
	test_use_owl(X,'rdf:type',C),
        C\='http://www.w3.org/2002/07/owl#DeprecatedClass',
				valid_axiom_annotation_mode(AnnMode,X,'rdf:type',C,List),
	use_owl(X,'rdf:type',C,classAssertion(CX,X)),
                                C\='http://www.w3.org/2002/07/owl#Class',
                C\='http://www.w3.org/1999/02/22-rdf-syntax-ns#Property',
        owl_description(C,CX).

dothislater(propertyAssertion/3).
owl_parse_axiom(propertyAssertion(PX,A,BX),AnnMode,List) :-
        test_use_owl(A,P,B),         P\='http://www.w3.org/1999/02/22-rdf-syntax-ns#type',
				valid_axiom_annotation_mode(AnnMode,A,P,B,List),
        \+ annotationProperty(P), 	owl_property_expression(P,PX), 		(   owl_individual_list(B,BX) -> true ; BX = B),
        use_owl(A,P,B,propertyAssertion(PX,A,BX)).


owl_parse_axiom(negativePropertyAssertion(PX,A,B),_,X) :-
        use_owl(X,'rdf:type','owl:NegativePropertyAssertion',negPropertyAssertion(PX,A,B)),
        use_owl(X,'owl:sourceIndividual',A,negPropertyAssertion(PX,A,B)),
        use_owl(X,'owl:assertionProperty',P,negPropertyAssertion(PX,A,B)),
        use_owl(X,'owl:targetValue',B,negPropertyAssertion(PX,A,B)),
        owl_property_expression(P,PX).


owl_parse_axiom(A,AnnMode,List) :-
        owl_parse_axiom_hook(A,AnnMode,List).


parse_annotation_assertions :-
	( nb_current(rind,RIND) -> true ; RIND = []),!,
	forall((aNN(X,AP,AV),findall( aNN(annotation(X,AP,AV),AP1,AV1),
				      aNN(annotation(X,AP,AV),AP1,AV1),ANN), \+member(X,RIND)),
	       (   assert_axiom(annotationAssertion(AP,X,AV)),
		  		  		   forall(member(aNN(_,AP1,AV1),ANN),
			    assert_axiom(annotation(annotationAssertion(AP,X,AV),AP1,AV1))
			 )
	       )
	      ),
			retractall(aNN(_,_,_)).


owl_parse_compatibility_DL(equivalentClasses([CEX,complementOf(CEY)])) :-
	use_owl(X,'owl:complementOf',Y,eq_classes),
	owl_description(X,CEX),
	owl_description(Y,CEY).


owl_parse_compatibility_DL(equivalentClasses([CEX,CEY])) :-
	use_owl(X,'owl:unionOf',Y,eq_classes),
	owl_description(X,CEX),
	owl_description_list(Y,DL),
	(   DL = [] -> CEY = 'owl:Nothing' ; (DL=[CEY]->true;CEY = unionOf(DL))).

owl_parse_compatibility_DL(equivalentClasses([CEX,CEY])) :-
	use_owl(X,'owl:intersectionOf',Y,eq_classes),
	owl_description(X,CEX),
	owl_description_list(Y,DL),
	(   DL = [] -> CEY = 'owl:Thing' ; (DL=[CEY]->true;CEY = intersectionOf(DL))).

owl_parse_compatibility_DL(equivalentClasses([CEX,CEY])) :-
	use_owl(X,'owl:oneOf',Y,eq_classes),
	owl_description(X,CEX),
	owl_description_list(Y,DL),
	(   DL = [] -> CEY = 'owl:Nothing' ; CEY = oneOf(DL)).


maximally_connected_subgraph_over(P,CSet):-
        maximally_connected_subgraph_over(P,[],CSetL),
        member(CSet,CSetL).

maximally_connected_subgraph_over(P,Used,[CSet|All]):-
        test_use_owl(X,P,Y),         \+ member(X,Used),
        \+ member(Y,Used),
        use_owl(X,P,Y,maximally_conected),         !,
        extend_set_over(P,[X,Y],CSet),
        append(CSet,Used,Used2),
        maximally_connected_subgraph_over(P,Used2,All).
maximally_connected_subgraph_over(_,_,[]).


extend_set_over(P,L,L2):-
        member(X,L),
        test_use_owl(X,P,Y),
        \+ member(Y,L),
        use_owl(X,P,Y,extend_set_over),
        !,extend_set_over(P,[Y|L],L2).
extend_set_over(P,L,L2):-
        member(X,L),
        test_use_owl(Y,P,X),
        \+ member(Y,L),
        use_owl(Y,P,X,extend_set_over),
        !,extend_set_over(P,[Y|L],L2).
extend_set_over(_,L,L):- !.

literal_integer(literal(type,A),N) :- atom_number(A,N).
literal_integer(literal(type(_,A)),N) :- atom_number(A,N).

time_goal(Goal,Time):-
        statistics(cputime,T1), Goal,
        statistics(cputime,T2), Time is T2-T1.

timed_forall(Cond,Action) :-
        forall(Cond,
               (   time_goal(Action,Time),
                   debug(owl2_bench,'Goal: ~w Time:~w',[Action,Time]))).






































:- use_module(owl2_model).
:- use_module(owl2_from_rdf).


:- begin_tests(wine,[setup(load_rdffile)]).

load_rdffile :-
        owl_parse_rdf('testfiles/wine.owl').

test(loaded) :-
        \+ \+ ontology(_).

test(expected) :-        test_expected.
test(expected_count) :-        test_expected_count.

expected_count(class(_),74).
expected_count(transitiveProperty(_),1).

expected(objectProperty('http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#locatedIn')).
expected(subClassOf('http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#Wine', 'http://www.w3.org/TR/2003/PR-owl-guide-20031209/food#PotableLiquid')).
expected(ontologyAxiom('http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine',
                       propertyAssertion('http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#hasBody',
                                         'http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#SelaksIceWine',
                                         'http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#Medium'))).

expected(axiom(equivalentClasses(['http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#WhiteWine',
				  intersectionOf(['http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#Wine',
						  hasValue('http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#hasColor',
							   'http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#White')])
				 ]))).

:- end_tests(wine).

:- begin_tests(wine_and_food,[setup(load_and_import_rdffile)]).

load_and_import_rdffile :-
        owl_parse_rdf('testfiles/wine.owl',[imports(true),clear(complete)]).

test(loaded) :-
        \+ \+ ontology(_).

test(expected) :-        test_expected.
test(expected_count) :-        test_expected_count.

expected_count(class(_),137).

expected(objectProperty('http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#locatedIn')).
expected(subClassOf('http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#Wine', 'http://www.w3.org/TR/2003/PR-owl-guide-20031209/food#PotableLiquid')).
expected(ontologyAxiom('http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine',
                       propertyAssertion('http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#hasBody',
                                         'http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#SelaksIceWine',
                                         'http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#Medium'))).


expected(objectProperty('http://www.w3.org/TR/2003/PR-owl-guide-20031209/food#madeFromFruit')).
expected(disjointClasses(['http://www.w3.org/TR/2003/PR-owl-guide-20031209/food#PastaWithWhiteSauce', 'http://www.w3.org/TR/2003/PR-owl-guide-20031209/food#PastaWithRedSauce'])).
expected(subClassOf('http://www.w3.org/TR/2003/PR-owl-guide-20031209/food#PastaWithWhiteSauce', 'http://www.w3.org/TR/2003/PR-owl-guide-20031209/food#Pasta')).

expected(ontologyAxiom('http://www.w3.org/TR/2003/PR-owl-guide-20031209/food',
                       subClassOf('http://www.w3.org/TR/2003/PR-owl-guide-20031209/food#PastaWithWhiteSauce', 'http://www.w3.org/TR/2003/PR-owl-guide-20031209/food#Pasta'))).



:- end_tests(wine_and_food).

:- begin_tests(hydrology,[setup(load_rdffile)]).

load_rdffile :-
        owl_parse_rdf('testfiles/Hydrology.owl',[clear(complete)]).

test(loaded) :-
        \+ \+ ontology(_).

test(expected_count) :- test_expected_count.
test(expected) :-        test_expected.

test(clean) :-
        \+ ((classAssertion(_,BNode),
             sub_atom(BNode,_,_,_,'#__Description'))).


expected_count(class(_),186).
expected_count(symmetricProperty(_),3). 


expected(class('http://www.ordnancesurvey.co.uk/ontology/Hydrology/v2.0/Hydrology.owl#Canal')).

expected(annotationAssertion('http://www.ordnancesurvey.co.uk/ontology/Rabbit/v1.0/Rabbit.owl#Rabbit',
  'http://www.ordnancesurvey.co.uk/ontology/Hydrology/v2.0/Hydrology.owl#Burn',
  literal('Every Burn is a kind of Stream.\nEvery Burn is only located in exactly 1 of Scotland or Northern England.'))).

expected(symmetricProperty('http://www.ordnancesurvey.co.uk/ontology/SpatialRelations/v0.2/SpatialRelations.owl#isAdjacentTo')).
expected(objectProperty('http://www.ordnancesurvey.co.uk/ontology/SpatialRelations/v0.2/SpatialRelations.owl#isAdjacentTo')).

expected(annotationAssertion('http://www.ordnancesurvey.co.uk/ontology/Rabbit/v1.0/Rabbit.owl#Rabbit', 'http://www.ordnancesurvey.co.uk/ontology/Hydrology/v2.0/Hydrology.owl#Irrigation', literal('Irrigation is a secondary concept.'))).
expected(annotationAssertion('http://www.w3.org/2000/01/rdf-schema#comment', 'http://www.ordnancesurvey.co.uk/ontology/Hydrology/v2.0/Hydrology.owl#MineralWater', literal('Mineral Water is a secondary concept.\nEvery Mineral Water contains Mineral Salts.'))).
expected(annotationAssertion('http://purl.org/dc/elements/1.1/publisher', 'http://www.ordnancesurvey.co.uk/ontology/Hydrology/v2.0/Hydrology.owl', literal('Ordnance Survey'))).
expected(annotationAssertion('http://www.w3.org/2000/01/rdf-schema#label', 'http://www.ordnancesurvey.co.uk/ontology/Hydrology/v2.0/Hydrology.owl#Transport', literal('Transport'))).
expected(classAssertion('http://www.ordnancesurvey.co.uk/ontology/Hydrology/v2.0/Hydrology.owl#Surface', 'http://www.ordnancesurvey.co.uk/ontology/Hydrology/v2.0/Hydrology.owl#EarthsSurface')).
expected(propertyAssertion('http://www.ordnancesurvey.co.uk/ontology/Topography/v0.1/Topography.owl#isPartOf', 'http://www.ordnancesurvey.co.uk/ontology/Hydrology/v2.0/Hydrology.owl#Northern_England', 'http://www.ordnancesurvey.co.uk/ontology/Topography/v0.1/Topography.owl#England')).


expected(ontology('http://www.ordnancesurvey.co.uk/ontology/Hydrology/v2.0/Hydrology.owl')).


expected(classAssertion('http://www.ordnancesurvey.co.uk/ontology/Hydrology/v2.0/Hydrology.owl#UKCountry', 'http://www.ordnancesurvey.co.uk/ontology/Hydrology/v2.0/Hydrology.owl#scotland')).

expected(subClassOf('http://www.ordnancesurvey.co.uk/ontology/Hydrology/v2.0/Hydrology.owl#LockGate',
                    someValuesFrom('http://www.ordnancesurvey.co.uk/ontology/MereologicalRelations/v0.2/MereologicalRelations.owl#isPartOf',
                                   'http://www.ordnancesurvey.co.uk/ontology/Hydrology/v2.0/Hydrology.owl#Lock'))).


:- end_tests(hydrology).

:- begin_tests(edge_cases,[setup(load_rdffile)]).

load_rdffile :-
        owl_parse_rdf('testfiles/rdfowl_test.owl',[clear(complete)]).

test(loaded) :-
        \+ \+ ontology(_).

test(expected_count) :- test_expected_count.

expected_count(class(_),4).

:- end_tests(edge_cases).

:- begin_tests(repository_test,[]).

test(no_repos) :-
        retractall(owl2_from_rdf:owl_repository(_,_)),
        \+ catch(owl_parse_rdf('testfiles/import_test.owl',[imports(true)]),
                 Message,
                 (   format('Got error as expected: ~w~n',[Message]),
                     fail)).

test(with_repos) :-
        retractall(owl2_from_rdf:owl_repository(_,_)),
        assert(owl2_from_rdf:owl_repository('http://y.org','http://www.w3.org/TR/2003/CR-owl-guide-20030818/wine')),
        owl_parse_rdf('testfiles/import_test.owl',[imports(true)]).


:- end_tests(repository_test).


:- begin_tests(owl2_test_cases,[setup(setup_owl2_test_cases)]).

test(all) :-
	expand_file_name('c:/sw/supportmaterial/owl/owl2_test_cases/all



owl_clear_as :-
        debug(owl_parser,'Clearing abstract syntax',[]),
        forall((axiompred(PredSpec),predspec_head(PredSpec,Head)),
               retractall(Head)).

predspec_head(Pred/A,Head) :- functor(Head,Pred,A).

u_assert(Term) :-
	call(Term), !; assert(Term).


convert(T,V,typed_value(T,V)).




rdf_2_owl(Base,Ont) :-
	debug(owl_parser,'Copying RDF triples to OWL triples for Ontology ~w',[Ont]),
	rdf(X,Y,Z,Base:_),
	assert(owl(X,Y,Z,Ont)), fail.

rdf_2_owl(_,Ont) :-
	owl_count(Ont,Z),
	debug(owl_parser,'Number of owl triples copied: ~w',[Z]).



owl_count(O,U) :-
	findall(1,owl(_,_,_,O),X), length(X,U).

expand_and_assert(X1,Y1,Z1) :-
	expand_ns(X1,X),
	expand_ns(Y1,Y),
	expand_ns(Z1,Z),!,
	retractall(owl(X,Y,Z, used1)),
	assert(owl(X,Y,Z, not_used)).


test_use_owl([]).
test_use_owl([owl(S,P,O)|Rest]) :-
	test_use_owl(S,P,O),
	test_use_owl(Rest).


test_use_owl(X1,Y1,Z1) :-
	expand_ns(X1,X),
	expand_ns(Y1,Y),
	expand_ns(Z1,Z),!,
	owl(X,Y,Z, not_used).

test_use_owl(X1,Y1,Z1,named) :-
	expand_ns(X1,X),
	expand_ns(Y1,Y),
	expand_ns(Z1,Z),
	owl(X,Y,Z, not_used),
	not(sub_string(X,0,2,_,'__')).



use_owl(Triples) :-
        test_use_owl(Triples),
        use_owl_2(Triples).

use_owl_2([]).
use_owl_2([owl(S,P,O)|Triples]) :-
        use_owl(S,P,O),
        use_owl_2(Triples).


use_owl(X1,Y1,Z1) :-
	expand_ns(X1,X),
	expand_ns(Y1,Y),
	expand_ns(Z1,Z),
	owl(X,Y,Z, not_used),
	debug(owl_parser_detail,'using ~w ~w ~w',[X,Y,Z]),
	retract(owl(X,Y,Z, not_used)),
	assert(owl(X,Y,Z,used1)).



use_owl(X1,Y1,Z1,named) :-
	expand_ns(X1,X),
	expand_ns(Y1,Y),
	expand_ns(Z1,Z),
	owl(X,Y,Z, not_used),
	not(sub_string(X,0,2,_,'__')),
	retract(owl(X,Y,Z, not_used)),
	assert(owl(X,Y,Z,used2)).


use_owl(X1,Y1,Z1,Term) :-
	expand_ns(X1,X),
	expand_ns(Y1,Y),
	expand_ns(Z1,Z),
	owl(X,Y,Z, not_used),
	debug(owl_parser_detail,'using ~w ~w ~w',[X,Y,Z]),
	retract(owl(X,Y,Z, not_used)),
	assert(owl(X,Y,Z,used(Term))).



use_owl(X1,Y1,Z1,named,Term) :-
	expand_ns(X1,X),
	expand_ns(Y1,Y),
	expand_ns(Z1,Z),
	owl(X,Y,Z, not_used),
	not(sub_string(X,0,2,_,'__')),
	retract(owl(X,Y,Z, not_used)),
	assert(owl(X,Y,Z,used(Term))).


expand_ns(NS_URL, Full_URL) :-
	nonvar(NS_URL),
	not(NS_URL = literal(_)),
	uri_split(NS_URL,Short_NS,Term, ':'),
	rdf_db:ns(Short_NS,Long_NS),!,
	concat_atom([Long_NS,Term],Full_URL).

expand_ns(URL, URL).




collapse_ns(FullURL, NSURL,Char,Options) :-
	nonvar(FullURL),
	not(FullURL = literal(_)),
	uri_split(FullURL,LongNS, Term, '#'),
	concat(LongNS,'#',LongNS1),
	rdf_db:ns(ShortNS,LongNS1),
	(   member(no_base(ShortNS),Options), ! , NSURL = Term
	;
	concat_atom([ShortNS,Char,Term],NSURL)
	),!.
collapse_ns(FullURL, NSURL,_Char,Options) :-
	nonvar(FullURL),
	not(FullURL = literal(_)),
	uri_split(FullURL,LongNS, Term, '#'),
	member(no_base(LongNS),Options),
        !,
        NSURL = Term.


collapse_ns(URL, URL,_,_).




uri_split(URI,Namespace,Term,Split_Char) :-
	sub_atom(URI,Start,_,After,Split_Char),
	sub_atom(URI,0,Start,_,Namespace),
	Start1 is Start + 1,
	sub_atom(URI,Start1,After,_,Term).




owl_collect_linked_nodes(Node,Predicate,InList,OutList) :-
	use_owl(Node,Predicate,A),!,
	owl_collect_linked_nodes(Node,Predicate,InList,List1),
	owl_collect_linked_nodes(A,Predicate,List1,OutList).

owl_collect_linked_nodes(Node,Predicate,InList,OutList) :-
	use_owl(A,Predicate,Node),!,
	owl_collect_linked_nodes(Node,Predicate,InList,List1),
	owl_collect_linked_nodes(A,Predicate,List1,OutList).

owl_collect_linked_nodes(Node,_,List, [Node|List]) :-
	not(memberchk(Node, List)),!.

owl_collect_linked_nodes(_,_,List, List) :- !.





owl_get_bnode(Node,Description) :-
	sub_string(Node,0,2,_,'__'),!,
	not( blanknode(Node,_,_)),
	assert(blanknode(Node,Description, used)).

owl_get_bnode(_,_).




:- module(owl2_graph_reasoner,
          [
           entity_parent_over/3,
           class_ancestor/2,
           class_descendant/2,
           class_ancestor_over/3,
           individual_ancestor/2,
           individual_ancestor_over/3,
           graph_reasoner_memoize/0
           ]).

:- use_module(owl2_model).
:- use_module(owl2_reasoner).




:- multifile owl2_reasoner:reasoner_ask_hook/2.
:- multifile owl2_reasoner:initialize_reasoner_hook/3.

:- multifile exclude_chain_hook/2.

owl2_reasoner:initialize_reasoner_hook(graph_reasoner,graph_reasoner,_).

owl2_reasoner:reasoner_ask_hook(graph_reasoner,subClassOf(A,B)) :-
        nonvar(B),
        var(A),
	class_descendant(B,A).
owl2_reasoner:reasoner_ask_hook(graph_reasoner,subClassOf(A,B)) :-
        \+((nonvar(B),
            var(A))),
	class_ancestor(A,B).
owl2_reasoner:reasoner_ask_hook(graph_reasoner,classAssertion(C,I)) :-
        nonvar(C),
        var(I),
	class_descendant_over(C,I,[inst]).
owl2_reasoner:reasoner_ask_hook(graph_reasoner,classAssertion(C,I)) :-
        \+ ((nonvar(C),
             var(I))),
        individual_ancestor(I,C).
owl2_reasoner:reasoner_ask_hook(graph_reasoner,propertyAssertion(P,I,J)) :-
        nonvar(J),
        var(I),
        individual_ancestor_over(I,J,[irel-P]). owl2_reasoner:reasoner_ask_hook(graph_reasoner,propertyAssertion(P,I,J)) :-
        \+ ((nonvar(J),
             var(I))),
        individual_ancestor_over(I,J,[irel-P]). owl2_reasoner:reasoner_ask_hook(graph_reasoner,individual_cs(I,J,CS)) :-
	individual_pair_common_subsumer(I,J,CS).

graph_reasoner_memoize :-
        ensure_loaded(library(thea2/util/memoization)),
        table_pred(class_descendant/2),
        table_pred(class_descendant_over/3),
        table_pred(class_ancestor/2),
        table_pred(class_ancestor_over/3),
        table_pred(individual_ancestor/2),
        table_pred(individual_ancestor_over/3),
        !.


subPropertyOfT(A,B) :- subPropertyOf(A,B).
subPropertyOfT(A,B) :- subPropertyOf(A,Z),subPropertyOfT(Z,B).

subPropertyOfRT(A,A) :- objectProperty(A).
subPropertyOfRT(A,B) :- subPropertyOfT(A,B).

property_composition(A,B,P) :-
        transitiveProperty(P),
        subPropertyOfRT(A,P),
        subPropertyOfRT(B,P).
property_composition(A,B,P) :-
        subPropertyOf(propertyChain([A1,B1]),P),         subPropertyOfRT(A,A1),
        subPropertyOfRT(B,B1).
calc_property_compositions :-
        findall(property_composition(A,B,C),
                assert(cached_property_composition(A,B,C))).



entity_parent_over(Class,Parent,sub) :-
        subClassOf(Class,Parent).
entity_parent_over(Class,Parent,sub) :-
        equivalent_to(Class,Parent).
entity_parent_over(someValuesFrom(Prop,Parent),Parent,some-Prop).
entity_parent_over(allValuesFrom(Prop,Parent),Parent,all-Prop).
entity_parent_over(hasValue(Prop,Parent),Parent,value-Prop).
entity_parent_over(minCardinality(N,Prop,Parent),Parent,min(N)-Prop) :- N>0.
entity_parent_over(exactCardinality(N,Prop,Parent),Parent,exact(N)-Prop) :- N>0.
entity_parent_over(intersectionOf(CL),Parent,sub) :-
        ground(CL),
        member(Parent,CL).
entity_parent_over(I,C,inst) :-
        classAssertion(C,I).
entity_parent_over(Child,Parent,irel-Prop) :-
        propertyAssertion(Prop,Child,Parent),
        \+ annotationProperty(Prop),
        Parent \= literal(_).
entity_parent_over(Child,Parent,irel-Prop) :-
        propertyAssertion(InverseProp,Parent,Child),
        inverse_of_symm(InverseProp,Prop),
        \+ annotationProperty(Prop),
        Parent \= literal(_).

inverse_of_symm(Prop,InverseProp) :- inverseProperties(Prop,InverseProp).
inverse_of_symm(InverseProp,Prop) :- inverseProperties(Prop,InverseProp).



combine_prop_pair(P,Q,_) :-
        exclude_chain_hook(P,Q),         !,
        fail.
combine_prop_pair(inst,sub,inst).
combine_prop_pair(sub,sub,sub).
combine_prop_pair(sub,Q-P,Q-P).
combine_prop_pair(Q-P,sub,Q-P).
combine_prop_pair(some-Prop,some-Prop,some-Prop) :-
        transitiveProperty(Prop).
combine_prop_pair(all-Prop,all-Prop,all-Prop) :-
        transitiveProperty(Prop).
combine_prop_pair(some-Prop1,some-Prop2,some-Prop3) :-
        subPropertyOf(propertyChain([Prop1,Prop2]),Prop3).
combine_prop_pair(all-Prop1,all-Prop2,all-Prop3) :-
        subPropertyOf(propertyChain([Prop1,Prop2]),Prop3).
combine_prop_pair(irel-Prop1,irel-Prop2,irel-Prop3) :-
        property_composition(Prop1,Prop2,Prop3).
combine_prop_pair(irel-Prop,inst,some-Prop).




entity_parent_chain(Class,Parent,InConns,NewConns) :-
        entity_parent_over(Class,Parent,ConnNext),
        combine_props(InConns,ConnNext,NewConns).

entity_child_chain(Class,Child,InConns,NewConns) :-
                entity_parent_over(Child,Class,ConnNext),
        ground(Child),                                  combine_props_rev(InConns,ConnNext,NewConns).

combine_props([ConnPrev|InConns],ConnNext,NewConns) :-
        combine_prop_pair(ConnPrev,ConnNext,NewConn),
        !,
        combine_props(InConns,NewConn,NewConns).
combine_props([ConnPrev|_],ConnNext,_) :-         exclude_chain_hook(ConnPrev,ConnNext),
        !,
        fail.
combine_props(InConns,ConnNext,[ConnNext|InConns]).

combine_props_rev([ConnPrev|InConns],ConnNext,NewConns) :-
        combine_prop_pair(ConnNext,ConnPrev,NewConn),
        !,
        combine_props_rev(InConns,NewConn,NewConns).
combine_props_rev(InConns,ConnNext,[ConnNext|InConns]).



not_excluded(Parent) :- atom(Parent).
not_excluded(intersectionOf(_)).
not_excluded(unionOf(_)).

class_ancestor(Class,ParentExpr) :-
        class_ancestor_over(Class,Parent,Conns),
                        not_excluded(Parent),
                translate_conns_to_class_expression(Conns,Parent,ParentExpr).

class_ancestor_over(ID,PID,Over) :-
	class_or_expr(ID),
	debug(graph_reasoner,'class_ancestor_over(~w)',[ID]),
	entities_ancestors([ID-[]],[],[],L),
	member(PID-Over,L).
class_ancestor_over(ID,ID,[]) :-
        ground(ID).             class_ancestor_over(ID,ID,[]) :-
        \+ ground(ID),                     class(ID).

translate_conns_to_class_expression([Conn|Conns],Parent,ParentExpr) :-
        translate_conn_to_class_expression(Conn,Parent,ParentExpr_1),
        translate_conns_to_class_expression(Conns,ParentExpr_1,ParentExpr).
translate_conns_to_class_expression([],P,P) :- !.

translate_conn_to_class_expression(inst,Parent,Parent) :- !.
translate_conn_to_class_expression(sub,Parent,Parent) :- !.
translate_conn_to_class_expression(some-Prop,Parent,someValuesFrom(Prop,Parent)) :- !.
translate_conn_to_class_expression(irel-Prop,Parent,someValuesFrom(Prop,Parent)) :- !. translate_conn_to_class_expression(all-Prop,Parent,allValuesFrom(Prop,Parent)) :- !.
translate_conn_to_class_expression(value-Prop,Parent,hasValue(Prop,Parent)) :- !.

entities_ancestors([Class-Conns|ScheduledCCPairs],Visisted,ResultCCPairs,FinalCCPairs) :-
	setof(Parent-NewConns,
              (   entity_parent_chain(Class,Parent,Conns,NewConns),
                  \+ord_memberchk(Parent,Visisted)),
              NextCCPairs),
	!,
	ord_union(ResultCCPairs,NextCCPairs,ResultCCPairsNew),
        ord_union(ScheduledCCPairs,NextCCPairs,NewScheduledCCPairs),
	entities_ancestors(NewScheduledCCPairs,[Class|Visisted],ResultCCPairsNew,FinalCCPairs).
entities_ancestors([Class-Conns|ScheduledCCPairs],Visisted,ResultCCPairs,FinalCCPairs) :-
	!,
        	entities_ancestors(ScheduledCCPairs,[Class-Conns|Visisted],ResultCCPairs,FinalCCPairs).
entities_ancestors([],_,ResultCCPairs,ResultCCPairs). 
class_descendant(Class,ChildExpr) :-
        class_descendant_over(Class,ChildExpr,[sub]).

class_descendant_over(ID,CID,Over) :-
        class_or_expr(ID),
	debug(graph_reasoner,'class_descendant_over(~w)',[ID]),
	entities_descendants([ID-[]],[],[],L),
	member(CID-Over,L).
class_descendant_over(ID,ID,[]). 

entities_descendants([Class-Conns|ScheduledCCPairs],Visisted,ResultCCPairs,FinalCCPairs) :-
	setof(Child-NewConns,
              (   entity_child_chain(Class,Child,Conns,NewConns),
                  \+ord_memberchk(Child,Visisted)),
              NextCCPairs),
	!,
	ord_union(ResultCCPairs,NextCCPairs,ResultCCPairsNew),
        ord_union(ScheduledCCPairs,NextCCPairs,NewScheduledCCPairs),
	entities_descendants(NewScheduledCCPairs,[Class|Visisted],ResultCCPairsNew,FinalCCPairs).
entities_descendants([Class-Conns|ScheduledCCPairs],Visisted,ResultCCPairs,FinalCCPairs) :-
	!,
        	entities_descendants(ScheduledCCPairs,[Class-Conns|Visisted],ResultCCPairs,FinalCCPairs).
entities_descendants([],_,ResultCCPairs,ResultCCPairs).

class_or_expr(ID) :-
        \+ ground(ID),
        !,
        setof(ID,referenced_description(ID),IDs),
        member(ID,IDs).
class_or_expr(ID) :- ground(ID).


is_individual(ID) :-  namedIndividual(ID).
is_individual(ID) :-  classAssertion(_,ID).


individual_ancestor_over(ID,PID,Over) :-
        setof(ID,is_individual(ID),IDs),
        member(ID,IDs),
	debug(graph_reasoner,'individual_ancestor_over(~w)',[ID]),
	entities_ancestors([ID-[]],[],[],L),
	member(PID-Over,L).


individual_ancestor(Individual,ParentExpr) :-
        classAssertion(Class,Individual),
        class_ancestor(Class,ParentExpr).


individual_pair_common_subsumer(I,J,CS) :-
        individual_ancestor(I,CS),
        individual_ancestor(J,CS).
:- module(owl2_instance_util,
          [
           graph_to_class_expressions/2,
           graph_to_class_expressions/3,
           invert_graph/2,
           instance_graph/3,
           instance_graph_export/4
           ]).

:- use_module(owl2_model).
:- use_module(library(option)).


instance_graph(XL,G,Opts) :-
        is_list(XL),
        !,
        findall(1-X,member(X,XL),Nodes),
        instance_graph_extend(Nodes,[],[],G,Opts).
instance_graph(X,G,Opts) :-
        \+ is_list(X),
        !,
        Nodes=[1-X],
        instance_graph_extend(Nodes,[],[],G,Opts).

instance_graph_extend([],_,E,E,_Opts) :- !.
instance_graph_extend([D-_|Nodes],VisitedL,EdgesIn,EdgesOut,Opts) :-
        option(max_depth(MaxD),Opts,3),
        D>MaxD,
        !,
        instance_graph_extend(Nodes,VisitedL,EdgesIn,EdgesOut,Opts).

instance_graph_extend([Node|Nodes],VisitedL,EdgesIn,EdgesOut,Opts) :-
        Node = D-X,
        Dplus1 is D+1,
        solutions(Edge,extend_node(X,Edge,Opts),NextEdges),
        solutions(Dplus1-Y,
                  (   member(edge(_,X,Y),NextEdges),
                      \+ member(Y,VisitedL)),
                  NextNodes),
        append(NextNodes,Nodes,Nodes2),
        append(NextEdges,EdgesIn,NewEdges),
        instance_graph_extend(Nodes2,[X|VisitedL],NewEdges,EdgesOut,Opts).

extend_node(X,edge(P,X,Y),Opts) :-
        propertyAssertion(P,X,Y),
        option(property_list(Props),Opts,_),
        memberchk(P,Props).

extend_node(X,edge(PI,X,Y),Opts) :-
        propertyAssertion(P,Y,X),
        option(property_list(Props),Opts,_),
        memberchk(P,Props),
        (   inverseProperties(P,PI)
        ->  true
        ;   PI=inverseOf(P)).

invert_graph([],[]).
invert_graph([edge(P,X,Y)|Edges],[edge(PI,Y,X)|Edges2]) :-
        inverseProperties(P,PI),
        !,
        invert_graph(Edges,Edges2).
invert_graph([_|Edges],Edges2) :-
        invert_graph(Edges,Edges2).


edge_to_class_expression(edge(inverseOf(P),X,Y),CE) :-
        inverseProperties(P,PI),
        edge_to_class_expression(edge(PI,Y,X),CE).

edge_to_class_expression(edge(P,X,Y),intersectionOf([XC,someValuesFrom(P,YC)])) :-
        atom(P),
        classAssertion(XC,X),
        classAssertion(YC,Y).

edge_chain_to_class_expression([Edge],CE) :-
        !,
        edge_to_class_expression(Edge,CE).
edge_chain_to_class_expression([Edge|Edges],intersectionOf([XC,someValuesFrom(P,CE)])) :-
        Edge=edge(P,X,_),
        classAssertion(XC,X),
        edge_chain_to_class_expression(Edges,CE).
        
graph_to_class_expressions(Edges,CEs) :-
        solutions(CE,
                  (   member(Edge,Edges),
                      edge_to_class_expression(Edge,CE)),
                  CEs).

graph_to_class_expressions(Edges,CEs,MaxLen) :-
        solutions(CE,
                  (   between(1,MaxLen,Len),
                      edge_chain(Edges,Chain,Len),
                      edge_chain_to_class_expression(Chain,CE),
                      debug(xp,'chain: ~w ~w ~w',[Len,Chain,CE])),
                  CEs).

edge_chain(Edges,EdgeChain,MaxLen) :-
        select(Edge,Edges,EdgesRest),
        edge_chain([Edge],EdgesRest,EdgeChain,MaxLen).

edge_chain(EdgeChain,_,EdgeChain,MaxLen) :-
        length(EdgeChain,Len),
        Len >= MaxLen,
        !.
        
edge_chain(EdgeChain,Edges,ECOut,MaxLen) :-
        EdgeChain = [edge(P,X,Y)|EdgeChainRest],
        select(edge(P2,W,X),Edges,EdgesRest),
        \+ member(edge(_,_,W),EdgeChainRest),
        edge_chain([edge(P2,W,X),edge(P,X,Y)|EdgeChainRest],EdgesRest,ECOut,MaxLen).

solutions(X,Goal,Xs):-
        (   setof(X,Goal^Goal,Xs)
        ->  true
        ;   Xs=[]).

inst_dotpropval(X,label=Label) :- labelAnnotation_value(X,Label),atom(Label).
inst_dotpropval(_,font='Verdana').

prop_dotpropval(X,label=Label) :- property_dotlabel(X,Label).
prop_dotpropval(_,font='Verdana').
prop_dotpropval(_,weight=1).

property_dotlabel(inverseOf(P),Label) :-
        (   inverseProperties(P,PI);inverseProperties(PI,P)),
        !,
        property_dotlabel(PI,Label).
property_dotlabel(P,Label) :- labelAnnotation_value(P,Label),atom(Label),!.
property_dotlabel(P,P) :- atom(P),!.
property_dotlabel(P,PA) :- sformat(PA,'~w',[P]).

instance_graph_export(X,Fmt,File,Opts) :-
        instance_graph(X,G,Opts),
        graph_to_img_file(G,Fmt,File).


graph_to_img_file(G,Fmt,File) :-
        ensure_loaded(bio(dotwriter)),         solutions(X,(   member(edge(_,X,_),G)
                    ;   member(edge(_,_,X),G)),
                  Xs),
        findall(node(X,PVs),
                (   member(X,Xs),
                    findall(PV,inst_dotpropval(X,PV),PVs)),
                DNodes),
        findall(edge(X,Y,PVs),
                (   member(edge(Type,Y,X),G),
                    Type=inverseOf(_),
                    findall(PV,prop_dotpropval(Type,PV),PVs)),
                DEdges1),
        findall(edge(X,Y,PVs),
                (   member(edge(Type,X,Y),G),
                    Type\=inverseOf(_),
                    findall(PV,prop_dotpropval(Type,PV),PVs)),
                DEdges2),
        flatten([DNodes,DEdges1,DEdges2],Subterms),
        DotG=graph(my_graph,Subterms),
        dotwriter:graph_to_dot_file(DotG,Fmt,File).

        



:- module(owl2_io,
          [load_axioms/1,
           load_axioms/2,
           load_axioms/3,
           save_axioms/2,
           save_axioms/3,
           convert_axioms/5
          ]).

:- use_module(library(debug)).
:- use_module(owl2_model,[consult_axioms/1, axiom/1]).

:- multifile load_axioms_hook/3.
:- multifile save_axioms_hook/3.

load_axioms(File) :-
        load_axioms(File,_).

load_axioms(File,Fmt) :-
        load_axioms(File,Fmt,[]).

load_axioms(File,Fmt,Opts) :-
        var(Fmt),
        guess_format(File,Fmt,Opts),
        !,
        load_axioms(File,Fmt,Opts).
load_axioms(File,Fmt,Opts) :-
        nonvar(Fmt),
        (   Fmt=prolog
        ;   Fmt=owlpl
        ;   Fmt=pl),
        !,
	load_prolog_axioms(File,Opts).
load_axioms(File,Fmt,Opts) :-
        load_handler(read,Fmt),
        load_axioms_hook(File,Fmt,Opts),
        debug(load,'no hook for: ~w',[Fmt]),
        !.
load_axioms(File,Fmt,Opts) :-
        throw(owl2_io('cannot parse fmt for',File,Fmt,Opts)).

load_prolog_axioms(File) :-
        load_prolog_axioms(File,[]).
load_prolog_axioms(File,Opts) :-
	\+ predicate_property(qcompile(_),_), 	!,
        style_check(-discontiguous),
	consult_axioms(File),
        post_process_prolog_axioms(Opts).
load_prolog_axioms(File,Opts) :-
        style_check(-discontiguous),
	style_check(-atom),	
	file_name_extension(Base, _Ext, File),
	file_name_extension(Base, qlf, QlfFile),
        debug(load,'checking for: ~w',[QlfFile]),
	(   exists_file(QlfFile),
	    time_file(QlfFile, QlfTime),
	    time_file(File, PlTime),
	    QlfTime >= PlTime
	->  consult_axioms(QlfFile)
	;   access_file(QlfFile, write)
	->  qcompile(File),
            consult_axioms(QlfFile)
        ;   debug(load,'  cannot write to qlf (permission problem?), loading from: ~w',[File]),
            consult_axioms(File)
	),
        post_process_prolog_axioms(Opts).

post_process_prolog_axioms(Opts) :-
        \+ member(noOntologyAxiom(true),Opts),
        ontology(Ont),
        \+ ontologyAxiom(_,_),
        !,
        forall(axiom(A),
               assert_axiom(A,Ont)).
post_process_prolog_axioms(_).


save_axioms(File,Fmt) :-
        save_axioms(File,Fmt,[]).

save_axioms(File,Fmt,Opts) :-
        nonvar(Fmt),
        (   Fmt=prolog
        ;   Fmt=owlpl
        ;   Fmt=pl),
        !,
        (   nonvar(File)
        ->  tell(File)
        ;   true),
        option(ontology(Ont),Opts,_),
        forall(ontologyAxiom(Ont,A),
               (   A=implies(_,_)
               ->  format('swrl:~q.~n',[A])                ;   format('~q.~n',[A]))),
                (   var(Ont)
        ->  forall((axiom(A),\+ontologyAxiom(_,A)),
                   format('~q.~n',[A]))
        ;   true),
        	(   member(exclude(ontologyAxiom),Opts)
	->  true
	;   forall(owl2_model:ontologyAxiom(Ont,A),
		   format('~q.~n',[ontologyAxiom(Ont,A)]))),
        told.
save_axioms(File,Fmt,Opts) :-
        load_handler(write,Fmt),
        save_axioms_hook(File,Fmt,Opts),
        !.
save_axioms(File,Fmt,Opts) :-
        throw(owl2_io('cannot save fmt for',File,Fmt,Opts)).

convert_axioms(FileIn,FmtIn,FileOut,FmtOut,Opts) :-
        load_axioms(FileIn,FmtIn,Opts),
        save_axioms(FileOut,FmtOut,Opts).

load_handler(Dir,Fmt) :-
        forall(format_module(Dir,Fmt,Mod),
	       ensure_loaded(library(thea2/Mod))).

guess_format(File,Fmt,_Opts) :-
        atomic_list_concat(Toks,'.',File),
        reverse(Toks,[Suffix,_|_]),
        suffix_format(Suffix,Fmt).

:- multifile suffix_format/2.
suffix_format(pro,prolog).
suffix_format(prolog,prolog).
suffix_format(pl,prolog).
suffix_format(owlpl,prolog).
suffix_format(plsyn,plsyn).
suffix_format(owl,owl).
suffix_format(owl2,owl).
suffix_format(ttl,ttl).
suffix_format(owlx,owlx).
suffix_format(owlxml,owlx).
suffix_format(owlms,owlms).
suffix_format(owlapi(F),owlapi(F)).
suffix_format(owlapi,owlapi).
suffix_format(obo,obo).

:- multifile format_module/3.
format_module(read,rdf,owl2_from_rdf).
format_module(read,owl,owl2_from_rdf).
format_module(read,owl2,owl2_from_rdf).
format_module(read,ttl,owl2_from_rdf).
format_module(read,xml,owl2_xml).
format_module(read,owlx,owl2_xml).
format_module(read,owlms,owl2_manchester_parser).
format_module(read,pl_swrl,swrl).
format_module(read,pl_swrl_owl,swrl).
format_module(read,plsyn,owl2_plsyn).
format_module(read,owlapi,owl2_java_owlapi).
format_module(read,owlapi(_),owl2_java_owlapi).
format_module(read,obo,owl2_obo_parser).

format_module(write,owl,owl2_export_rdf).
format_module(write,owlx,owl2_xml).
format_module(write,ttl,owl2_export_rdf).
format_module(write,plsyn,owl2_plsyn).
format_module(write,dl_syntax,owl2_dl_syntax).
format_module(write,dlp,owl2_to_prolog_dlp).
format_module(write,owlapi(_),owl2_java_owlapi).



s

:- module(owl2_java_owlapi,
          [
           version_info/1,
           create_manager/1,
           create_factory/2,
           create_ontology/3,
           build_ontology/1,
           build_ontology/3,
           save_ontology/3,
           create_reasoner/3,
           reasoner_classify/1,
           reasoner_classify/2,
           reasoner_classify/3,
           reasoner_classify_using/3,
           is_consistent/1,
           inconsistent_class/2,
           unsatisfiable_class/2,
           inferred_axiom/3,
           reasoner_nr_subClassOf/4,
           reasoner_subClassOf/4,
           reasoner_subClassOf/5,
           reasoner_equivalent_to/4,
           reasoner_individualOf/4,
           reasoner_nr_individualOf/4,
           reasoner_objectPropertyAssertion/5,
           add_axiom/5,
           show_java_memory_info/0
           ]).

:- use_module(library(jpl)).
:- use_module(owl2_model).
:- use_module(owl2_metamodel).

:- multifile owlterm_java/4.

prefix('org.semanticweb.owlapi.model').

nothing('http://www.w3.org/2002/07/owl#Nothing').


version_info(Info) :-
        jpl_call('org.semanticweb.owlapi.util.VersionInfo',getVersionInfo,[],VI),
        jpl_call(VI,getVersion,[],Info).

atom_javaIRI('owl:Thing',U):-
        !,
        atom_javaIRI('http://www.w3.org/2002/07/owl#Thing',U).
atom_javaIRI('owl:Nothing',U):-
        !,
        atom_javaIRI('http://www.w3.org/2002/07/owl#Nothing',U).
atom_javaIRI(X,U):-
        sub_atom(X,_,_,_,':'),
        !,
        jpl_call('org.semanticweb.owlapi.model.IRI',create,[X],U).
atom_javaIRI(X,U):-
        ontology(Ont),
        !,
        concat_atom([Ont,X],'#',X2),
        jpl_call('org.semanticweb.owlapi.model.IRI',create,[X2],U).
atom_javaIRI(X,U):-
        concat_atom(['http://foo.org',X],'#',X2),
        jpl_call('org.semanticweb.owlapi.model.IRI',create,[X2],U).

create_manager(Manager) :-
        jpl_call('org.semanticweb.owlapi.apibinding.OWLManager',createOWLOntologyManager,[],Manager).

require_manager(Manager) :-
        var(Manager),
        !,
        create_manager(Manager).
require_manager(_).

create_ontology(Manager,Name,Ont) :-
        require_manager(Manager),
        atom_javaIRI(Name,IRI),
        jpl_call(Manager,createOntology,[IRI],Ont).

build_ontology(Ont) :-
        create_factory(Man,Fac),
        build_ontology(Man,Fac,Ont).
        
build_ontology(Man,Fac,Ont) :-
        require_manager(Man),
        (   ontology(OntName)
        ->  true
        ;   OntName='http://example.org'),
        create_ontology(Man,OntName,Ont),
        forall(axiom(Ax),
               (   debug(owl2,'[[Adding axiom: ~w',[Ax]),
                   add_axiom(Man,Fac,Ont,Ax,_),
                   debug(owl2,'  /Added axiom: ~w]]',[Ax]))),
        debug(owl2,'Built ontology',[]).

build_single_ontology(Man,Fac,OntIRI,Ont) :-
        require_manager(Man),
        create_ontology(Man,OntIRI,Ont),
        forall(ontologyAxiom(OntIRI,Ax),
               (   debug(owl2,'[[Adding axiom: ~w',[Ax]),
                   add_axiom(Man,Fac,Ont,Ax,_),
                   debug(owl2,'  /Added axiom: ~w]]',[Ax]))),
        debug(owl2,'Built ontology',[]).


:- multifile owl2_io:load_axioms_hook/3.
owl2_io:load_axioms_hook(File,owlapi,Opts) :-
	owl2_io:load_axioms_hook(File,owlapi(_),Opts).
owl2_io:load_axioms_hook(File,owlapi(_Fmt),_Opts) :-
        create_factory(Man,_Fac),
        load_ontology(Man,_Ont,File).

:- multifile owl2_io:save_axioms_hook/3.
owl2_io:save_axioms_hook(File,owlapi,Opts) :-
        !,
	owl2_io:save_axioms_hook(File,owlapi(''),Opts).
owl2_io:save_axioms_hook(File,owlapi(Fmt),Opts) :-
        member(ontology(OntIRI),Opts),
        !,
        create_factory(Man,Fac),
        build_single_ontology(Man,Fac,OntIRI,Ont),
        save_ontology(Man,Ont,Fmt,File).
owl2_io:save_axioms_hook(File,owlapi(Fmt),_Opts) :-
        create_factory(Man,Fac),
        build_ontology(Man,Fac,Ont),
        save_ontology(Man,Ont,Fmt,File).

load_ontology(Man,Ont,File) :-
        atom_javaIRI(File,IRI),
        jpl_call(Man,loadOntologyFromPhysicalIRI,[IRI],Ont).


save_ontology(Man,Ont,File) :-
        save_ontology(Man,Ont,'',File).
save_ontology(Man,Ont,Fmt,File) :-
        (   var(File)
        ->  tmp_file(owl,File),
            Tmp=true
        ;   Tmp=fail),
        atom_concat('file://',File,FileIRI),
        atom_javaIRI(FileIRI,IRI),
        fmt_cls(Fmt,FmtCls),
        jpl_new(FmtCls,[],FmtObj),
        jpl_call(Man,saveOntology,[Ont,FmtObj,IRI],_),
        (   Tmp
        ->  sformat(Cmd,'cat ~w',[File]),
            shell(Cmd)
        ;   true).

fmt_cls(owlxml,'org.semanticweb.owlapi.io.OWLXMLOntologyFormat') :- !.
fmt_cls(manchester,'org.coode.owlapi.manchesterowlsyntax.ManchesterOWLSyntaxOntologyFormat') :- !.
fmt_cls(_,'org.semanticweb.owlapi.io.RDFXMLOntologyFormat') :- !.




create_factory(Manager,Fac) :-
        require_manager(Manager),
        jpl_call(Manager,getOWLDataFactory,[],Fac).

create_reasoner(Ont,RN,Reasoner) :-
        reasoner_factory(RN,RFacClass),
        jpl_new(RFacClass,[],RFac),
        debug(owl2,'got reasoner factory: ~w',[RFac]),
        jpl_call(RFac,createReasoner,[Ont],Reasoner).

reasoner_factory(pellet,'com.clarkparsia.pellet.owlapiv3.PelletReasonerFactory').
reasoner_factory(hermit,'org.semanticweb.HermiT.Reasoner$ReasonerFactory').
reasoner_factory(factpp,'uk.ac.manchester.cs.factplusplus.owlapiv3.FaCTPlusPlusReasonerFactory').

reasoner_classify(Reasoner) :-
        throw(deprecated('no need to call classify with owlapi v3')),
        debug(owl2,'classifying...',[]),
        jpl_call(Reasoner,classify,[],_).

reasoner_classify(Reasoner,Ont) :-
        throw(deprecated('no need to call classify with owlapi v3')),
        reasoner_classify(Reasoner,_Man,Ont).

reasoner_classify(Reasoner,Man,_Ont) :-
        throw(deprecated('no need to call classify with owlapi v3')),
        require_manager(Man),
                        reasoner_classify(Reasoner).

reasoner_classify_using(Reasoner,Ont,RN) :-
        throw(deprecated('no need to call classify with owlapi v3')),
        require_manager(Man),
        create_reasoner(Ont,RN,Reasoner),
        reasoner_classify(Reasoner,Man,Ont).


is_consistent(Reasoner) :-
        jpl_call(Reasoner,isConsistent,[],'@'(true)).

inconsistent_class(Reasoner,Class) :-
        jpl_call(Reasoner,getInconsistentClasses,[],JOWLClasses),
        member(JOWLClass,JOWLClasses),
        java_namedentity(JOWLClass,Class).

unsatisfiable_class(Reasoner,Class) :-
        jpl_call(Reasoner,getUnsatisfiableClasses,[],Node),
        jpl_call(Node,getEntities,[],ESet),
        jpl_call(ESet,toArray,[],EArr),
        jpl_array_to_list(EArr,PList),
        member(JOWLClass,PList),
        java_namedentity(JOWLClass,Class).

java_namedentity(J,C) :-
        jpl_call(J,getIRI,[],IRI),
        jpl_call(IRI,toString,[],C).

nodeset_entity(NodeSet,E) :-
        jpl_call(NodeSet,'getNodes',[],NodeSetG),
        jpl_call(NodeSetG,'toArray',[],NodeArr),
        jpl_array_to_list(NodeArr,Nodes),
        member(Node,Nodes),
        jpl_call(Node,getEntities,[],ESet),
        jpl_call(ESet,toArray,[],EArr),
        jpl_array_to_list(EArr,Es),
        (   Es=[JE],
            java_namedentity(JE,E)
        ->  true
        ;   Es=[]
        ->  fail
        ;   maplist(java_namedentity,Es,PEs),
            E=equivalentClasses(PEs)).

ecsets_class(JPSetSet,P) :-
        jpl_call(JPSetSet,toArray,[],JPSetArr),
        jpl_array_to_list(JPSetArr,JPSets),
        member(JPSet,JPSets),
        jpl_call(JPSet,toArray,[],JPArr),
        jpl_array_to_list(JPArr,JPs),
        (   JPs=[JP],
            java_namedentity(JP,P)
        ->  true
        ;   JPs=[]
        ->  fail
        ;   maplist(java_namedentity,JPs,Ps),
            P=equivalentClasses(Ps)).

pimap_property_individual(PIMap,P,I) :-
        jpl_call(PIMap,keySet,[],JPSet),
        jpl_call(JPSet,toArray,[],JPArr),
        jpl_array_to_list(JPArr,JPs),
        member(JP,JPs),
        jpl_call(PIMap,get,[JP],JISet),
        jpl_call(JISet,toArray,[],JIArr),
        jpl_array_to_list(JIArr,JIs),
        member(JI,JIs),
        java_namedentity(JP,P),
        java_namedentity(JI,I).

pl2javaref(Fac,C,JC) :-
        (   atom(C)
        ->  owlterm_java(Fac,_,C,JC)
        ;   translate_arg_to_java(Fac,C,_,JC)).


inferred_axiom(R,Fac,subClassOf(A,B)) :-
        reasoner_subClassOf(R,Fac,A,B).
inferred_axiom(R,Fac,classAssertion(C,I)) :-
        reasoner_individualOf(R,Fac,I,C).
inferred_axiom(R,Fac,classAssertion(C,I)) :-
        reasoner_nr_individualOf(R,Fac,I,C).
inferred_axiom(R,Fac,propertyAssertion(P,I,I2)) :-
        reasoner_objectPropertyAssertion(R,Fac,I,P,I2).

        

reasoner_nr_subClassOf(R,Fac,C,P) :-
        throw(not_implemented),
        var(C),
        var(P),
        !,
        class(C),
        reasoner_nr_subClassOf(R,Fac,C,P).

reasoner_nr_subClassOf(R,Fac,C,P) :-
        throw(not_implemented),
        nonvar(C),
        !,
        pl2javaref(Fac,C,JC),
        jpl_call(R,getSuperClasses,[JC],JPSetSet),
        ecsets_class(JPSetSet,P).

reasoner_nr_subClassOf(R,Fac,C,P) :-
        throw(not_implemented),
        nonvar(P),
        !,
        pl2javaref(Fac,P,JP),
        jpl_call(R,getSubClasses,[JP,@(true)],JCSetSet),
        nodeset_entity(JCSetSet,C).

reasoner_subClassOf(R,Fac,C,P) :-
        reasoner_subClassOf(R,Fac,C,P,false).


reasoner_subClassOf(R,Fac,C,P,IsDirect) :-
        var(C),
        var(P),
        !,
        class(C),
        reasoner_subClassOf(R,Fac,C,P,IsDirect).

reasoner_subClassOf(R,Fac,C,P,IsDirect) :-
        nonvar(C),
        !,
        pl2javaref(Fac,C,JC),
        jpl_call(R,getSuperClasses,[JC,@(IsDirect)],JPSetSet),
        nodeset_entity(JPSetSet,P).

reasoner_subClassOf(R,Fac,C,P,IsDirect) :-
        nonvar(P),
        !,
        debug(reasoner,'getSubClasses( ~w )',[P]),
        pl2javaref(Fac,P,JP),
        jpl_call(R,getSubClasses,[JP,@(IsDirect)],JCSetSet),
        debug(reasoner,'getSubClasses( ~w ) = ~w',[P,JCSetSet]),
        nodeset_entity(JCSetSet,C).


reasoner_nr_individualOf(R,Fac,I,C) :-
        reasoner_individualOf(R,Fac,I,C,true).

reasoner_individualOf(R,Fac,I,C) :-
        reasoner_individualOf(R,Fac,I,C,false).

reasoner_individualOf(R,Fac,I,C,IsDirect) :-
        var(C),
        var(I),
        !,
        is_class(C),
        reasoner_individualOf(R,Fac,I,C,IsDirect).


reasoner_individualOf(R,Fac,I,C,IsDirect) :-
        nonvar(C),
        !,
        pl2javaref(Fac,C,JC),
        (   IsDirect
        ->  Bool='@'(true)
        ;   Bool='@'(false)),
        jpl_call(R,getInstances,[JC,Bool],ISet),
        nodeset_entity(ISet,I).

reasoner_individualOf(R,Fac,I,C,IsDirect) :-
        nonvar(I),
        !,
        pl2javaref(Fac,I,JI),
        (   IsDirect
        ->  Bool='@'(true)
        ;   Bool='@'(false)),
        jpl_call(R,getTypes,[JI,Bool],JCSetSet),
        ecsets_class(JCSetSet,C).

reasoner_objectPropertyAssertion(R,Fac,P,I,I2) :-
        (   var(I)
        ->  classAssertion(_,I),             \+ objectProperty(I),             \+ is_class(I)
        ;   true),
        (   var(P)
        ->  objectProperty(P)
        ;   true),
        debug(reasoner,'I=~w',[I]),
        pl2javaref(Fac,I,JI),
        pl2javaref(Fac,P,JP),
        jpl_call(R,getObjectPropertyValues,[JI,JP],NodeSet),
        nodeset_entity(NodeSet,I2).



jset_member(JPSet,JP) :-
        jpl_call(JPSet,toArray,[],JPArr),
        jpl_array_to_list(JPArr,JPs),
        member(JP,JPs).

reasoner_equivalent_to(R,Fac,C,P) :-
        (   var(C)
        ->  is_class(C)
        ;   true),
        owlterm_java(Fac,_,class(C),JC),
        jpl_call(R,getEquivalentClasses,[JC],JPSet),
        jset_member(JPSet,JP),
        java_namedentity(JP,P).

add_axiom(Manager,Factory,Ont,Axiom,JAx) :-
        debug(owl2,' converting axiom: ~w ',[Axiom]),
        owlterm_java(Factory,_,Axiom,JAx),
        debug(owl2,' axiom ~w = ~w',[Axiom,JAx]),
        (   owl2_model:declarationAxiom(Axiom)
        ->  true
        ;   JAx=ignore
        ->  true
        ;   jpl_new('org.semanticweb.owlapi.model.AddAxiom',[Ont,JAx],AddAxiom),
            jpl_call(Manager,applyChange,[AddAxiom],_)).



owlterm_java(_,_,ontology(_),_) :- !.

owlterm_java(_,_,propertyAssertion(_,Sub,_),ignore) :-
        ontology(Sub),
        !.
owlterm_java(_,_,propertyAssertion(P,S,V),ignore) :-
        \+ property(P),
        print_message(warning,no_translation(propertyAssertion(P,S,V),'property is of unknown type')),
        !.
owlterm_java(_,_,annotationAssertion(_,Sub,_),ignore) :-
        ontology(Sub),
        !.

owlterm_java(_,_,annotationAssertion(_,_,_),ignore) :-
        !.

owlterm_java(Fac,_,annotationAssertion(AP,Sub,Val),Obj) :-
        !,
                                                                (   translate_arg_to_java(Fac,Val,literal,JVal)
        ->  true,
            debug(owl2,'~w is liter => ~w',[Val,JVal])
        ;   atom_javaIRI(Val,JVal),
            debug(owl2,'treating ~w as IRI ~w',[Val,JVal])),
                                        atom_javaIRI(Sub,JEntity),         atom_javaIRI(AP,AP_IRI),         jpl_call(Fac,getOWLAnnotationProperty,[AP_IRI],JAP),
        debug(owl2,'ap(~w) => ~w',[AP,JAP]),
                debug(owl2,'annot assertion(~w ~w ~w)',[JAP,JEntity,JVal]),
        jpl_call(Fac,getOWLAnnotationAssertionAxiom,[JAP,JEntity,JVal],Obj).

owlterm_java(Fac,_,OWLTerm,Obj) :-
        OWLTerm =.. [P,X],
        decl_method(P,M),               !,
        debug(owl2,'decl(~w,~w) -- converting to IRI: ~w',[P,M,X]),
        atom_javaIRI(X,U),
        debug(owl2,'calling: ~w . ~w( ~w )',[Fac,M,U]),
        jpl_call(Fac,M,[U],Obj),
        debug(owl2,'called: ~w . ~w( ~w ) = ~w',[Fac,M,U,Obj]).


owlterm_java(Fac,_,OWLTerm,Obj) :-
        atom(OWLTerm),                  !,
        debug(owl2,'converting to IRI: ~w',[OWLTerm]),
        atom_javaIRI(OWLTerm,U),
        (   is_class(OWLTerm)
        ->  M=getOWLClass
        ;   objectProperty(OWLTerm)
        ->  M=getOWLObjectProperty
        ;   \+ \+ classAssertion(_,M)
        ->  M=getOWLNamedIndividual
        ;   throw(OWLTerm)),
        debug(owl2,'  using: ~w',[M]),
        jpl_call(Fac,M,[U],Obj). 
owlterm_java(Fac,_Type,OWLTerm,Obj) :-         OWLTerm =.. [P|Args],
        axiom_method(P,M),
        !,
        axiom_arguments(P,ArgTypes),
        debug(owl2,'using java method: ~w, expecting arguments: ~w',[M,ArgTypes]),
        translate_args_to_java(Fac,Args,ArgTypes,Objs),
        jpl_call(Fac,M,Objs,Obj).

owlterm_java(Fac,_Type,OWLTerm,Obj) :-         OWLTerm =.. [P|Args],
        axiom_method(P,M,Objs,ReorderedObjs),
        !,
        axiom_arguments(P,ArgTypes),
        debug(owl2,'using java method: ~w, expecting arguments: ~w',[M,ArgTypes]),
        translate_args_to_java(Fac,Args,ArgTypes,Objs),
        jpl_call(Fac,M,ReorderedObjs,Obj).

owlterm_java(Fac,_,subPropertyOf(propertyChain(PL),P),Obj) :-         !,
        debug(owl2,'  translating chain ~w',[PL]),
        translate_args_to_java(Fac,[PL,P],[list(objectPropertyExpression),objectPropertyExpression],Objs),
        debug(owl2,'  translated chain to: ~w',[Objs]),
        jpl_call(Fac,getOWLSubPropertyChainOfAxiom,Objs,Obj).


owlterm_java(Fac,_,UntypedAxiom,Obj) :-         UntypedAxiom =.. [UntypedPred|Args],              nonvar(UntypedPred),
        owlpredicate_typed(UntypedPred,TypedPred),
        axiom_method(TypedPred,M),           TypeCheckGoal =.. [TypedPred|Args],       
                                TypeCheckGoal,
        !,
        debug(owl2,'typed axiom: if ~w is ~w',[UntypedAxiom,TypedPred]),
        owlpredicate_arguments(TypedPred,ArgTypes),
        translate_args_to_java(Fac,Args,ArgTypes,Objs),
        debug(owl2,'  translated ~w :: ~w method: ~w',[Args,ArgTypes,M]),
        jpl_call(Fac,M,Objs,Obj).

owlterm_java(Fac,_,UntypedAxiom,Obj) :- 
        UntypedAxiom =.. [UntypedPred|Args],
        nonvar(UntypedPred),
        owlpredicate_typed(UntypedPred,TypedPred),
        TypeCheckGoal =.. [TypedPred|Args],       
        TypeCheckGoal,
        debug(owl2,'typed axiom: if ~w is ~w',[UntypedAxiom,TypedPred]),
        owlpredicate_arguments(TypedPred,ArgTypes),
        translate_args_to_java(Fac,Args,ArgTypes,Objs),
        axiom_method(TypedPred,M,Objs,ObjsReordered),         debug(owl2,'  translated ~w :: ~w method: ~w',[Args,ArgTypes,M]),
        jpl_call(Fac,M,ObjsReordered,Obj).


translate_args_to_java(_Fac,[],[],[]).
translate_args_to_java(Fac,[A|Args],[T|ArgTypes],[Obj|Objs]) :-
        debug(owl2,' translating: ~w  :: ~w',[A,T]),
        translate_arg_to_java(Fac,A,T,Obj),
        debug(owl2,' translated: ~w --> ~w',[A,Obj]),
        translate_args_to_java(Fac,Args,ArgTypes,Objs).

translate_arg_to_java(Fac,L,set(T),Set) :-
        is_list(L),
        !,
        findall(T,member(_,L),Ts),
        translate_args_to_java(Fac,L,Ts,Objs),
        jpl_new('java.util.HashSet',[],Set),
        debug(owl2,' new set: ~w = ~w -- adding objs ~w',[L,Set,Objs]),
        forall(member(Obj,Objs),
               jpl_call(Set,add,[Obj],_)),
        debug(owl2,' made set: ~w ',[Set]).

translate_arg_to_java(Fac,L,list(T),List) :-
        is_list(L),
        !,
        findall(T,member(_,L),Ts),
        translate_args_to_java(Fac,L,Ts,Objs),
        jpl_new('java.util.ArrayList',[],List),
        debug(owl2,' new set: ~w = ~w -- adding objs ~w',[L,List,Objs]),
        forall(member(Obj,Objs),
               jpl_call(List,add,[Obj],_)),
        debug(owl2,' made list: ~w ',[List]).

translate_arg_to_java(_Fac,X,T,X) :- nonvar(T),T=int,!.

translate_arg_to_java(Fac,X,classExpression,Obj) :-
        atom(X),
        !,
        owlterm_java(Fac,_,class(X),Obj).
translate_arg_to_java(Fac,X,objectPropertyExpressionOrChain,Obj) :-
        atom(X),
        !,
        owlterm_java(Fac,_,objectProperty(X),Obj).
translate_arg_to_java(Fac,X,objectPropertyExpression,Obj) :-
        atom(X),
        !,
        owlterm_java(Fac,_,objectProperty(X),Obj).
translate_arg_to_java(Fac,X,dataPropertyExpression,Obj) :-
        atom(X),
        !,
        owlterm_java(Fac,_,dataProperty(X),Obj).
translate_arg_to_java(Fac,X,objectProperty,Obj) :-
        atom(X),
        !,
        owlterm_java(Fac,_,objectProperty(X),Obj).
translate_arg_to_java(Fac,X,individual,Obj) :-
        atom(X),
        !,
        owlterm_java(Fac,_,individual(X),Obj).
translate_arg_to_java(Fac,X,entity,Obj) :-
        atom(X),
        !,
        owlterm_java(Fac,_,entity(X),Obj).
translate_arg_to_java(Fac,Val,literal,Obj) :-         atom(Val),
        sub_atom(Val,0,_,_,'__'),
        !,
        translate_arg_to_java(Fac,literal(''),literal,Obj).
translate_arg_to_java(Fac,literal(lang(_,Val)),literal,Obj) :-         !,
        jpl_call(Fac,getOWLStringLiteral,[Val],Obj).
translate_arg_to_java(Fac,literal(type(_,Val)),literal,Obj) :-         !,
        jpl_call(Fac,getOWLStringLiteral,[Val],Obj).
translate_arg_to_java(Fac,literal(Val),literal,Obj) :-         !,
        jpl_call(Fac,getOWLStringLiteral,[Val],Obj).

translate_arg_to_java(_Fac,X,T,Obj) :-         atom(X),
        !,
        atom_javaIRI(X,U),
        jpl_new(T,U,Obj).

translate_arg_to_java(Fac,X,_T,Obj) :-
        atom(X),
        is_class(X),
        !,
        debug(owl2,'converting to IRI: ~w',[X]),
        atom_javaIRI(X,U),
        jpl_call(Fac,getOWLClass,U,Obj).
translate_arg_to_java(Fac,X,_T,Obj) :-
        atom(X),
        \+ \+ classAssertion(_,X),
        !,
        atom_javaIRI(X,U),
        jpl_call(Fac,getOWLNamedIndividual,U,Obj).

translate_arg_to_java(Fac,X,_T,Obj) :-
        atom(X),
        objectProperty(X),
        !,
        atom_javaIRI(X,U),
        jpl_call(Fac,getOWLObjectProperty,U,Obj).




translate_arg_to_java(Fac,UntypedExpr,_T,Obj) :-
        UntypedExpr =.. [UntypedPred|Args],         owlpredicate_typed(UntypedPred,TypedPred),
        owlpredicate_arguments(TypedPred,ArgTypes),
        debug(owl2,'  testing for java expr method ~w',[TypedPred]),
        expr_method(TypedPred,Method),
        Check =.. [TypedPred,UntypedExpr],         debug(owl2,'  checking expr ~w',[Check]),
        Check,
        !,
        debug(owl2,'  typed expr ~w -> ~w :: ~w',[UntypedExpr,TypedPred,ArgTypes]),
        translate_args_to_java(Fac,Args,ArgTypes,Objs),
        debug(owl2,'  expr ~w -> java ~w.~w',[UntypedExpr,Method,Objs]),
        jpl_call(Fac,Method,Objs,Obj),
        debug(owl2,'  made obj for ~w = ~w',[UntypedExpr,Obj]).

translate_arg_to_java(Fac,UntypedExpr,_T,Obj) :-
        UntypedExpr =.. [UntypedPred|Args],         owlpredicate_typed(UntypedPred,TypedPred),
        owlpredicate_arguments(TypedPred,ArgTypes),
        Check =.. [TypedPred,UntypedExpr],         debug(owl2,'  checking expr ~w',[Check]),
        Check,
        debug(owl2,'  typed expr ~w -> ~w :: ~w',[UntypedExpr,TypedPred,ArgTypes]),
        translate_args_to_java(Fac,Args,ArgTypes,Objs),
        debug(owl2,'  testing for REORDERED java expr method ~w',[TypedPred]),
        expr_method(TypedPred,Method,Objs,ReorderedObjs),
        !,
        debug(owl2,'  expr ( reordered ) ~w -> java ~w.~w',[UntypedExpr,Method,ReorderedObjs]),
        jpl_call(Fac,Method,ReorderedObjs,Obj),
        debug(owl2,'  made obj for ~w = ~w',[UntypedExpr,Obj]).

translate_arg_to_java(Fac,Expr,_T,Obj) :-
        Expr =.. [Pred|Args],           owlpredicate_arguments(Pred,ArgTypes),
        expr_method(Pred,Method),
        !,
        translate_args_to_java(Fac,Args,ArgTypes,Objs),
        jpl_call(Fac,Method,Objs,Obj).




decl_method(P,M) :-
        decl_method(P,M,_).

decl_method(class,getOWLClass,classExpression).
decl_method(objectProperty,getOWLObjectProperty,propertyExpression).
decl_method(annotationProperty,getOWLAnnotationProperty,iri).
decl_method(dataType,getOWLDatatype,datatype).
decl_method(dataProperty,getOWLDataProperty,_).
decl_method(individual,getOWLNamedIndividual,_). decl_method(entity,getOWLNamedIndividual,_). 
:- discontiguous axiom_method/2,axiom_method/4.


axiom_method(subClassOf,getOWLSubClassOfAxiom).
axiom_method(equivalentClasses,getOWLEquivalentClassesAxiom).
axiom_method(disjointClasses,getOWLDisjointClassesAxiom).
axiom_method(inverseProperties,getOWLInverseObjectPropertiesAxiom).

axiom_method(symmetricProperty,getOWLSymmetricObjectPropertyAxiom).
axiom_method(asymmetricProperty,getOWLAsymmetricObjectPropertyAxiom).
axiom_method(reflexiveProperty,getOWLReflexiveObjectPropertyAxiom).
axiom_method(irreflexiveProperty,getOWLIrreflexiveObjectPropertyAxiom).

axiom_method(functionalObjectProperty,getOWLFunctionalObjectPropertyAxiom).
axiom_method(dataObjectProperty,getOWLFunctionalDataPropertyAxiom).

axiom_method(objectPropertyAssertion,getOWLObjectPropertyAssertionAxiom).
axiom_method(dataPropertyAssertion,getOWLDataPropertyAssertionAxiom).

axiom_method(differentIndividuals,getOWLDifferentIndividualsAxiom).



axiom_method(subObjectPropertyOf,getOWLSubObjectPropertyOfAxiom).
axiom_method(subDataPropertyOf,getOWLSubDataPropertyOfAxiom).
axiom_method(disjointObjectProperties,getOWLDisjointObjectPropertiesAxiom).
axiom_method(disjointDataProperties,getOWLDisjointDataPropertiesAxiom).
axiom_method(equivalentObjectProperties,getOWLEquivalentObjectPropertiesAxiom).
axiom_method(equivalentDataProperties,getOWLEquivalentDataPropertiesAxiom).

axiom_method(transitiveProperty,getOWLTransitiveObjectPropertyAxiom).
axiom_method(inverseFunctionalProperty,getOWLInverseFunctionalObjectPropertyAxiom).
axiom_method(symmetricProperty,getOWLSymmetricObjectPropertyAxiom).
axiom_method(dataPropertyDomain,getOWLDataPropertyDomainAxiom).
axiom_method(objectPropertyDomain,getOWLObjectPropertyDomainAxiom).
axiom_method(dataPropertyRange,getOWLDataPropertyRangeAxiom).
axiom_method(objectPropertyRange,getOWLObjectPropertyRangeAxiom).

axiom_method(classAssertion,getOWLClassAssertionAxiom).

expr_method(objectIntersectionOf,getOWLObjectIntersectionOf).
expr_method(dataIntersectionOf,getOWLObjectIntersectionOf).
expr_method(objectSomeValuesFrom,getOWLObjectSomeValuesFrom).
expr_method(dataSomeValuesFrom,getOWLDataSomeValiesFrom).
expr_method(objectHasValue,getOWLObjectHasValue).
expr_method(dataHasValue,getOWLDataHasValue).
expr_method(objectAllValuesFrom,getOWLObjectAllValuesFrom).
expr_method(dataAllValuesFrom,getOWLDataAllValuesFrom).
expr_method(objectComplementOf,getOWLObjectComplementOf).
expr_method(dataComplementOf,getOWLDataComplementOf).
expr_method(objectUnionOf,getOWLObjectUnionOf).
expr_method(dataUnionOf,getOWLDataUnionOf).
expr_method(objectOneOf,getOWLObjectOneOf).
expr_method(dataOneOf,getOWLDataOneOf).

expr_method(inverseOf,getOWLObjectPropertyInverse).

expr_method(objectMinCardinality,getOWLObjectMinCardinality,[N,P,CE],[N,P,CE]).
expr_method(objectMinCardinality,getOWLObjectMinCardinality,[N,P],[N,P]).
expr_method(dataMinCardinality,getOWLDataMinCardinality,[N,P,CE],[N,P,CE]).
expr_method(dataMinCardinality,getOWLDataMinCardinality,[N,P],[N,P]).
expr_method(objectMaxCardinality,getOWLObjectMaxCardinality,[N,P,CE],[N,P,CE]).
expr_method(objectMaxCardinality,getOWLObjectMaxCardinality,[N,P],[N,P]).
expr_method(dataMaxCardinality,getOWLDataMaxCardinality,[N,P,CE],[N,P,CE]).
expr_method(dataMaxCardinality,getOWLDataMaxCardinality,[N,P],[N,P]).
expr_method(objectExactCardinality,getOWLObjectExactCardinality,[N,P,CE],[N,P,CE]).
expr_method(objectExactCardinality,getOWLObjectExactCardinality,[N,P],[N,P]).
expr_method(dataExactCardinality,getOWLDataExactCardinality,[N,P,CE],[N,P,CE]).
expr_method(dataExactCardinality,getOWLDataExactCardinality,[N,P],[N,P]).





:- multifile owl2_reasoner:initialize_reasoner_hook/3.
:- multifile owl2_reasoner:reasoner_tell_hook/2.
:- multifile owl2_reasoner:reasoner_tell_all_hook/1.
:- multifile owl2_reasoner:reasoner_ask_hook/2.
:- multifile owl2_reasoner:reasoner_check_consistency_hook/2.
:- multifile owl2_reasoner:reasoner_unsatisfiable_class_hook/2.

wrapped_reasoner(pellet).
wrapped_reasoner(hermit).
wrapped_reasoner(factpp).

owl2_reasoner:initialize_reasoner_hook(Type,R,Opts) :-
	wrapped_reasoner(Type),         !,
	owl2_reasoner:initialize_reasoner_hook(owlapi(Type),R,Opts).
owl2_reasoner:initialize_reasoner_hook(owlapi(Type),owlapi_reasoner(R,Fac,Opts),Opts) :-
	!,
	require_manager(Man),
	create_factory(Man,Fac),
        statistics(cputime,T1),
        print_message(informational,bench(reasoner,T1)),
        build_ontology(Man,Fac,Ont),
	create_reasoner(Ont,Type,R),
        statistics(cputime,T2),
        print_message(informational,bench(reasoner,T1,T2)).



owl2_reasoner:reasoner_tell_all_hook(owlapi_reasoner(OWLReasoner,Fac,_Opts)) :-
	build_ontology(Man,Fac,Ont),
	reasoner_classify(OWLReasoner,Man,Ont).

	

owl2_reasoner:reasoner_ask_hook(owlapi_reasoner(R,Fac,_Opts),subClassOf(A,B)) :-
	reasoner_subClassOf(R,Fac,A,B),
        \+ nothing(A).


owl2_reasoner:reasoner_ask_hook(owlapi_reasoner(R,Fac,_Opts),subClassOf(A,B),IsDirect) :-
	reasoner_subClassOf(R,Fac,A,B,IsDirect),
        \+ nothing(A).

owl2_reasoner:reasoner_ask_hook(owlapi_reasoner(R,Fac,_Opts),directSubClassOf(A,B)) :-
	reasoner_subClassOf(R,Fac,A,B,true),
        \+ nothing(A).

owl2_reasoner:reasoner_ask_hook(owlapi_reasoner(R,Fac,_Opts),classAssertion(C,I)) :-
	reasoner_individualOf(R,Fac,I,C).

owl2_reasoner:reasoner_ask_hook(owlapi_reasoner(R,Fac,_Opts),classAssertion(C,I),IsDirect) :-
	reasoner_individualOf(R,Fac,I,C,IsDirect).

owl2_reasoner:reasoner_ask_hook(owlapi_reasoner(R,Fac,_Opts),propertyAssertion(P,A,B)) :-
	reasoner_objectPropertyAssertion(R,Fac,P,A,B).

owl2_reasoner:reasoner_unsatisfiable_class_hook(owlapi_reasoner(R,_Fac,_Opts),C) :-
	unsatisfiable_class(R,C).

owl2_reasoner:reasoner_check_consistency_hook(owlapi_reasoner(R,_Fac,_Opts),V) :-
        debug(reasoner,'checking consistency',[]),
        (   is_consistent(R)
        ->  V=true
        ;   V=false).



show_java_memory_info :-
        java_memory_info(M,TM,FM,MM),
        Mb is M/(1024*1024),
        MMb is MM/(1024*1024),
        format(user_error,'Mem: ~wmb (~wb) // Max: ~wmb (~wb) // ~w - ~w',[Mb,M,MMb,MM,TM,FM]).
        java_memory_info(M,TM,FM,MM) :-
        java_gc,
        java_gc,
        java_gc,
        jpl_call('java.lang.Runtime',getRuntime,[],RunTime),
        jpl_call(RunTime,totalMemory,[],TM),
        jpl_call(RunTime,freeMemory,[],FM),
        jpl_call(RunTime,maxMemory,[],MM),
        M is TM-FM.

java_gc :-     jpl_call('java.lang.System',gc,[],_).



prolog:message(bench(M,T1)) -->
        ['initializing: ',M,' ',T1].
prolog:message(bench(M,T1,T2)) -->
        {TD is T2-T1},
        ['completed: ',M,' ',T2,' time: ',TD].



	


:- use_module(owl2_model).
:- use_module(owl2_io).
:- use_module(owl2_java_owlapi).


:- begin_tests(pellet,[setup(load)]).

load :-
        load_axioms('testfiles/music_ontology.owl').

test(loaded) :-
        \+ \+ ontology(_).

test(reasoner) :-
        create_factory(Man,Fac),
        build_ontology(Man,Fac,Ont),
        writeln(classifying),
        create_reasoner(Man,pellet,Reasoner),
        reasoner_classify(Reasoner,Man,Ont),
        writeln(classified),
        forall(class(C),
               (   writeln(class=C),
                   forall(reasoner_subClassOf(Reasoner,Fac,C,P),
                         writeln(superclass=P)))).


:- end_tests(pellet).

:- begin_tests(teams,[setup(load)]).


load :-
        load_axioms('testfiles/teams.owl').

test(loaded) :-
        \+ \+ ontology(_).

test(reasoner) :-
        create_factory(Man,Fac),
        build_ontology(Man,Fac,Ont),
        writeln(classifying),
        create_reasoner(Man,pellet,Reasoner),
        reasoner_classify(Reasoner,Man,Ont),
        reasoner_subClassOf(Reasoner,Fac,'http://owl.cs.manchester.ac.uk/2009/07/sssw/teams#OntologyFC','http://owl.cs.manchester.ac.uk/2009/07/sssw/teams#MixedTeam'),
        \+ reasoner_subClassOf(Reasoner,Fac,'http://owl.cs.manchester.ac.uk/2009/07/sssw/teams#OntologyFC','http://owl.cs.manchester.ac.uk/2009/07/sssw/teams#NonSingletonTeam').

        

:- end_tests(teams).





:- module(owl2_lcs,
          [
           prepare_optimizations/1,
           class_pair_common_subsumer/3,
           class_pair_common_subsumer/4,
           class_pair_least_common_subsumer/3,
           class_pair_least_common_subsumer/4,
           derived_axiom_for_lcs/4,
           individual_neighborhood_expression/3,
           individual_msc/2,
           individual_msc/3,
           description_pivot/2,
           simple_lcs/5,
           class_pair_gmatch/3
          ]).



:- use_module(owl2_model).
:- use_module(owl2_reasoner).
:- use_module(owl2_graph_reasoner). 
prepare_optimizations(_) :-
        ensure_loaded(library(thea2/util/memoization)),
        table_pred(is_subsumed_by/3),
        table_pred(reasoner_get_subsumer/3),
        table_pred(class_pair_common_subsumer_ext/4),
        graph_reasoner_memoize.

exclude('http://ontology.neuinfo.org/NIF/Backend/BIRNLex_annotation_properties.owl#_birnlex_limbo_class').
exclude('http://ontology.neuinfo.org/NIF/DigitalEntities/NIF-Investigation.owl#birnlex_2087').
exclude('http://ontology.neuinfo.org/NIF/BiomaterialEntities/NIF-GrossAnatomy.owl#birnlex_6'). exclude('http://ontology.neuinfo.org/NIF/BiomaterialEntities/NIF-GrossAnatomy.owl#birnlex_4'). exclude('http://ontology.neuinfo.org/NIF/BiomaterialEntities/NIF-GrossAnatomy.owl#birnlex_16'). exclude('http://ontology.neuinfo.org/NIF/BiomaterialEntities/NIF-GrossAnatomy.owl#birnlex_1167'). exclude('http://ontology.neuinfo.org/NIF/BiomaterialEntities/NIF-Molecule.owl#CHEBI_23367'). exclude('http://ontology.neuinfo.org/NIF/BiomaterialEntities/NIF-Molecule.owl#nlx_mol_20090303'). exclude(someValuesFrom('http://www.obofoundry.org/ro/ro.owl#has_proper_part',_)).
exclude(allValuesFrom('http://www.obofoundry.org/ro/ro.owl#has_proper_part',_)).
exclude(Class) :-
	atom(Class),
	sub_atom(Class,0,_,_,'http://www.ifomis.org').

exclude_tr(someValuesFrom(_,X)) :- exclude_tr(X).
exclude_tr(allValuesFrom(_,X)) :- exclude_tr(X).
exclude_tr(X) :- exclude(X).

reasoner_get_subsumer(C,P) :- 
        reasoner_get_subsumer(C,P,[]).
reasoner_get_subsumer(C,P,Opts) :-
        opts_reasoner(Opts,R),
        reasoner_ask(R,subClassOf(C,P)),
        \+ exclude_tr(P).

opts_reasoner(Opts,R) :- option(reasoner(R),Opts,graph_reasoner),!.


class_pair_common_subsumers(A,B,CSs,Opts) :-
        class_pair_common_subsumers(A,B,_,_,CSs,Opts).

class_pair_common_subsumers(A,B,APs,BPs,CSs,Opts) :-
        debug(owlsim,'finding cs(~w,~w) via ~w',[A,B,Opts]),
        setof(X,reasoner_get_subsumer(A,X,Opts),APs),
        setof(X,reasoner_get_subsumer(B,X,Opts),BPs),
        debug(owlsim_detail,'   finding intersection',[]),
        ord_intersection(APs,BPs,CSs).

class_pair_common_subsumer(A,B,CS) :-
        class_pair_common_subsumer(A,B,CS,[]).

class_pair_common_subsumer(A,B,CS,Opts) :-
        class_pair_common_subsumers(A,B,CSs,Opts),
        member(CS,CSs).

class_pair_least_common_subsumer(A,B,LCS) :-
        class_pair_least_common_subsumer(A,B,LCS,[]).

class_pair_least_common_subsumer(A,B,LCS,Opts) :-
        member(basic(true),Opts),
        !,
        class_pair_least_common_subsumer_basic(A,B,LCS,Opts).
class_pair_least_common_subsumer(A,B,LCS,Opts) :-
                class_pair_least_common_subsumer_ext_combined(A,B,LCS,Opts).

class_pair_least_common_subsumer_basic(A,B,LCS,Opts) :-
        class_pair_common_subsumers(A,B,CSs,Opts),
        member(LCS,CSs),
        opts_reasoner(Opts,R),
                \+ ((member(X,CSs),
             X\=LCS,
             reasoner_ask(R,subClassOf(X,LCS)))).


class_pair_common_subsumers_with_union(A,B,CSs,Opts) :-
        setof(CS,class_pair_common_subsumer_with_union(A,B,CS,Opts),CSs).

class_pair_common_subsumer_with_union(A,B,CS,Opts) :-
        debug(owlsim_detail,'finding cs+u(~w,~w)',[A,B]),
                setof(X,reasoner_get_subsumer(A,X,Opts),APs),
        setof(X,reasoner_get_subsumer(B,X,Opts),BPs),
        member(AP,APs),
        member(BP,BPs),
        debug(owlsim_detail,' candidate_u(~w,~w)',[AP,BP]),
        mk_union(AP,BP,U),
        debug(owlsim_detail,' U(~w,~w) = ~w',[AP,BP,U]),
        flatten_union(U,CS),
        debug(owlsim_detail,' U_normalized(~w,~w) == ~w',[AP,BP,CS]).

class_pair_common_subsumer_with_union(A,B,CS,Opts) :-
        class_pair_common_subsumer(A,B,CS,Opts).


mk_union(X,X,X) :- !.
mk_union(someValuesFrom(R,X),Y,unionOf([someValuesFrom(R,X),Y]) ) :-
        mk_union(X,Y,_).
mk_union(X,someValuesFrom(R,Y),unionOf([X,someValuesFrom(R,Y)]) ) :-
        mk_union(X,Y,_).
mk_union(allValuesFrom(R,X),Y,unionOf([allValuesFrom(R,X),Y]) ) :-
        mk_union(X,Y,_).
mk_union(X,allValuesFrom(R,Y),unionOf([X,allValuesFrom(R,Y)]) ) :-
        mk_union(X,Y,_).

flatten_union(unionOf(InL),unionOf(OutL)) :-
        !,
        findall(X,
                (   member(Top,InL),
                    flatten_union(Top,TopF),
                    (   TopF=unionOf(NestL)
                    ->  member(X,NestL)
                    ;   X=TopF)),
                OutL).
flatten_union(X,X).






class_pair_common_subsumer_ext(A,B,CS_Out,Opts) :-
                class_pair_common_subsumers_with_union(A,B,CSs,Opts),
        debug(owlsim_detail,'   union cs(~w, ~w) = ~w',[A,B,CSs]),

                member(C1,CSs),                 member(C2,CSs),         C1 @< C2,         debug(owlsim_detail,'   candidate intersection: ~w ^ ~w',[C1,C2]),

        \+ subsumes_or_subsumed_by(C1,C2,Opts),

        debug(owlsim_detail,'     NR - now try combining',[]),
                combine_expr_pair(C1,C2,CS,Opts),
        debug(owlsim_detail,'   candidate combined CS: ~w',[CS]),

        is_subsumed_by_chk(A,CS,Opts),
        is_subsumed_by_chk(B,CS,Opts),
        CS_Out=CS.
        


all_class_pair_common_subsumer_ext(A,B,CS_Set,Opts) :-
        setof(CS,class_pair_common_subsumer_ext(A,B,CS,Opts),CS_Set),         !.
all_class_pair_common_subsumer_ext(A,B,CS_Set,Opts) :-
                class_pair_common_subsumers_with_union(A,B,CS_Set,Opts).

class_pair_least_common_subsumer_ext(A,B,CS_Simple,Opts) :-
        all_class_pair_common_subsumer_ext(A,B,CS_Set,Opts),         debug(owlsim_detail,'   calculated set of extended subsumers.',[]),
        member(CS,CS_Set),
        debug(owlsim_detail,'   candidate LCS: ~w',[CS]),
                \+ ((member(X,CS_Set),
             \+ is_equivalent(X,CS,Opts),
             is_subsumed_by_chk(X,CS,Opts),
             debug(foo,'  fail: is_subsumed_by_chk(~q,~q).',[X,CS]))),
        simplify_expr(CS,CS_Simple).


class_pair_least_common_subsumer_ext_combined(A,B,CS_Combined,Opts) :-
        setof(CS,class_pair_least_common_subsumer_ext(A,B,CS,Opts),CS_Set),
        normalize_expr(intersectionOf(CS_Set),CS_Combined,Opts).

normalize_expr(intersectionOf([X]),Y,Opts) :-
        !,
        normalize_expr(X,Y,Opts).
normalize_expr(intersectionOf(L1),Y,Opts) :-
                        select(X1,L1,L2),
        select(X2,L2,L3),
        reasoner_get_subsumer(X1,X2,Opts),
        !,
        normalize_expr(intersectionOf([X1|L3]),Y,Opts).
normalize_expr(intersectionOf(OuterL),Y,Opts) :-
        setof(X,intersection_member(X,OuterL),Xs),
        Xs\=OuterL,
        !,
        normalize_expr(intersectionOf(Xs),Y,Opts).
normalize_expr(X,X,_Opts).

intersection_member(X,L) :-
        member(E,L),
        E=intersectionOf(IL),
        member(X,IL).
intersection_member(E,L) :-
        member(E,L),
        E\=intersectionOf(_).

simplify_expr(C,C) :- atom(C),!.
simplify_expr(CE,C) :- equivalent_to(CE,C),atom(C),!.
simplify_expr(CE,CE2) :-
        CE =.. [F|Args],
        Args\=[],
        !,
        maplist(simplify_expr,Args,Args2),
        CE2 =.. [F|Args2].
simplify_expr(C,C).


combine_expr_pair(C1,C2,intersectionOf([C1,C2]),_).
combine_expr_pair(C1x,C2x,someValuesFrom(R,CE) ,Opts) :-
        C1x=someValuesFrom(R,C1),
        C2x=someValuesFrom(R,C2),
        \+ subsumes_or_subsumed_by(C1,C2,Opts),
        combine_expr_pair(C1,C2,CE,Opts).
combine_expr_pair(C1x,C2x,allValuesFrom(R,CE) ,Opts) :-
        C1x=allValuesFrom(R,C1),
        C2x=allValuesFrom(R,C2),
        \+ subsumes_or_subsumed_by(C1,C2,Opts),
        combine_expr_pair(C1,C2,CE,Opts).







is_equivalent(C,C,_) :- !.
is_equivalent(C1,C2,Opts) :-
        is_subsumed_by_chk(C1,C2,Opts),
        is_subsumed_by_chk(C2,C1,Opts).

subsumes_or_subsumed_by(C1,C2,Opts) :-       is_subsumed_by_chk(C1,C2,Opts).
subsumes_or_subsumed_by(C1,C2,Opts) :-       is_subsumed_by_chk(C2,C1,Opts).

is_subsumed_by_chk(X,Y,Opts) :-
        !,
        is_subsumed_by(X,Y,Opts).

is_subsumed_by(X,X,_).
is_subsumed_by(X,Y,Opts) :-
        atom(X),
        equivalent_to(X,Expr),
        \+ atom(Expr),         is_subsumed_by(Expr,Y,Opts).
is_subsumed_by(A,unionOf(L),Opts) :-
        member(X,L),
        is_subsumed_by(A,X,Opts).
is_subsumed_by(unionOf(L),B,Opts) :-         forall(member(X,L),
               is_subsumed_by(X,B,Opts)).
is_subsumed_by(A,intersectionOf(L),Opts) :-
        forall(member(X,L),
               is_subsumed_by(A,X,Opts)).
is_subsumed_by(intersectionOf(L),B,Opts) :-
        member(X,L),
        is_subsumed_by(X,B,Opts).
is_subsumed_by(someValuesFrom(P,X),someValuesFrom(P,Y),Opts) :-
        is_subsumed_by(X,Y,Opts).
is_subsumed_by(someValuesFrom(P,X),someValuesFrom(P,Y),Opts) :-
        transitiveProperty(P),
        is_subsumed_by(X,someValuesFrom(P,Y),Opts).
is_subsumed_by(A,X,Opts) :-
        opts_reasoner(Opts,R),
        reasoner_ask(R,subClassOf(A,X1)),
        X1\=A,         X=X1.




derived_axiom_for_lcs(X,Y,LCS,Axiom) :-
        hack_name(X,Y,LCS_Named),
        debug(owlsim,'lcs_named: ~w',[LCS_Named]),
        Axioms =
        [
         subClassOf(X,LCS_Named),
         subClassOf(Y,LCS_Named),
         class(LCS_Named),
         equivalentClasses([LCS_Named,LCS])
        ],
        member(Axiom,Axioms).

split_on(A,D,X,Y) :-
        sub_atom(A,P,_,_,D),
        sub_atom(A,0,P,_,X),
        Pp1 is P+1,
        sub_atom(A,Pp1,_,0,Y).
hack_name(X,Y,N) :-
        D='#',
        split_on(X,D,Pre,RX),
        split_on(Y,D,Pre,RY),
        concat_atom([Pre,D,'LCS-',RX,'-vs-',RY],N),
        !.
hack_name(X,_,N) :-
        !,
        gensym('-lcs',Z),
        atom_concat(X,Z,N).
xxhack_name(X,Y,N) :-
        (   D='/'
        ;   D='_'),
        concat_atom([Pre|L1],D,X),
        concat_atom([Pre|L2],D,Y),
        append(L1,L2,L3),
        concat_atom([Pre|L3],D,N),
        !.


        



individual_msc(Individual,ParentExpr) :-
        individual_msc(Individual,ParentExpr,[]).
individual_msc(Individual,ParentExpr,Opts) :-
        option(max_depth(MD),Opts,3),
        individual_neighborhood_expression(Individual,ParentExpr,MD,Opts).

individual_neighborhood_expression(ID,Expr,MaxDepth) :-
        individual_neighborhood_expression(ID,Expr,MaxDepth,[]).
individual_neighborhood_expression(ID,Expr,MaxDepth,Opts) :-
        setof(ID,is_individual(ID),IDs),
        member(ID,IDs),
	debug(mcs,'individual_nex(~w)',[ID]),
	individual_neighbor_graph([0/ID/Expr-Expr],[],MaxDepth,Opts).

individual_neighbor_graph([Depth/I/InnerExpr-_|ScheduledCCPairs],Visisted,MaxDepth,Opts) :-
        Depth < MaxDepth,
        classAssertion(C,I),
        debug(mcs,'C: ~w E: ~w',[ci(C,I),Expr]),
        DepthPlus1 is Depth+1,
	setof(Prop-Parent,
              (   individual_parent_over(I,Parent,Prop),
                  \+ exclude_entity(Parent,Opts),
                  \+ord_memberchk(Parent,Visisted)),               NextLinks),
	!,
        findall(DepthPlus1/Parent/PE-someValuesFrom(Prop,PE),member(Prop-Parent,NextLinks),PRPairs),
        prpairs_list(PRPairs,Restrictions),
        InnerExpr=intersectionOf([C|Restrictions]),
        debug(mcs,'    E: ~w',[Expr]),
        append(ScheduledCCPairs,PRPairs,NewScheduledCCPairs),
        debug(mcs,'    new: ~w',[NewScheduledCCPairs]),
	individual_neighbor_graph(NewScheduledCCPairs,[I|Visisted],MaxDepth,Opts).
individual_neighbor_graph([_/I/InnerExpr-_|ScheduledCCPairs],Visisted,MaxDepth,Opts) :-
	!,
                classAssertion(InnerExpr,I),
	individual_neighbor_graph(ScheduledCCPairs,[I|Visisted],MaxDepth,Opts).
individual_neighbor_graph([],_,_,_). 
prpairs_list([],[]).
prpairs_list([_-R|PL],[R|RL]) :-
        prpairs_list(PL,RL).

is_individual(ID) :-  namedIndividual(ID).
is_individual(ID) :-  classAssertion(_,ID).

individual_parent_over(Child,Parent,Prop) :-
        propertyAssertion(Prop,Child,Parent),
        \+ annotationProperty(Prop),
        Parent \= literal(_).
individual_parent_over(Child,Parent,InverseProp) :-
        propertyAssertion(Prop,Parent,Child),
        mk_inverse_prop(Prop,InverseProp),
        \+ annotationProperty(Prop),
        Parent \= literal(_).

mk_inverse_prop(Prop,InverseProp) :- inverseProperties(Prop,InverseProp),!.
mk_inverse_prop(Prop,InverseProp) :- inverseProperties(InverseProp,Prop),!.
mk_inverse_prop(Prop,inverseOf(Prop)).

exclude_entity(X,Opts) :-
        member(exclude_class(C),Opts),
        classAssertion(C,X).


description_pivot(In,Out) :-
        description_pivot(In,'owl:Thing',Out_1),
        remove_owl_thing(Out_1,Out).

description_pivot(In,Accum,Out) :-
        d_select_edge(In,P,To,Rest),
        mk_inverse_prop(P,IP),
        d_mk_edge(IP,Accum,Rest,NewAccum),
        description_pivot(To,NewAccum,Out).

description_pivot(In,Accum,Out) :-
        d_intersect(Accum,In,Out).

d_select_edge(intersectionOf(L),P,To,L2) :-
        select(someValuesFrom(P,To),L,L2).
d_select_edge(someValuesFrom(P,To),P,To,[]).

d_mk_edge(Prop,TgtDesc,Descs,someValuesFrom(Prop,NewDesc) ) :-
        d_cons(TgtDesc,Descs,NewDesc).

d_cons(D,L,New) :-
        d_cons_1(D,L,NewL),
        (   NewL=[New]
        ->  true
        ;   NewL=[]
        ->  New='owl:Thing'
        ;   New=intersectionOf(NewL)).
d_cons_1('owl:Thing',L,L) :- !.
d_cons_1(intersectionOf(L1),L2,L3) :-
        !,
        append(L1,L2,L3).
d_cons_1(D,L,[D|L]).

d_intersect(A,B,intersectionOf([A,B])).

remove_owl_thing(intersectionOf(L),intersectionOf(L2)) :-
        select('owl:Thing',L,L2),
        !.
remove_owl_thing(X,X).


simple_class_ancestor_over(X,A,RX) :-
        class_ancestor_over(X,A,RX),
        atom(A).

class_ancestors(X,AL) :-
        setof(A,R^simple_class_ancestor_over(X,A,R),AL).

simple_cs(X,Y,A,RX,RY) :-
        class_ancestors(X,XAL),
        class_ancestors(Y,YAL),
        ord_intersection(XAL,YAL,AL),
        member(A,AL),
        simple_class_ancestor_over(X,A,RX),
        simple_class_ancestor_over(Y,A,RY).

simple_lcs(X,Y,A) :-
        simple_lcs(X,Y,A,_,_).

simple_lcs(X,Y,A,RA) :-
        simple_lcs(X,Y,A,RX,RY),
        relation_union(RX,RY,RA).

simple_lcs(X,Y,A,RX,RY) :-
        simple_cs(X,Y,A,RX,RY),
        \+ ((simple_cs(X,Y,A2,RX2,RY2),
             A2-RX2-RY2 \= A-RX-RY,
             class_ancestor_over(A2,A,_))). 
relation_union(R,R,R) :- !.
relation_union(RX,RY,or(RX,RY)) :- !.

simple_lcs_dist(X,Y,A,RA,D) :-
        simple_lcs(X,Y,A,RA),
        calc_lcs_dist(X,Y,A,D).

calc_lcs_dist(A,A,A,0) :- !.
calc_lcs_dist(A,_,A,1) :- !.
calc_lcs_dist(_,A,A,1) :- !.
calc_lcs_dist(_,_,_,5).

        


class_pair_gmatch(L1,L2,M) :-
        desc_edgeset(L1,S1),
        desc_edgeset(L2,S2),
        ord_intersection(S1,S2,M).

desc_edgeset(D,EL) :-
        setof(E,d_edge_tr(D,E),EL).

d_edge_tr(SD,E) :-
        d_edge(SD,E,_).
d_edge_tr(SD,E) :-
        d_edge(SD,_,X),
        d_edge_tr(X,E).

d_edge(SD,e(S,T,R),TD) :-
        d_named_parent(SD,S),
        d_conn(SD,R,TD_1),
        d_extend(TD_1,T,TD).

d_extend(A,B,A) :-
        d_named_parent(A,B),
        !.
d_extend(A,B,X) :-
        d_conn(A,_P,Z),         d_extend(Z,B,X).

d_conn(someValuesFrom(Prop,Tgt),Prop,Tgt).
d_conn(intersectionOf(L),Prop,Tgt) :-
        member(X,L),
        d_conn(X,Prop,Tgt).
d_conn(D,Prop,Tgt) :-
        equivalent_to(D,intersectionOf(L)),
        member(X,L),
        d_conn(X,Prop,Tgt).


d_named_parent(D,P) :-
        d_named_parent(D,P,[]).

d_named_parent(intersectionOf(L),P,VL) :-
        !,
        member(X,L),
        d_named_parent(X,P,VL).
d_named_parent(D,P,VL) :-
        \+ member(D,VL),
        equivalent_to(D,EC),
        !,
        d_named_parent(EC,P,[D|VL]).
d_named_parent(D,D,_) :- atom(D).

edge_pair_subsumer_diff(E,E,E,0) :- !.
edge_pair_subsumer_diff(E1,E2,E3,Dist) :-
        E1=e(S1,T1,R1),
        E2=e(S2,T2,R2),
        E3=e(S3,T3,R3),
        simple_lcs_dist(S1,S2,S3,_RS3,DS),
        simple_lcs_dist(T1,T2,T3,_RT3,DT),
        relation_union(R1,R2,R3),         Dist is DS+DT.

        
d_pair_matching_edges(D1,D2,ML1,ML2) :-
        desc_edgeset(D1,EL1),
        desc_edgeset(D2,EL2),
        e_pairs_scores(EL1,EL2,MEL),
        findall(m(E1,E2,E3,Diff),
                (   member(E1,EL1),
                    best_match1(E1,MEL,E2,E3,Diff)),
                ML1),
        findall(m(E1,E2,E3,Diff),
                (   member(E2,EL2),
                    best_match1(E2,MEL,E1,E3,Diff)),
                ML2).

compare_individuals(I1,I2,ML1,ML2) :-
        individual_msc(I1,D1),
        individual_msc(I2,D2),
        d_pair_matching_edges(D1,D2,ML1,ML2).

e_pairs_scores(EL1,EL2,MEL) :-
        setof(M,e_pairs_member_match(EL1,EL2,M),MEL).

e_pairs_member_match(L1,L2,m(E1,E2,E3,Diff)) :-
        member(E1,L1),
        member(E2,L2),
        debug(gm,'testing: ~w vs ~w',[E1,E2]),
        edge_pair_subsumer_diff(E1,E2,E3,Diff).

best_match1(E1,MEL,E2,E3,Diff) :-
        setof(Diff-m(E2,E3),
              member(m(E1,E2,E3,Diff),MEL),
              [Diff-m(E2,E3)|_]).
best_match2(E2,MEL,E1,E3,Diff) :-
        setof(Diff-m(E1,E3),
              member(m(E1,E2,E3,Diff),MEL),
              [Diff-m(E1,E3)|_]).






:- multifile user:parse_arg_hook/3.
user:parse_arg_hook(['--sim-display-object',Ob|L],L,goal(owl2_lcs:display_object(Ob))) :-
        assume_entity_declarations.
user:parse_arg_hook(['--sim-display-object-pair',X1,X2|L],L,goal(owl2_lcs:display_object_pair(X1,X2,[]))) :-
        assume_entity_declarations.

:- use_module(util/dot).

edge_gterm(e(S,_,_),node(S,[label=N])) :- node_label(S,N).
edge_gterm(e(_,T,_),node(T,[label=N])) :- node_label(T,N).
edge_gterm(e(S,T,R),edge(S,T,[label=RL])) :- node_label(R,RL).


edge_to_gterm(e(S,T,invis),edge(S,T,[weight=100]),_) :- !.
edge_to_gterm(e(S,T,R),GT,Opts) :-
        GT=edge(S,T,[label=RL|Opts]),
        node_label(R,RL).
node_to_gterm(N,GT,Opts) :-
        GT=node(N,[label=NL|Opts]),
        node_label(N,NL).

node_label(N,NL) :- labelAnnotation_value(N,NL),!.
node_label(N,N) :- atom(N),!.
node_label(N,A) :- term_to_atom(N,A).



edges_to_gterms(EL,GTerms,Opts) :-
        findall(GT,(member(E,EL),
                    edge_to_gterm(E,GT,Opts)),
                GTerms).
nodes_to_gterms(NL,GTerms,Opts) :-
        findall(GT,(member(N,NL),
                    node_to_gterm(N,GT,Opts)),
                GTerms).


desc_gterm(D,graph(g,[],GTerms)) :-
        desc_edgeset(D,EL),
        findall(GTerm,
                (   member(E,EL),
                    edge_gterm(E,GTerm)),
                GTerms).

split_set(L1,L2,L3,L1_uniq,L2_uniq) :-
        ord_intersection(L1,L2,L3),
        ord_subtract(L1,L3,L1_uniq),
        ord_subtract(L2,L3,L2_uniq).


d_pair_gterm(D1,D2,G,Opts) :-
        desc_edgeset(D1,EL1),
        desc_edgeset(D2,EL2),
        append(EL1,EL2,EL_Union),
        split_set(EL1,EL2,EL_Intersection,EL1_Uniq,EL2_Uniq),
        edges_to_nodes(EL1,NL1),
        edges_to_nodes(EL2,NL2),
        append(NL1,NL2,NL_Union),
        fill_edges(NL_Union,EL_Union,EL_Ont,Opts),
        split_set(NL1,NL2,NL_Intersection,NL1_Uniq,NL2_Uniq),
        edges_to_gterms(EL1_Uniq,EGTerms1,[color=red]),
        edges_to_gterms(EL2_Uniq,EGTerms2,[color=blue]),
        edges_to_gterms(EL_Intersection,EGTerms_Intersection,[color=green,penwidth=5,weight=50]),
        edges_to_gterms(EL_Ont,EGTerms_Ont,[color=grey,style=dashed,weight=100]),
        nodes_to_gterms(NL1_Uniq,NGTerms1,[color=red]),
        nodes_to_gterms(NL2_Uniq,NGTerms2,[color=blue]),
        nodes_to_gterms(NL_Intersection,NGTerms_Intersection,[fillcolor=green,style=filled]),
        flatten([EGTerms1,EGTerms2,EGTerms_Intersection,EGTerms_Ont,
                 NGTerms1,NGTerms2,NGTerms_Intersection],GTerms),
        gterms_add_ontol_links(NL_Union,graph(g,[],GTerms),G).

gterms_add_ontol_links(Nodes,graph(GN,GProps,GTermsIn),GOut) :-
        findall(e(N,T,declaredIn),(member(N,Nodes),
                                   node_ont(N,T)),
                EL),
        setof(O,N^member(e(N,O,declaredIn),EL),Onts),
        nodes_to_gterms(Onts,NTerms,[]),
        edges_to_gterms(EL,ETerms,[]),
        flatten([NTerms,ETerms,GTermsIn],GTermsNew),
        graph_nest(graph(GN,GProps,GTermsNew),GOut,[declaredIn]).

node_ont(N,O) :- ontologyAxiom(O,class(N)),!.
node_ont(_,'x').




fill_edges(_,_,[],Opts) :-
        \+ member(fill_edges(true),Opts),
        !.
fill_edges(Nodes,Edges,NewEdgesNR,_) :-
        findall(e(S,T,R),
                (   member(S,Nodes),
                    member(T,Nodes),
                    S\=T,
                    \+ member(e(S,T,_),Edges),
                    \+ member(e(T,S,_),Edges),
                    class_ancestor_over(S,T,RL),
                    collapse_composite_edge_label(RL,R)),
                NewEdges_1),
        sort(NewEdges_1,NewEdges),         append(Edges,NewEdges,AllEdges),
        maplist(invert_edge,AllEdges,AllEdgesInv),
        append(AllEdges,AllEdgesInv,AllEdgesSymm),
                findall(E,
                (   member(E,NewEdges),
                    E=e(S,T,R),
                    \+ ((member(e(S,Z,R),AllEdgesSymm),
                         member(e(Z,T,R),AllEdgesSymm)
                        ))),
                NewEdgesNR).

invert_edge(e(S,T,R),e(T,S,inverseOf(R))).


collapse_composite_edge_label(RL,RC) :-
        findall(Tok,(member(_-R,RL),sformat('~q',[R],Tok)),Toks),
        reverse(Toks,RToks),
        concat_atom(RToks,'->',RC).




edge_to_node(e(S,_,_),S).
edge_to_node(e(_,T,_),T).

edges_to_nodes(EL,Nodes) :- setof(N,E^(member(E,EL),edge_to_node(E,N)),Nodes).


display_object(N) :-
        labelAnnotation_value(Ob,N),
        !,
        display_object(Ob).
display_object(Ob) :-       display_individual(Ob), !.
display_object(Ob) :-       display_desc(Ob), !.

object_gterm(I,G) :-
        individual_msc(I,D),
        !,
        desc_gterm(D,G).
object_gterm(D,G) :- desc_gterm(D,G).

display_individual(I) :-
        object_gterm(I,G),
        graph_display(G,open).

display_desc(D) :-
        object_gterm(D,G),
        graph_display(G,open).

obj_desc(X,D) :- individual_msc(X,D),!.
obj_desc(D,D2) :-
                setof(P,subClassOf(D,P),PL),
        !,
        D2=intersectionOf([D|PL]).
obj_desc(D,D).

display_object_pair(N1,N2,Opts) :-
        labelAnnotation_value(X1,N1),
        labelAnnotation_value(X2,N2),
        !,
        display_object_pair(X1,X2,Opts).
display_object_pair(X1,X2,Opts) :-
        obj_desc(X1,D1),
        obj_desc(X2,D2),
        d_pair_gterm(D1,D2,G,Opts),
        graph_display(G,open).









:- use_module(owl2_io).
:- use_module(owl2_lcs).
:- use_module(owl2_reasoner).
:- use_module(owl2_model).
:- use_module(owl2_util).
:- use_module(owl2_plsyn).
:- use_module(owl2_graph_reasoner).

:- begin_tests(owl2_lcs,[setup(init_axioms),cleanup(retract_all_axioms)]).

init_axioms :-
            load_axioms('testfiles/lctest.plsyn',plsyn),
            assume_entity_declarations.




test(cs, [forall(cs_test_case(A,B,ExpectedResult)),
          true(Result = ExpectedResult)]) :-
        run_cs_test(A,B,ExpectedResult,Result).

test(lcs, [forall(lcs_test_case(A,B,ExpectedResult)),
          true(Result = ExpectedResult)]) :-
        run_lcs_test(A,B,Result).

test(pivot1) :-
        equivalent_to(probe_2,X),
        findall(Y,description_pivot(X,Y),Ys)
        maplist(writeln,Ys),
        length(Ys,6).

test(pivot2) :-
        description_pivot(someValuesFrom(p,x),intersectionOf(L)),
        select(x,L,[someValuesFrom(inverseOf(p),'owl:Thing')]).

test(lcs_i) :-
        run_lcs_test(o1,o2,_).

test(sub) :-
        owl2_lcs:is_subsumed_by_chk(intersectionOf([someValuesFrom(has_part,
                                                                   intersectionOf([axon_terminal,someValuesFrom(has_quality,degenerated)])),
                                                    someValuesFrom(part_of,hippocampus)]),
                                    someValuesFrom(has_part,intersectionOf([axon_terminal,someValuesFrom(has_quality,degenerated)])),
                                    []
                                   ).



run_lcs_test(A,B,LCS) :-
        plsyn_owl(A,Ax),
        plsyn_owl(B,Bx),
        class_pair_least_common_subsumer(Ax,Bx,LCSx,[]),
        plsyn_owl(LCS,LCSx),
        debug(test,'lcs(~w,~w) = ~w',[A,B,LCS]).

run_cs_test(A,B,ExpectedResult,LCS) :-
        plsyn_owl(A,Ax),
        plsyn_owl(B,Bx),
        class_pair_common_subsumer_ext(Ax,Bx,LCSx,[]),
        plsyn_owl(LCS,LCSx),
        debug(test,'lcs(~w,~w) = ~w',[A,B,LCS]),
        LCS = ExpectedResult,
        !.

lcs_test_case(small_green_left_eye,
              deformed_blue_right_eye,
              eye and has_quality some color and has_quality some morphology).

lcs_test_case(axon_terminals_degenerated_in_ca2,
              axon_terminals_degenerated_in_ca3,
              has_part some (axon_terminal and has_quality some degenerated) and part_of some hippocampus).

lcs_test_case(organism and has_part some axon_terminals_degenerated_in_ca2,
              organism and has_part some axon_terminals_degenerated_in_ca3,
              organism and has_part some (axon_terminal and has_quality some degenerated) and overlaps some hippocampus).

lcs_test_case(organism and bearer_of some axon_terminals_degenerated_in_ca2,
              organism and bearer_of some axon_terminals_degenerated_in_ca3,
              z).


cs_test_case(organism and has_part some axon_terminals_degenerated_in_ca2,
             organism and has_part some axon_terminals_degenerated_in_ca2,
             organism and has_part some axon_terminals_degenerated_in_ca2).


:- end_tests(owl2_lcs).



:- begin_tests(owl2_lcs2,[setup(init_axioms),cleanup(retract_all_axioms)]).

init_axioms :-
            load_axioms('testfiles/lctest2.plsyn',plsyn),
            assume_entity_declarations.



test(lcs_i) :-
        run_lcs_test(o1,o2,_).


run_lcs_test(A,B,LCS) :-
        plsyn_owl(A,Ax),
        plsyn_owl(B,Bx),
        class_pair_least_common_subsumer(Ax,Bx,LCSx,[]),
        plsyn_owl(LCS,LCSx),
        debug(test,'lcs(~w,~w) = ~w',[A,B,LCS]).



:- end_tests(owl2_lcs2).


:- module(owl2_manchester_parser,
          [
           owl_parse_manchester_syntax_file/1,
           owl_parse_manchester_syntax_file/2,
	   owl_parse_manchester_expression/2,
	   owl_parse_manchester_frame/2
           ]).

:- use_module(owl2_model,[assert_axiom/1]).

:- multifile owl2_io:load_axioms_hook/3.
owl2_io:load_axioms_hook(File,mansyn,Opts) :-
        owl_parse_manchester_syntax_file(File,Opts).
owl2_io:load_axioms_hook(File,owlms,Opts) :-
        owl_parse_manchester_syntax_file(File,Opts).

owl_parse_manchester_syntax_file(File) :-
        owl_parse_manchester_syntax_file(File,[]).

owl_parse_manchester_syntax_file(File,_Opts) :-
        read_file_to_codes(File,Codes,[]),
	codes_tokens_filtered(Codes,Tokens),
	ontologyDocument( Ont, Tokens, [] ),
	process_ontdoc(Ont).

owl_parse_manchester_expression(A,X) :-
	atom_codes(A,L),
	codes_tokens_filtered(L,Toks),
	description(X,Toks,[]).

owl_parse_manchester_frame(A,Axioms) :-
	atom_codes(A,L),
	codes_tokens_filtered(L,Toks),
	frame(X,Toks,[]),
	process_frame(X,'',Axioms).

process_ontdoc( NSL-ontology(O,_L1,_L2,Frames) ) :-
	process_frames(Frames,O-NSL,Axioms),
	maplist(assert_axiom,Axioms).

process_frames([],_,[]).
process_frames([F|Fs],O,Axioms) :-
	!,
	process_frame(F,O,Axioms1),
	process_frames(Fs,O,Axioms2),
	append(Axioms1,Axioms2,Axioms).

process_frame(frame(Type,Name,Props),O,[Unary|Axioms]) :-
	!,
	expand_curie(Name,O,IRI),
	Unary =.. [Type,IRI],
	assert_axiom(Unary),
	process_properties(Props,IRI,Type,O,Axioms).
process_frame(A,_,[A]).

process_properties([],_,_,_,[]).
process_properties([Prop|Props],IRI,Type,O,Axioms) :-
	process_property(Prop,IRI,Type,O,Axioms1),
	process_properties(Props,IRI,Type,O,Axioms2),
	append(Axioms1,Axioms2,Axioms).

process_property(characteristics=CL,IRI,Type,O,Axioms) :-
	!,
	findall(Axiom,(member(C,CL),
		       process_characteristic(C,IRI,Type,O,Axiom)),
		Axioms).

process_property(P=VL,IRI,Type,O,Axioms) :-
	!,
	findall(Axiom,(member(V,VL),
		       process_slot_value(P,V,IRI,Type,O,Axiom)),
		Axioms).

process_characteristic(C,IRI,_Type,_,Unary) :-
	slot_predicate(C,P),
	Unary =.. [P,IRI].
		
			
process_slot_value(disjointWith,V,IRI,objectProperty,O,Ax) :-
	!,
	expand_curie(V,O,VX),
	Ax = disjointProperties([IRI,VX]).
process_slot_value(inverseOf,V,IRI,_,O,Ax) :-
	!,
	expand_curie(V,O,VX),
	Ax = inverseProperties(IRI,VX).
process_slot_value(S,V,IRI,T,O,Ax) :-
	        format(user_error,'guessing for: ~w~n',[S-T]),
	expand_curie(V,O,VX),
	Ax =.. [S,IRI,VX].

expand_curie(Name,O-_NSL,IRI) :-
	concat_atom([O,'#',Name],IRI),
        !.                      expand_curie(X,_,X).

slot_predicate(S,P) :-
	sub_atom(S,0,1,_,C1),
	C1 @>= 'A',
	C1 @=< 'Z',
	!,
	downcase_atom(C1,C2),
	sub_atom(S,1,_,0,S2),
	atom_concat(C2,S2,P).
slot_predicate(S,S).


codes_tokens_filtered(Codes,Tokens2) :-
	codes_tokens(Codes,[],Tokens),
	findall(T,(member(T,Tokens),T\=''),Tokens2).

codes_tokens([],Buf,[A]) :-
	!,
	atom_rcodes(A,Buf).
codes_tokens([C|Cs],Buf,[A|Toks]) :-
	ws(C),
	!,
	atom_rcodes(A,Buf),
	codes_tokens(Cs,[],Toks).
codes_tokens([C|Cs],Buf,[A1,A2|Toks]) :-
	sep(C),
	!,
	atom_rcodes(A1,Buf),
	atom_codes(A2,[C]),
	codes_tokens(Cs,[],Toks).
codes_tokens([C|Cs],Buf,Toks) :-
	codes_tokens(Cs,[C|Buf],Toks).

atom_rcodes(A,L) :-
	reverse(L,RL),
	atom_codes(A,RL).

ws(0' ).
ws(0'\n).
ws(0'\r).
sep(0',).
sep(0'().
sep(0')).







zeroOrMore(F,[X|L],In,Rest):-
        Head =.. [F,X,In,Rest1],
        Head,
        !,
        zeroOrMore(F,L,Rest1,Rest).
zeroOrMore(_,[],In,In):- !.

zeroOrMore(Delim,F,[X|L],[Delim|In],Rest):-
        Head =.. [F,X,In,Rest1],
        debug(dcg,'h=~w',[Head]),
        Head,
        !,
        zeroOrMore(Delim,F,L,Rest1,Rest).
zeroOrMore(_,_,[],In,In):- !.

oneOrMore(F,[X|L],In,Rest):-
        Head =.. [F,X,In,Rest1],
        Head,
        !,
        zeroOrMore(F,L,Rest1,Rest).

oneOrMore(Delim,F,L,In,Rest):-
        zeroOrMore(Delim,F,L,In,Rest),
        L\=[].

        


full_IRI(IRI) --> [X],{atom_concat('<',Y,X),atom_concat(IRI,'>',Y)}.





prefix(P) --> [P].


curie(X) --> [X],{X\='('}.

iri(X) --> full_IRI(X).
iri(X) --> curie(X).


classIRI(X) --> iri(X).

datatype(X) --> datatypeIRI(X).
datatype(integer) --> [integer].
datatype(decimal) --> [decimal].
datatype(float) --> [float].
datatype(string) --> [string].

datatypeIRI(X) --> iri(X).

objectPropertyIRI(X) --> iri(X).

dataPropertyIRI(X) --> iri(X).

annotationProperty(X) --> iri(X).

individual(X) --> individualIRI(X) ; nodeID(X).

individualIRI(X) --> iri(X).

nodeID(X) --> [X]. 












annotations(L) --> ['Annotations:'], annotationAnnotatedList(L).

annotation(P-T) -->  annotationPropertyIRI( P),annotationTarget(T).


annotationTarget(T) --> nodeID(T) ; iri(T) ; literal(T).

ontologyDocument( NSL-O ) --> zeroOrMore(namespace,NSL),ontology(O).

namespace(P-NS) --> ['Namespace:'], prefix( P), full_IRI(NS).
namespace(NS) --> ['Namespace:'], full_IRI(NS).

ontology(ontology(X,Imports,AL,Frames)) --> ['Ontology:'], ontologyIRI( X), !, zeroOrMore(import,Imports),zeroOrMore(annotations,AL),zeroOrMore(frame,Frames).
ontology(ontology(Imports,AL,Frames)) --> ['Ontology:'], !, zeroOrMore(import,Imports),zeroOrMore(annotations,AL),zeroOrMore(frame,Frames).
ontologyIRI(X-V) --> iri(X),versionIRI(V). ontologyIRI(X) --> iri(X).

ontologyIRI(X) --> iri(X).

versionIRI( X) --> iri(X).

import(X) --> ['Import:'], iri(X).



frame(X) --> classFrame(X) ; objectPropertyFrame(X) ; dataPropertyFrame(X) ;
 annotationPropertyFrame(X) ; individualFrame(X) ; misc(X).


objectPropertyExpression(OPE) --> objectPropertyIRI(OPE) ;inverseObjectProperty(OPE).

inverseObjectProperty(inverseOf(P)) --> ['inverse'], !, objectPropertyIRI(P).

dataPropertyExpression(P) --> dataPropertyIRI(P).

dataRange(unionOf([C1,C2|CL])) --> dataConjunction(C1),[or],!,dataConjunction(C2),zeroOrMore(or,dataConjunction(CL)).
dataRange(DR) --> dataConjunction(DR).

dataConjunction(intersectionOf([D1,D2|DL])) --> primary(D1),[and],!,primary(D2),zeroOrMore(primary,DL).
dataConjunction(D) --> primary(D).

dataPrimary(complementOf(A)) --> dataAtomic(A).
dataPrimary(A) --> dataAtomic(A).

dataAtomic(A) --> datatype(A).
dataAtomic([X1|XL]) --> ['{'],!, literal(X1),zeroOrMore(',',literal,XL),['}'].
dataAtomic(A) --> datatypeRestriction(A).
dataAtomic(A) --> ['('],dataRange(A),[')'].

datatypeRestriction(X-F-V-FVs) --> datatype(X),['['],!, facet( F),restrictionValue(V), zeroOrMore(',',facetRestrictionValue(FVs)),[']'].
facetRestrictionValue(F-V) --> facet(F),restrictionValue(V).
                                                                                        

restrictionValue(V) --> literal(V).



description(unionOf([C|CL])) --> conjunction(C), oneOrMore(or,conjunction,CL), !.
description(D) --> conjunction(D).

conjunction(intersectionOf([Genus,D|DL])) --> classIRI(Genus), [that], !, optNegRestriction(D), zeroOrMore(and, optNegRestriction,DL).
conjunction(intersectionOf([D|DL])) --> primary(D),oneOrMore('and',conjunction,DL), !.
conjunction(D) --> primary(D).

primary(R) --> optNegRestriction(R).
primary(complementOf(A)) --> [not],!,atomic(A).
primary(A) --> atomic(A).

optNegRestriction(complementOf(R)) --> [not],!,restriction(R).
optNegRestriction(R) --> restriction(R).


restriction(someValuesFrom(OPE,C)) --> objectPropertyExpression(OPE),[some],!,primary(C).
restriction(allValuesFrom(OPE,C)) --> objectPropertyExpression(OPE),[only],!,primary(C).
restriction(hasValue(OPE,I)) --> objectPropertyExpression(OPE),[value],!,individual(I).
restriction(hasSelf(OPE)) --> objectPropertyExpression(OPE),['Self'],!.
restriction(minCardinality(Card,OPE,CE)) --> objectPropertyExpression(OPE),[min],!,nni(Card),primary(CE).
restriction(minCardinality(Card,OPE)) --> objectPropertyExpression(OPE),[min],!,nni(Card).
restriction(maxCardinality(Card,OPE,CE)) --> objectPropertyExpression(OPE),[max],!,nni(Card),primary(CE).
restriction(maxCardinality(Card,OPE)) --> objectPropertyExpression(OPE),[max],!,nni(Card).
restriction(exactCardinality(Card,OPE,CE)) --> objectPropertyExpression(OPE),[exactly],!,nni(Card),primary(CE).
restriction(exactCardinality(Card,OPE)) --> objectPropertyExpression(OPE),[exactly],!,nni(Card).

restriction(someValuesFrom(OPE,C)) --> dataPropertyExpression(OPE),[some],!,dataPrimary(C).
restriction(allValuesFrom(OPE,C)) --> dataPropertyExpression(OPE),[only],!,dataPrimary(C).
restriction(hasValue(OPE,I)) --> dataPropertyExpression(OPE),[value],!,individual(I).
restriction(hasSelf(OPE)) --> dataPropertyExpression(OPE),['Self'],!.
restriction(minCardinality(Card,OPE,CE)) --> dataPropertyExpression(OPE),[min],!,nni(Card),dataPrimary(CE).
restriction(minCardinality(Card,OPE)) --> dataPropertyExpression(OPE),[min],!,nni(Card).
restriction(maxCardinality(Card,OPE,CE)) --> dataPropertyExpression(OPE),[max],!,nni(Card),dataPrimary(CE).
restriction(maxCardinality(Card,OPE)) --> dataPropertyExpression(OPE),[max],!,nni(Card).
restriction(exactCardinality(Card,OPE,CE)) --> dataPropertyExpression(OPE),[exactly],!,nni(Card),dataPrimary(CE).
restriction(exactCardinality(Card,OPE)) --> dataPropertyExpression(OPE),[exactly],!,nni(Card).

nni(N) --> [A],{atom_number(A,N)},!.


atomic(X) --> classIRI(X).
atomic([X|L]) --> ['{'],!, individual(X),!,zeroOrMore(',',individual,L),['}'].
atomic(X) --> ['('], !, description(X), [')'].

annotationAnnotatedList([A|L]) --> annotatedAnnotation(A),!,zeroOrMoreA(',',annotatedAnnotation,L). descriptionAnnotatedList([D|L]) --> annotatedDescription(D),!,zeroOrMore(',',description,L). objectPropertyCharacteristicAnnotatedList([PC|L]) --> annotatedObjectPropertyCharacteristic(PC),!,zeroOrMore(',',annotatedObjectPropertyCharacteristic,L).
objectPropertyExpressionAnnotatedList([PC|L]) --> annotatedObjectPropertyExpression(PC),!,zeroOrMore(',',annotatedObjectPropertyExpression,L).

annotatedObjectPropertyCharacteristic(X) --> objectPropertyCharacteristic(X). annotatedObjectPropertyExpression(X) --> objectPropertyExpression(X). 

description2List([D|L]) --> description(D),zeroOrMore(',',description,L).

annotatedDescription(A-D) --> annotations(A),description(D).
annotatedDescription(D) --> description(D).



classFrame( frame(class,C,EL) ) --> ['Class:'],!,classIRI(C),zeroOrMore(classFrameElement,EL).
classFrameElement(annotation=AL) --> ['Annotations:'],!,annotationAnnotatedList(AL).
classFrameElement(subClassOf=AL) --> ['SubClassOf:'],!,descriptionAnnotatedList(AL).
classFrameElement(equivalentTo=AL) --> ['EquivalentTo:'],!,descriptionAnnotatedList(AL).
classFrameElement(disjointWith=AL) --> ['DisjointWith:'],!,descriptionAnnotatedList(AL).
classFrameElement(disjointUnionOf=AL) --> ['DisjointUnionOf:'],!,descriptionAnnotatedList(AL).

classFrameElement(annotation=AL) --> ['Annotations:'],!,annotationAnnotatedList(AL).
classFrameElement(types=AL) --> ['Types:'],!,descriptionAnnotatedList(AL).
classFrameElement(facts=AL) --> ['Facts:'],!,factAnnotatedList(AL).
classFrameElement(sameAs=AL) --> ['SameAs:'],!,individualAnnotatedList(AL).
classFrameElement(differentFrom=AL) --> ['DifferentFrom:'],!,individualAnnotatedList(AL).



objectPropertyFrame( frame(objectProperty,C,EL) ) --> ['ObjectProperty:'],!,objectPropertyIRI(C),zeroOrMore(objectPropertyFrameElement,EL).
objectPropertyFrameElement(domain=AL) --> ['Domain:'],!,descriptionAnnotatedList(AL).
objectPropertyFrameElement(range=AL) --> ['Range:'],!,descriptionAnnotatedList(AL).
objectPropertyFrameElement(characteristics=AL) --> ['Characteristics:'],!,objectPropertyCharacteristicAnnotatedList(AL).
objectPropertyFrameElement(subPropertyOf=AL) --> ['SubPropertyOf:'],!,objectPropertyExpressionAnnotatedList(AL).
objectPropertyFrameElement(equivalentTo=AL) --> ['EquivalentTo:'],!,objectPropertyExpressionAnnotatedList(AL).
objectPropertyFrameElement(disjointWith=AL) --> ['DisjointWith:'],!,objectPropertyExpressionAnnotatedList(AL).
objectPropertyFrameElement(inverseOf=AL) --> ['InverseOf:'],!,objectPropertyExpressionAnnotatedList(AL).
objectPropertyFrameElement(subPropertyChain=[As,OPE1,OPE2|OPEs]) --> ['SubPropertyChain:'],!,annotations(As),
        objectPropertyExpression(OPE1),[o],objectPropertyExpression(OPE2),[o],zeroOrMore(o,objectPropertyExpression,OPEs).

objectPropertyCharacteristic(P) --> [P],{objectPropertyCharacteristic(P)}.

objectPropertyCharacteristic('Functional').
objectPropertyCharacteristic('InverseFunctional').
objectPropertyCharacteristic('Reflexive').
objectPropertyCharacteristic('Irreflexive').
objectPropertyCharacteristic('Symmetric').
objectPropertyCharacteristic('Asymmetric').
objectPropertyCharacteristic('Transitive').


dataPropertyFrame( frame(dataProperty,C,EL) ) --> ['DataProperty:'],!,dataPropertyIRI(C),zeroOrMore(dataPropertyFrameElement,EL).
dataPropertyFrameElement(domain=AL) --> ['Domain:'],!,descriptionAnnotatedList(AL).
dataPropertyFrameElement(range=AL) --> ['Range:'],!,descriptionAnnotatedList(AL).
dataPropertyFrameElement(characteristics=AL) --> ['Characteristics:'],!,dataPropertyCharacteristicAnnotatedList(AL).
dataPropertyFrameElement(subPropertyOf=AL) --> ['SubPropertyOf:'],!,dataPropertyExpressionAnnotatedList(AL).
dataPropertyFrameElement(equivalentTo=AL) --> ['EquivalentTo:'],!,dataPropertyExpressionAnnotatedList(AL).
dataPropertyFrameElement(disjointWith=AL) --> ['DisjointWith:'],!,dataPropertyExpressionAnnotatedList(AL).

dataPropertyCharacteristic(P) --> [P],{dataPropertyCharacteristic(P)}.
dataPropertyCharacteristic('Functional').


annotationPropertyFrame( frame(annotationProperty,C,EL) ) --> ['AnnotationProperty:'],!,annotationPropertyIRI(C),zeroOrMore(annotationPropertyFrameElement,EL).
annotationPropertyFrameElement(domain=AL) --> ['Domain:'],!,descriptionAnnotatedList(AL).
annotationPropertyFrameElement(range=AL) --> ['Range:'],!,descriptionAnnotatedList(AL).
annotationPropertyFrameElement(subPropertyOf=AL) --> ['SubPropertyOf:'],!,annotationPropertyExpressionAnnotatedList(AL).


individualFrame(I-EL) --> ['Individual:'],!, individual(I),zeroOrMore(individualFrameElement,EL).


fact(not(F)) --> [not],(objectPropertyFact(F) ;  dataPropertyFact(F)).
fact(F) --> (objectPropertyFact(F) ;  dataPropertyFact(F)).


objectPropertyFact(P-I) --> objectPropertyIRI(P),individual(I).

dataPropertyFact( P-L) --> dataPropertyIRI( P), literal(L).


misc(A-equivalentClasses(DL)) --> ['EquivalentClasses:'],!,annotations(A),description2List(DL).
misc(equivalentClasses(DL)) --> ['EquivalentClasses:'],!,description2List(DL).
misc(A-disjointClasses(DL)) --> ['DisjointClasses:'],!,annotations(A),description2List(DL).
misc(disjointClasses(DL)) --> ['DisjointClasses:'],!,description2List(DL).
misc(A-equivalentProperties(DL)) --> ['EquivalentProperties:'],!,annotations(A),description2List(DL).
misc(equivalentProperties(DL)) --> ['EquivalentProperties:'],!,description2List(DL).






:- use_module(owl2_model).
:- use_module(owl2_manchester_parser).

:- begin_tests(frame,[]).

:- style_check(-atom).

tf('Class: foo').
tf('
  Class: foo
  SubClassOf: bar').



test(frame) :-
	forall(tf(A),
	       (   owl_parse_manchester_frame(A,X),
		   writeln(X))).




:- end_tests(frame).

:- begin_tests(expr,[]).

:- style_check(-atom).

t('r some (
   ( a and (r some (b and r some c))) or (z and (r some (y and r some z))))').
t('z and x').
t('foo and bar').
t('foo or bar').
t('foo and (r some bar)').
t('
 BFO_0000051 some (
GO_0030425 and BFO_0000051 some (
   GO_0042734 and BFO_0000050 some (
      GO_0045202 and BFO_0000050 some ?Y)))
 ').
t('RO_0002132 some (
   CARO_0001001 and (
      BFO_0000051 some (
         GO_0045211 and BFO_0000050 some (
            GO_0045202 and BFO_0000050 some ?Y
         ))) or (
      BFO_0000051 some (
         GO_0045211 and BFO_0000050 some (
            GO_0045202 and BFO_0000050 some ?Y))))').




test(expr) :-
	forall(t(X),
	       (   owl_parse_manchester_expression(X,Y),
		   writeln(Y))).




:- end_tests(expr).


:- begin_tests(owl2_manchester_parser,[setup(load_msfile)]).

load_msfile :-
        owl_parse_manchester_syntax_file('testfiles/rnao.owlms').

test(loaded) :-
        \+ \+ ontology(_).

test(subclasses) :-
        findall(A-B,subClassOf(A,B),Axs),
                Axs\=[].

test(expected) :-
        forall(expected(Ax),
               Ax).

expected(objectProperty('http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#locatedIn')).
expected(subClassOf('http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#Wine', 'http://www.w3.org/TR/2003/PR-owl-guide-20031209/food#PotableLiquid')).
expected(subClassOf(intersectionOf(['http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#Loire',
                                    hasValue('http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#locatedIn',
                                             'http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#ToursRegion')]),
                    hasValue('http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#madeFromGrape',
                             'http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#CheninBlancGrape'))).


:- end_tests(owl2_manchester_parser).




:- module(owl2_metamodel,
	  [
           owlpredicate_typed/2,
           owlpredicate_arguments/2
	  ]).

:- use_module(library(lists)). 



owlpredicate_typed(intersectionOf,objectIntersectionOf).
owlpredicate_typed(intersectionOf,dataIntersectionOf).
owlpredicate_typed(someValuesFrom,objectSomeValuesFrom).
owlpredicate_typed(someValuesFrom,dataSomeValuesFrom).
owlpredicate_typed(allValuesFrom,objectAllValuesFrom).
owlpredicate_typed(allValuesFrom,dataAllValuesFrom).
owlpredicate_typed(complementOf,objectComplementOf).
owlpredicate_typed(complementOf,dataComplementOf).
owlpredicate_typed(unionOf,objectUnionOf).
owlpredicate_typed(unionOf,dataUnionOf).
owlpredicate_typed(oneOf,objectOneOf).
owlpredicate_typed(oneOf,dataOneOf).
owlpredicate_typed(hasValue,objectHasValue).
owlpredicate_typed(hasValue,dataHasValue).
owlpredicate_typed(minCardinality,objectMinCardinality).
owlpredicate_typed(minCardinality,dataMinCardinality).
owlpredicate_typed(maxCardinality,objectMaxCardinality).
owlpredicate_typed(maxCardinality,dataMaxCardinality).
owlpredicate_typed(exactCardinality,objectExactCardinality).
owlpredicate_typed(exactCardinality,dataExactCardinality).

owlpredicate_typed(functionalProperty,functionalObjectProperty).
owlpredicate_typed(functionalProperty,functionalDataProperty).

owlpredicate_typed(subPropertyOf,subObjectPropertyOf).
owlpredicate_typed(subPropertyOf,subDataPropertyOf).
owlpredicate_typed(subPropertyOf, subAnnotationPropertyOf).

owlpredicate_typed(disjointProperties,disjointObjectProperties).
owlpredicate_typed(disjointProperties,disjointDataProperties).
owlpredicate_typed(equivalentProperties,equivalentObjectProperties).
owlpredicate_typed(equivalentProperties,equivalentDataProperties).

owlpredicate_typed(propertyDomain,objectPropertyDomain).
owlpredicate_typed(propertyDomain,dataPropertyDomain).
owlpredicate_typed(propertyRange,objectPropertyRange).
owlpredicate_typed(propertyRange,dataPropertyRange).

owlpredicate_typed(propertyAssertion,objectPropertyAssertion).
owlpredicate_typed(propertyAssertion,dataPropertyAssertion).

owlpredicate_typed(datatype, datatypeRestriction).
owlpredicate_typed(negativePropertyAssertion, negativeObjectPropertyAssertion).
owlpredicate_typed(propertyRange, annotationPropertyRange).
owlpredicate_typed(propertyDomain, annotationPropertyDomain).
owlpredicate_typed(negativePropertyAssertion, negativeDataPropertyAssertion).


owlpredicate_arguments(objectIntersectionOf,[set(classExpression)]).
owlpredicate_arguments(dataIntersectionOf,[set(dataExpression)]).
owlpredicate_arguments(objectSomeValuesFrom,[objectPropertyExpression,classExpression]).
owlpredicate_arguments(dataSomeValuesFrom,[dataPropertyExpression,dataExpression]).
owlpredicate_arguments(objectAllValuesFrom,[objectPropertyExpression,classExpression]).
owlpredicate_arguments(dataAllValuesFrom,[dataPropertyExpression,dataExpression]).
owlpredicate_arguments(objectComplementOf,[classExpression]).
owlpredicate_arguments(dataComplementOf,[dataExpression]).
owlpredicate_arguments(objectUnionOf,[set(classExpression)]).
owlpredicate_arguments(dataUnionOf,[set(dataExpression)]).
owlpredicate_arguments(objectOneOf,[set(individual)]).
owlpredicate_arguments(dataOneOf,[set(dataRange)]).
owlpredicate_arguments(objectHasValue,[objectPropertyExpression,individual]). owlpredicate_arguments(dataHasValue,[dataPropertyExpression,dataRange]).
owlpredicate_arguments(objectMinCardinality,[int,objectPropertyExpression,classExpression]). owlpredicate_arguments(objectMinCardinality,[int,objectPropertyExpression]). owlpredicate_arguments(dataMinCardinality,[int,dataPropertyExpression,dataRange]). owlpredicate_arguments(dataMinCardinality,[int,dataPropertyExpression]). owlpredicate_arguments(objectMaxCardinality,[int,objectPropertyExpression,classExpression]). owlpredicate_arguments(objectMaxCardinality,[int,objectPropertyExpression]). owlpredicate_arguments(dataMaxCardinality,[int,dataPropertyExpression,dataRange]). owlpredicate_arguments(dataMaxCardinality,[int,dataPropertyExpression]). owlpredicate_arguments(objectExactCardinality,[int,objectPropertyExpression,classExpression]). owlpredicate_arguments(objectExactCardinality,[int,objectPropertyExpression]). owlpredicate_arguments(dataExactCardinality,[int,dataPropertyExpression,dataRange]). owlpredicate_arguments(dataExactCardinality,[int,dataPropertyExpression]). 
owlpredicate_arguments(inverseOf,[objectProperty]).
owlpredicate_arguments(propertyChain,[list(objectProperty)]).

owlpredicate_arguments(functionalObjectProperty,[objectPropertyExpression]).
owlpredicate_arguments(functionalDataProperty,[dataPropertyExpression]).

owlpredicate_arguments(dataPropertyDomain,[dataPropertyExpression, classExpression]).
owlpredicate_arguments(objectPropertyDomain,[objectPropertyExpression, classExpression]).
owlpredicate_arguments(dataPropertyRange,[dataPropertyExpression, dataRange]).
owlpredicate_arguments(objectPropertyRange,[objectPropertyExpression, classExpression]).

owlpredicate_arguments(subObjectPropertyOf,[objectPropertyExpressionOrChain, objectPropertyExpression]).
owlpredicate_arguments(subDataPropertyOf,[dataPropertyExpression, dataPropertyExpression]).
owlpredicate_arguments(subAnnotationPropertyOf, [annotationProperty, annotationProperty]).

owlpredicate_arguments(disjointObjectProperties,[set(objectPropertyExpression)]).
owlpredicate_arguments(disjointDataProperties,[set(dataPropertyExpression)]).
owlpredicate_arguments(equivalentObjectProperties,[set(objectPropertyExpression)]).
owlpredicate_arguments(equivalentDataProperties,[set(dataPropertyExpression)]).

owlpredicate_arguments(annotationAssertion,[annotationProperty, iri, value]).
owlpredicate_arguments(objectPropertyAssertion,[objectPropertyExpression, individual, individual]).
owlpredicate_arguments(dataPropertyAssertion,[dataPropertyExpression, individual, literal]).

owlpredicate_arguments(negativeObjectPropertyAssertion, [objectPropertyExpression, individual, individual]).
owlpredicate_arguments(annotationPropertyRange, [annotationProperty, iri]).
owlpredicate_arguments(annotationPropertyDomain, [annotationProperty, iri]).
owlpredicate_arguments(negativeDataPropertyAssertion, [dataPropertyExpression, individual, literal]).


:- discontiguous(relation/2,attribute/4).

relation('class',1).
attribute(1,'class','IRI',string).
relation('datatype',1).
attribute(1,'datatype','IRI',string).
relation('objectProperty',1).
attribute(1,'objectProperty','IRI',string).
relation('dataProperty',1).
attribute(1,'dataProperty','IRI',string).
relation('annotationProperty',1).
attribute(1,'annotationProperty','IRI',string).
relation('namedIndividual',1).
attribute(1,'namedIndividual','IRI',string).
relation('subClassOf',2).
attribute(1,'subClassOf','subClass:ClassExpression',string).
attribute(2,'subClassOf','superClass:ClassExpression',string).
relation('equivalentClasses',1).
attribute(1,'equivalentClasses','classExpressions:set(ClassExpression)',string).
relation('disjointClasses',1).
attribute(1,'disjointClasses','classExpressions:set(ClassExpression)',string).
relation('disjointUnion',2).
attribute(1,'disjointUnion','classExpression',string).
attribute(2,'disjointUnion','classExpressions:set(ClassExpression)',list).
relation('subPropertyOf',2).
attribute(1,'subPropertyOf','sub:PropertyExpression',string).
attribute(2,'subPropertyOf','super:ObjectPropertyExpressions',string).
relation('equivalentProperties',1).
attribute(1,'equivalentProperties','propertyExpressions:set(PropertyExpression)',string).
relation('disjointProperties',1).
attribute(1,'disjointProperties','propertyExpressions:set(PropertyExpression)',string).
relation('inverseProperties',2).
attribute(1,'inverseProperties','objectPropertyExpression1:ObjectPropertyExpression',string).
attribute(2,'inverseProperties','objectPropertyExpression2:ObjectPropertyExpression',string).
relation('propertyDomain',2).
attribute(1,'propertyDomain','propertyExpression',string).
attribute(2,'propertyDomain','classExpression',string).
relation('propertyRange',2).
attribute(1,'propertyRange','propertyExpression',string).
attribute(2,'propertyRange','classExpression',string).
relation('functionalProperty',1).
attribute(1,'functionalProperty','propertyExpression',string).
relation('inverseFunctionalProperty',1).
attribute(1,'inverseFunctionalProperty','objectPropertyExpression',string).
relation('reflexiveProperty',1).
attribute(1,'reflexiveProperty','objectPropertyExpression',string).
relation('irreflexiveProperty',1).
attribute(1,'irreflexiveProperty','objectPropertyExpression',string).
relation('symmetricProperty',1).
attribute(1,'symmetricProperty','objectPropertyExpression',string).
relation('asymmetricProperty',1).
attribute(1,'asymmetricProperty','objectPropertyExpression',string).
relation('transitiveProperty',1).
attribute(1,'transitiveProperty','objectPropertyExpression',string).
relation('hasKey',2).
attribute(1,'hasKey','classExpression').
attribute(2,'hasKey','propertyExpression').
relation('sameIndividual',1).
attribute(1,'sameIndividual','individuals:set(Individual)',string).
relation('differentIndividuals',1).
attribute(1,'differentIndividuals','individuals:set(Individual)',string).
relation('classAssertion',2).
attribute(1,'classAssertion','classExpression',string).
attribute(2,'classAssertion','individual',string).
relation('propertyAssertion',3).
attribute(1,'propertyAssertion','propertyExpression',string).
attribute(2,'propertyAssertion','sourceIndividual:Individual',string).
attribute(3,'propertyAssertion','targetIndividual:Individual',string).
relation('negativePropertyAssertion',3).
attribute(1,'negativePropertyAssertion','propertyExpression',string).
attribute(2,'negativePropertyAssertion','sourceIndividual:Individual',string).
attribute(3,'negativePropertyAssertion','targetIndividual:Individual',string).
relation('annotationAssertion',3).
attribute(1,'annotationAssertion','annotationProperty',string).
attribute(2,'annotationAssertion','annotationSubject',string).
attribute(3,'annotationAssertion','annotationValue',string).
relation('ontologyAnnotation',3).
attribute(1,'ontologyAnnotation','ontology',string).
attribute(2,'ontologyAnnotation','annotationProperty',string).
attribute(3,'ontologyAnnotation','annotationValue',string).
relation('axiomAnnotation',3).
attribute(1,'axiomAnnotation','axiom',string).
attribute(2,'axiomAnnotation','annotationProperty',string).
attribute(3,'axiomAnnotation','annotationValue',string).
relation('annotationAnnotation',3).
attribute(1,'annotationAnnotation','annotation',string).
attribute(2,'annotationAnnotation','annotationProperty',string).
attribute(3,'annotationAnnotation','annotationValue',string).
relation('ontology',1).
attribute(1,'ontology','IRI',string).
relation('ontologyAxiom',2).
attribute(1,'ontologyAxiom','ontology',string).
attribute(2,'ontologyAxiom','axiom',string).
relation('ontologyImport',2).
attribute(1,'ontologyImport','ontology',string).
attribute(2,'ontologyImport','IRI',string).
relation('ontologyVersionInfo',2).
attribute(1,'ontologyVersionInfo','ontology',string).
attribute(2,'ontologyVersionInfo','IRI',string).





:- module(owl2_model,
	  [
           entity/1,
           declarationAxiom/1,
           builtin_class/1,
           is_class/1,
           class/1,
           datatype/1,
           property/1,
           objectProperty/1,
           dataProperty/1,
           annotationProperty/1,
           individual/1,
           namedIndividual/1,
           anonymousIndividual/1,
           construct/1,
           axiom/1,
           classAxiom/1,
           subClassOf/2,
           equivalentClasses/1,
           disjointClasses/1,
           disjointUnion/2,
           propertyAxiom/1,
           subPropertyOf/2,
           subObjectPropertyOf/2,
           subDataPropertyOf/2,
           subAnnotationPropertyOf/2,
           equivalentProperties/1,
           equivalentObjectProperties/1,
           equivalentDataProperties/1,
           disjointProperties/1,
           disjointObjectProperties/1,
           disjointDataProperties/1,
           inverseProperties/2,
           propertyDomain/2,
           objectPropertyDomain/2,
           dataPropertyDomain/2,
           annotationPropertyDomain/2,
           propertyRange/2,
           objectPropertyRange/2,
           dataPropertyRange/2,
           annotationPropertyRange/2,
           functionalProperty/1,
           functionalObjectProperty/1,
           functionalDataProperty/1,
           inverseFunctionalProperty/1,
           reflexiveProperty/1,
           irreflexiveProperty/1,
           symmetricProperty/1,
           asymmetricProperty/1,
           transitiveProperty/1,
           hasKey/2,
           fact/1,
           sameIndividual/1,
           differentIndividuals/1,
           classAssertion/2,
           propertyAssertion/3,
           objectPropertyAssertion/3,
           dataPropertyAssertion/3,
           negativePropertyAssertion/3,
           negativeObjectPropertyAssertion/3,
           negativeDataPropertyAssertion/3,
           annotationAssertion/3,
           annotation/1,
           annotation/3,
           ontologyAnnotation/3,
           axiomAnnotation/3,
           annotationAnnotation/3,
           ontology/1,
           ontologyDirective/2,
           ontologyAxiom/2,
           ontologyImport/2,
           ontologyVersionInfo/2,

           axiom_arguments/2,

                      classExpression/1,
           objectIntersectionOf/1, objectUnionOf/1, objectComplementOf/1, objectOneOf/1,
           objectSomeValuesFrom/1, objectAllValuesFrom/1, objectHasValue/1, objectHasSelf/1,
           objectMinCardinality/1, objectMaxCardinality/1, objectExactCardinality/1,
           dataSomeValuesFrom/1, dataAllValuesFrom/1, dataHasValue/1,
           dataMinCardinality/1, dataMaxCardinality/1, dataExactCardinality/1,

           objectPropertyExpression/1,

           dataRange/1,
           dataIntersectionOf/1,
           dataUnionOf/1,
           dataComplementOf/1,
           dataOneOf/1,
           datatypeRestriction/1,

           axiompred/1,

           anyPropertyAssertion/3,
           equivalent_to/2,
           disjoint_with/2,
           labelAnnotation_value/2,

           axiom_directly_about/2,
           axiom_directly_references/2,
           axiom_about/2,
           axiom_references/2,
           axiom_contains_expression/2,
           axiom_contains_expression/3,
           referenced_description/1,

           assert_axiom/1,
           assert_axiom/2,
           retract_axiom/1,
           retract_axiom/2,
           retract_all_axioms/0,
	   owl2_model_init/0,
           consult_axioms/1,
           axiom_type/2,

           valid_axiom/1,
           is_valid_axiom/1

	  ]).


:- use_module(library(lists),[member/2]).

:- multifile axiompred/1.

:- discontiguous(valid_axiom/1).
:- discontiguous(axiompred/1).
:- discontiguous(axiom_arguments/2).

builtin_class('http://www.w3.org/2002/07/owl#Thing').
builtin_class('http://www.w3.org/2002/07/owl#Nothing').
is_class(C) :- class(C).
is_class(C) :- builtin_class(C).





entity(A) :- individual(A).
entity(A) :- property(A).
entity(A) :- class(A).
entity(A) :- datatype(A).
axiom_arguments(entity,[iri]).
valid_axiom(entity(A)) :- subsumed_by([A],[iri]).

declarationAxiom(namedIndividual(A)) :- namedIndividual(A).
declarationAxiom(objectProperty(A)) :- objectProperty(A).
declarationAxiom(dataProperty(A)) :- dataProperty(A).
declarationAxiom(annotationProperty(A)) :- annotationProperty(A).  declarationAxiom(class(A)) :- class(A).
declarationAxiom(datatype(A)) :- datatype(A).
declarationAxiom(ontology(A)) :- ontology(A).

:- dynamic(class/1).
:- multifile(class/1).
axiompred(class/1).
axiom_arguments(class,[iri]).
valid_axiom(class(A)) :- subsumed_by([A],[iri]).

:- dynamic(datatype/1).
:- multifile(datatype/1).
axiompred(datatype/1).
axiom_arguments(datatype,[iri]).
valid_axiom(datatype(A)) :- subsumed_by([A],[iri]).

property(A) :- dataProperty(A).
property(A) :- objectProperty(A).
property(A) :- annotationProperty(A).
axiom_arguments(property,[iri]).
valid_axiom(property(A)) :- subsumed_by([A],[iri]).

:- dynamic(objectProperty/1).
:- multifile(objectProperty/1).
axiompred(objectProperty/1).
axiom_arguments(objectProperty,[iri]).
valid_axiom(objectProperty(A)) :- subsumed_by([A],[iri]).

:- dynamic(dataProperty/1).
:- multifile(dataProperty/1).
axiompred(dataProperty/1).
axiom_arguments(dataProperty,[iri]).
valid_axiom(dataProperty(A)) :- subsumed_by([A],[iri]).

:- dynamic(annotationProperty/1).
:- multifile(annotationProperty/1).
axiompred(annotationProperty/1).
axiom_arguments(annotationProperty,[iri]).
valid_axiom(annotationProperty(A)) :- subsumed_by([A],[iri]).


individual(A) :- anonymousIndividual(A).
individual(A) :- namedIndividual(A).
axiom_arguments(individual,[iri]).
valid_axiom(individual(A)) :- subsumed_by([A],[iri]).

:- dynamic(namedIndividual/1).
:- multifile(namedIndividual/1).
axiompred(namedIndividual/1).
axiom_arguments(namedIndividual,[iri]).
valid_axiom(namedIndividual(A)) :- subsumed_by([A],[iri]).

:- dynamic(anonymousIndividual/1).
:- multifile(anonymousIndividual/1).
axiompred(anonymousIndividual/1).
axiom_arguments(anonymousIndividual,[iri]).
valid_axiom(anonymousIndividual(A)) :- subsumed_by([A],[iri]).

construct(A) :- axiom(A).
construct(A) :- annotation(A).
construct(A) :- ontology(A).
axiom_arguments(construct,[iri]).
valid_axiom(construct(A)) :- subsumed_by([A],[iri]).

axiom(A) :- classAxiom(A).
axiom(A) :- propertyAxiom(A).
axiom(hasKey(A,B)) :- hasKey(A,B).
axiom(A) :- fact(A).
axiom(A) :- declarationAxiom(A).
axiom_arguments(axiom,[axiom]).
valid_axiom(axiom(A)) :- subsumed_by([A],[axiom]).

classAxiom(equivalentClasses(A)) :- equivalentClasses(A).
classAxiom(disjointClasses(A)) :- disjointClasses(A).
classAxiom(subClassOf(A, B)) :- subClassOf(A, B).
classAxiom(disjointUnion(A, B)) :- disjointUnion(A, B).
axiom_arguments(classAxiom,[axiom]).
valid_axiom(classAxiom(A)) :- subsumed_by([A],[axiom]).

:- dynamic(subClassOf/2).
:- multifile(subClassOf/2).
axiompred(subClassOf/2).
axiom_arguments(subClassOf,[classExpression, classExpression]).
valid_axiom(subClassOf(A, B)) :- subsumed_by([A, B],[classExpression, classExpression]).


:- dynamic(equivalentClasses/1).
:- multifile(equivalentClasses/1).
axiompred(equivalentClasses/1).
axiom_arguments(equivalentClasses,[set(classExpression)]).
valid_axiom(equivalentClasses(A)) :- subsumed_by([A],[set(classExpression)]).

:- dynamic(disjointClasses/1).
:- multifile(disjointClasses/1).
axiompred(disjointClasses/1).
axiom_arguments(disjointClasses,[set(classExpression)]).
valid_axiom(disjointClasses(A)) :- subsumed_by([A],[set(classExpression)]).

:- dynamic(disjointUnion/2).
:- multifile(disjointUnion/2).
axiompred(disjointUnion/2).
axiom_arguments(disjointUnion,[classExpression,set(classExpression)]).
valid_axiom(disjointUnion(A,B)) :- subsumed_by([A,B],[classExpression,set(classExpression)]).

propertyAxiom(symmetricProperty(A)) :- symmetricProperty(A).
propertyAxiom(inverseFunctionalProperty(A)) :- inverseFunctionalProperty(A).
propertyAxiom(transitiveProperty(A)) :- transitiveProperty(A).
propertyAxiom(asymmetricProperty(A)) :- asymmetricProperty(A).
propertyAxiom(subPropertyOf(A, B)) :- subPropertyOf(A, B).
propertyAxiom(functionalProperty(A)) :- functionalProperty(A).
propertyAxiom(irreflexiveProperty(A)) :- irreflexiveProperty(A).
propertyAxiom(disjointProperties(A)) :- disjointProperties(A).
propertyAxiom(propertyDomain(A, B)) :- propertyDomain(A, B).
propertyAxiom(reflexiveProperty(A)) :- reflexiveProperty(A).
propertyAxiom(propertyRange(A, B)) :- propertyRange(A, B).
propertyAxiom(equivalentProperties(A)) :- equivalentProperties(A).
propertyAxiom(inverseProperties(A, B)) :- inverseProperties(A, B).
axiom_arguments(propertyAxiom,[axiom]).
valid_axiom(propertyAxiom(A)) :- subsumed_by([A],[axiom]).


:- dynamic(subPropertyOf/2).
:- multifile(subPropertyOf/2).
axiompred(subPropertyOf/2).
axiom_arguments(subPropertyOf,[propertyExpression, objectPropertyExpression]).
valid_axiom(subPropertyOf(A, B)) :- subsumed_by([A, B],[propertyExpression, objectPropertyExpression]).

subObjectPropertyOf(A, B) :- subPropertyOf(A, B),subsumed_by([A, B],[objectPropertyExpressionOrChain, objectPropertyExpression]).
axiom_arguments(subObjectPropertyOf,[objectPropertyExpressionOrChain, objectPropertyExpression]).
valid_axiom(subObjectPropertyOf(A, B)) :- subsumed_by([A, B],[objectPropertyExpressionOrChain, objectPropertyExpression]).

subDataPropertyOf(A, B) :- subPropertyOf(A, B),subsumed_by([A, B],[dataPropertyExpression, dataPropertyExpression]).
axiom_arguments(subDataPropertyOf,[dataPropertyExpression, dataPropertyExpression]).
valid_axiom(subDataPropertyOf(A, B)) :- subsumed_by([A, B],[dataPropertyExpression, dataPropertyExpression]).

subAnnotationPropertyOf(A, B) :- subPropertyOf(A, B),subsumed_by([A, B],[annotationProperty, annotationProperty]).
axiom_arguments(subAnnotationPropertyOf,[annotationProperty, annotationProperty]).
valid_axiom(subAnnotationPropertyOf(A, B)) :- subsumed_by([A, B],[annotationProperty, annotationProperty]).

:- dynamic(equivalentProperties/1).
:- multifile(equivalentProperties/1).
axiompred(equivalentProperties/1).
axiom_arguments(equivalentProperties,[set(propertyExpression)]).
valid_axiom(equivalentProperties(A)) :- subsumed_by([A],[set(propertyExpression)]).

equivalentObjectProperties(A) :- equivalentProperties(A),subsumed_by([A],[set(objectPropertyExpression)]).
axiom_arguments(equivalentObjectProperties,[set(objectPropertyExpression)]).
valid_axiom(equivalentObjectProperties(A)) :- subsumed_by([A],[set(objectPropertyExpression)]).

equivalentDataProperties(A) :- equivalentProperties(A),subsumed_by([A],[set(dataPropertyExpression)]).
axiom_arguments(equivalentDataProperties,[set(dataPropertyExpression)]).
valid_axiom(equivalentDataProperties(A)) :- subsumed_by([A],[set(dataPropertyExpression)]).

:- dynamic(disjointProperties/1).
:- multifile(disjointProperties/1).
axiompred(disjointProperties/1).
axiom_arguments(disjointProperties,[set(propertyExpression)]).
valid_axiom(disjointProperties(A)) :- subsumed_by([A],[set(propertyExpression)]).

disjointObjectProperties(A) :- disjointProperties(A),subsumed_by([A],[set(objectPropertyExpression)]).
axiom_arguments(disjointObjectProperties,[set(objectPropertyExpression)]).
valid_axiom(disjointObjectProperties(A)) :- subsumed_by([A],[set(objectPropertyExpression)]).

disjointDataProperties(A) :- disjointProperties(A),subsumed_by([A],[set(dataPropertyExpression)]).
axiom_arguments(disjointDataProperties,[set(dataPropertyExpression)]).
valid_axiom(disjointDataProperties(A)) :- subsumed_by([A],[set(dataPropertyExpression)]).

:- dynamic(inverseProperties/2).
:- multifile(inverseProperties/2).
axiompred(inverseProperties/2).
axiom_arguments(inverseProperties,[objectPropertyExpression, objectPropertyExpression]).
valid_axiom(inverseProperties(A, B)) :- subsumed_by([A, B],[objectPropertyExpression, objectPropertyExpression]).


:- dynamic(propertyDomain/2).
:- multifile(propertyDomain/2).
axiompred(propertyDomain/2).
axiom_arguments(propertyDomain,[propertyExpression, classExpression]).
valid_axiom(propertyDomain(A, B)) :- subsumed_by([A, B],[propertyExpression, classExpression]).

objectPropertyDomain(A, B) :- propertyDomain(A, B),subsumed_by([A, B],[objectPropertyExpression, classExpression]).
axiom_arguments(objectPropertyDomain,[objectPropertyExpression, classExpression]).
valid_axiom(objectPropertyDomain(A, B)) :- subsumed_by([A, B],[objectPropertyExpression, classExpression]).

dataPropertyDomain(A, B) :- propertyDomain(A, B),subsumed_by([A, B],[dataPropertyExpression, classExpression]).
axiom_arguments(dataPropertyDomain,[dataPropertyExpression, classExpression]).
valid_axiom(dataPropertyDomain(A, B)) :- subsumed_by([A, B],[dataPropertyExpression, classExpression]).

annotationPropertyDomain(A, B) :- propertyDomain(A, B),subsumed_by([A, B],[annotationProperty, iri]).
axiom_arguments(annotationPropertyDomain,[annotationProperty, iri]).
valid_axiom(annotationPropertyDomain(A, B)) :- subsumed_by([A, B],[annotationProperty, iri]).

:- dynamic(propertyRange/2).
:- multifile(propertyRange/2).
axiompred(propertyRange/2).
axiom_arguments(propertyRange,[propertyExpression, classExpression]).
valid_axiom(propertyRange(A, B)) :- subsumed_by([A, B],[propertyExpression, classExpression]).

objectPropertyRange(A, B) :- propertyRange(A, B),subsumed_by([A, B],[objectPropertyExpression, classExpression]).
axiom_arguments(objectPropertyRange,[objectPropertyExpression, classExpression]).
valid_axiom(objectPropertyRange(A, B)) :- subsumed_by([A, B],[objectPropertyExpression, classExpression]).

dataPropertyRange(A, B) :- propertyRange(A, B),subsumed_by([A, B],[dataPropertyExpression, dataRange]).
axiom_arguments(dataPropertyRange,[objectPropertyExpression, dataRange]).
valid_axiom(dataPropertyRange(A, B)) :- subsumed_by([A, B],[objectPropertyExpression, dataRange]).

annotationPropertyRange(A, B) :- propertyRange(A, B),subsumed_by([A, B],[annotationProperty, iri]).
axiom_arguments(annotationPropertyRange,[annotationProperty, iri]).
valid_axiom(annotationPropertyRange(A, B)) :- subsumed_by([A, B],[annotationProperty, iri]).

:- dynamic(functionalProperty/1).
:- multifile(functionalProperty/1).
axiompred(functionalProperty/1).
axiom_arguments(functionalProperty,[propertyExpression]).
valid_axiom(functionalProperty(A)) :- subsumed_by([A],[propertyExpression]).

functionalObjectProperty(A) :- functionalProperty(A),subsumed_by([A],[objectPropertyExpression]).
axiom_arguments(functionalObjectProperty,[objectPropertyExpression]).
valid_axiom(functionalObjectProperty(A)) :- subsumed_by([A],[objectPropertyExpression]).

functionalDataProperty(A) :- functionalProperty(A),subsumed_by([A],[dataPropertyExpression]).
axiom_arguments(functionalDataProperty,[dataPropertyExpression]).
valid_axiom(functionalDataProperty(A)) :- subsumed_by([A],[dataPropertyExpression]).

:- dynamic(inverseFunctionalProperty/1).
:- multifile(inverseFunctionalProperty/1).
axiompred(inverseFunctionalProperty/1).
axiom_arguments(inverseFunctionalProperty,[objectPropertyExpression]).
valid_axiom(inverseFunctionalProperty(A)) :- subsumed_by([A],[objectPropertyExpression]).

:- dynamic(reflexiveProperty/1).
:- multifile(reflexiveProperty/1).
axiompred(reflexiveProperty/1).
axiom_arguments(reflexiveProperty,[objectPropertyExpression]).
valid_axiom(reflexiveProperty(A)) :- subsumed_by([A],[objectPropertyExpression]).

:- dynamic(irreflexiveProperty/1).
:- multifile(irreflexiveProperty/1).
axiompred(irreflexiveProperty/1).
axiom_arguments(irreflexiveProperty,[objectPropertyExpression]).
valid_axiom(irreflexiveProperty(A)) :- subsumed_by([A],[objectPropertyExpression]).

:- dynamic(symmetricProperty/1).
:- multifile(symmetricProperty/1).
axiompred(symmetricProperty/1).
axiom_arguments(symmetricProperty,[objectPropertyExpression]).
valid_axiom(symmetricProperty(A)) :- subsumed_by([A],[objectPropertyExpression]).

:- dynamic(asymmetricProperty/1).
:- multifile(asymmetricProperty/1).
axiompred(asymmetricProperty/1).
axiom_arguments(asymmetricProperty,[objectPropertyExpression]).
valid_axiom(asymmetricProperty(A)) :- subsumed_by([A],[objectPropertyExpression]).

:- dynamic(transitiveProperty/1).
:- multifile(transitiveProperty/1).
axiompred(transitiveProperty/1).
axiom_arguments(transitiveProperty,[objectPropertyExpression]).
valid_axiom(transitiveProperty(A)) :- subsumed_by([A],[objectPropertyExpression]).

:- dynamic(hasKey/2).
:- multifile(hasKey/2).
axiompred(hasKey/2).
axiom_arguments(hasKey,[classExpression,propertyExpression]).
valid_axiom(hasKey(CE,PE)) :- subsumed_by([CE,PE],[classExpression,propertyExpression]).


fact(annotationAssertion(A, B, C)) :- annotationAssertion(A, B, C).
fact(differentIndividuals(A)) :- differentIndividuals(A).
fact(negativePropertyAssertion(A, B, C)) :- negativePropertyAssertion(A, B, C).
fact(propertyAssertion(A, B, C)) :- propertyAssertion(A, B, C).
fact(sameIndividual(A)) :- sameIndividual(A).
fact(classAssertion(A, B)) :- classAssertion(A, B).
axiom_arguments(fact,[axiom]).
valid_axiom(fact(A)) :- subsumed_by([A],[axiom]).

:- dynamic(sameIndividual/1).
:- multifile(sameIndividual/1).
axiompred(sameIndividual/1).
axiom_arguments(sameIndividual,[set(individual)]).
valid_axiom(sameIndividual(A)) :- subsumed_by([A],[set(individual)]).

:- dynamic(differentIndividuals/1).
:- multifile(differentIndividuals/1).
axiompred(differentIndividuals/1).
axiom_arguments(differentIndividuals,[set(individual)]).
valid_axiom(differentIndividuals(A)) :- subsumed_by([A],[set(individual)]).

:- dynamic(classAssertion/2).
:- multifile(classAssertion/2).
axiompred(classAssertion/2).
axiom_arguments(classAssertion,[classExpression, individual]).
valid_axiom(classAssertion(A, B)) :- subsumed_by([A, B],[classExpression, individual]).

:- dynamic(propertyAssertion/3).
:- multifile(propertyAssertion/3).
axiompred(propertyAssertion/3).
axiom_arguments(propertyAssertion,[propertyExpression, individual, individual]).
valid_axiom(propertyAssertion(A, B, C)) :- subsumed_by([A, B, C],[propertyExpression, individual, individual]).

objectPropertyAssertion(A, B, C) :- propertyAssertion(A, B, C),subsumed_by([A, B, C],[objectPropertyExpression, individual, individual]).
axiom_arguments(objectPropertyAssertion,[objectPropertyExpression, individual, individual]).
valid_axiom(objectPropertyAssertion(A, B, C)) :- subsumed_by([A, B, C],[objectPropertyExpression, individual, individual]).

dataPropertyAssertion(A, B, C) :- propertyAssertion(A, B, C),subsumed_by([A, B, C],[dataPropertyExpression, individual, literal]).
axiom_arguments(dataPropertyAssertion,[objectPropertyExpression, individual, literal]).
valid_axiom(dataPropertyAssertion(A, B, C)) :- subsumed_by([A, B, C],[dataPropertyExpression, individual, literal]).

:- dynamic(negativePropertyAssertion/3).
:- multifile(negativePropertyAssertion/3).
axiompred(negativePropertyAssertion/3).
axiom_arguments(negativePropertyAssertion,[propertyExpression, individual, individual]).
valid_axiom(negativePropertyAssertion(A, B, C)) :- subsumed_by([A, B, C],[propertyExpression, individual, individual]).

negativeObjectPropertyAssertion(A, B, C) :- negativePropertyAssertion(A, B, C),subsumed_by([A, B, C],[objectPropertyExpression, individual, individual]).
axiom_arguments(negativeObjectPropertyAssertion,[objectPropertyExpression, individual, individual]).
valid_axiom(negativeObjectPropertyAssertion(A, B, C)) :- subsumed_by([A, B, C],[objectPropertyExpression, individual, individual]).

negativeDataPropertyAssertion(A, B, C) :- negativePropertyAssertion(A, B, C),subsumed_by([A, B, C],[dataPropertyExpression, individual, literal]).
axiom_arguments(negativeDataPropertyAssertion,[dataPropertyExpression, individual, literal]).
valid_axiom(negativeDataPropertyAssertion(A, B, C)) :- subsumed_by([A, B, C],[dataPropertyExpression, individual, literal]).

:- dynamic(annotationAssertion/3).
:- multifile(annotationAssertion/3).
axiompred(annotationAssertion/3).
axiom_arguments(annotationAssertion,[annotationProperty, annotationSubject, annotationValue]).
valid_axiom(annotationAssertion(A, B, C)) :- subsumed_by([A, B, C],[annotationProperty, annotationSubject, annotationValue]).
annotationSubject(_).
annotationValue(_).

:- dynamic(annotation/3).
:- multifile(annotation/3).
axiompred(annotation/3).

annotation(annotationAnnotation(A, B, C)) :- annotationAnnotation(A, B, C).
annotation(axiomAnnotation(A, B, C)) :- axiomAnnotation(A, B, C).
axiom_arguments(annotation,[iri,annotationProperty,annotationValue]).
valid_axiom(annotation(A,B,C)) :- subsumed_by([A,B,C],[iri,annotationProperty,annotationValue]).

ontologyAnnotation(Ontology,AP,AV) :-
	annotation(Ontology,AP,AV),
	ontology(Ontology).
axiom_arguments(ontologyAnnotation,[ontology, annotationProperty, annotationValue]).
valid_axiom(ontologyAnnotation(A, B, C)) :- subsumed_by([A, B, C],[ontology, annotationProperty, annotationValue]).

axiomAnnotation(Axiom,AP,AV) :-
	annotation(Axiom,AP,AV),
	axiom(Axiom).
axiom_arguments(axiomAnnotation,[axiom, annotationProperty, annotationValue]).
valid_axiom(axiomAnnotation(A, B, C)) :- subsumed_by([A, B, C],[axiom, annotationProperty, annotationValue]).

annotationAnnotation(Annotation,AP,AV) :-
	annotation(Annotation,AP,AV),
	annotation(Annotation).
axiom_arguments(annotationAnnotation,[annotation, annotationProperty, annotationValue]).
valid_axiom(annotationAnnotation(A, B, C)) :- subsumed_by([A, B, C],[annotation, annotationProperty, annotationValue]).

:- dynamic(ontology/1).
:- multifile(ontology/1).
axiompred(ontology/1).
axiom_arguments(ontology,[iri]).
valid_axiom(ontology(A)) :- subsumed_by([A],[iri]).

ontologyDirective(A, B) :- ontologyImport(A, B).
ontologyDirective(A, B) :- ontologyAxiom(A, B).
ontologyDirective(A, B) :- ontologyVersionInfo(A, B).
axiom_arguments(ontologyDirective,[ontology, iri]).
valid_axiom(ontologyDirective(A, B)) :- subsumed_by([A, B],[ontology, iri]).

:- dynamic(ontologyAxiom/2).
:- multifile(ontologyAxiom/2).
axiompred(ontologyAxiom/2).
axiom_arguments(ontologyAxiom,[ontology, axiom]).
valid_axiom(ontologyAxiom(A, B)) :- subsumed_by([A, B],[ontology, axiom]).

:- dynamic(ontologyImport/2).
:- multifile(ontologyImport/2).
axiompred(ontologyImport/2).
axiom_arguments(ontologyImport,[ontology, iri]).
valid_axiom(ontologyImport(A, B)) :- subsumed_by([A, B],[ontology, iri]).

:- dynamic(ontologyVersionInfo/2).
:- multifile(ontologyVersionInfo/2).
axiompred(ontologyVersionInfo/2).
axiom_arguments(ontologyVersionInfo,[ontology, iri]).
valid_axiom(ontologyVersionInfo(A, B)) :- subsumed_by([A, B],[ontology, iri]).







subsumed_by(X,_) :- var(X),!.
subsumed_by([],[]) :- !.
subsumed_by([I|IL],[T|TL]) :-
	!,
	subsumed_by(I,T),
	subsumed_by(IL,TL).
subsumed_by(L,set(T)):-
        !,
        forall(member(I,L),
               subsumed_by(I,T)).
subsumed_by(I,T):-
        !,
	G=..[T,I],
	G.


iri(IRI) :- atomic(IRI).	
literal(literal(_)).			
propertyExpression(E) :- objectPropertyExpression(E) ; dataPropertyExpression(E).

objectPropertyExpression(E) :- objectProperty(E) ; inverseObjectProperty(E).

objectPropertyExpression(E) :- nonvar(E),iri(E).

objectPropertyExpressionOrChain(propertyChain(PL)) :- forall(member(P,PL),objectPropertyExpression(P)).
objectPropertyExpressionOrChain(PE) :- objectPropertyExpression(PE).


inverseObjectProperty(inverseOf(OP)) :- objectProperty(OP).

dataPropertyExpression(E) :- dataProperty(E).

dataPropertyExpression(DPEs) :-
	(   is_list(DPEs)
	->  forall(member(DPE,DPEs),
		   dataPropertyExpression(DPE))
	;   dataPropertyExpression(DPEs)).

dataPropertyExpression(E) :- nonvar(E),iri(E).


dataRange(DR) :-
    datatype(DR) ;
    dataIntersectionOf(DR );
    dataUnionOf(DR) ;
    dataComplementOf(DR) ;
    dataOneOf(DR) ;
    datatypeRestriction(DR).

classExpression(CE):-
        iri(CE) ;                   class(CE) ;
    objectIntersectionOf(CE) ; objectUnionOf(CE) ; objectComplementOf(CE) ; objectOneOf(CE) ;
    objectSomeValuesFrom(CE) ; objectAllValuesFrom(CE) ; objectHasValue(CE) ; objectHasSelf(CE) ;
    objectMinCardinality(CE) ; objectMaxCardinality(CE) ; objectExactCardinality(CE) ;
    dataSomeValuesFrom(CE) ; dataAllValuesFrom(CE) ; dataHasValue(CE) ;
    dataMinCardinality(CE) ; dataMaxCardinality(CE) ; dataExactCardinality(CE).

objectIntersectionOf(intersectionOf(CEs)) :-
	forall(member(CE,CEs),
	       classExpression(CE)).

objectUnionOf(unionOf(CEs)) :-
	forall(member(CE,CEs),
	       classExpression(CE)).

objectComplementOf(complementOf(CE)) :-
	classExpression(CE).

objectOneOf(oneOf(Is)) :-
        is_list(Is). 
objectSomeValuesFrom(someValuesFrom(OPE,CE)) :-
	objectPropertyExpression(OPE),
	classExpression(CE).

objectAllValuesFrom(allValuesFrom(OPE,CE)) :-
	objectPropertyExpression(OPE),
	classExpression(CE).

objectHasValue(hasValue(OPE,I)) :-
	objectPropertyExpression(OPE),
	individual(I).

objectHasSelf(hasSelf(OPE)) :-
	objectPropertyExpression(OPE).

objectMinCardinality(minCardinality(C,OPE,CE)):-
	number(C),
	C>=0,
	objectPropertyExpression(OPE),
	classExpression(CE).
objectMinCardinality(minCardinality(C,OPE)):-
	number(C),
	C>=0,
	objectPropertyExpression(OPE).


objectMaxCardinality(maxCardinality(C,OPE,CE)):-
	number(C),
	C>=0,
	objectPropertyExpression(OPE),
	classExpression(CE).
objectMaxCardinality(maxCardinality(C,OPE)):-
	number(C),
	C>=0,
	objectPropertyExpression(OPE).

objectExactCardinality(exactCardinality(C,OPE,CE)):-
	number(C),
	C>=0,
	objectPropertyExpression(OPE),
	classExpression(CE).
objectExactCardinality(exactCardinality(C,OPE)):-
	number(C),
	C>=0,
	objectPropertyExpression(OPE).
objectExactCardinality(cardinality(C,OPE)):-
	number(C),
	C>=0,
	objectPropertyExpression(OPE).


dataIntersectionOf(intersectionOf(DRs)) :-
	forall(member(DR,DRs),
	       dataRange(DR)).

dataUnionOf(unionOf(DRs)) :-
	forall(member(DR,DRs),
	       dataRange(DR)).

dataComplementOf(complementOf(DR)) :-
	dataRange(DR).

dataOneOf(oneOf(DRs)) :-
	forall(member(DR,DRs),
	       dataRange(DR)).

datatypeRestriction(datatypeRestriction(DR,FacetValues)):-
	datatype(DR),
	FacetValues=[_|_].

dataSomeValuesFrom(someValuesFrom(DPE,DR)):-
	dataPropertyExpression(DPE),
	dataRange(DR).

dataAllValuesFrom(allValuesFrom(DPE,DR)):-
	dataPropertyExpression(DPE),
	dataRange(DR).

dataHasValue(hasValue(DPE,L)):-
	dataPropertyExpression(DPE),
	literal(L).

dataMinCardinality(minCardinality(C,DPE,DR)):-
	number(C),
	C>=0,
	dataPropertyExpression(DPE),
	dataRange(DR).
dataMinCardinality(minCardinality(C,DPE)):-
	number(C),
	C>=0,
	dataPropertyExpression(DPE).



dataMaxCardinality(maxCardinality(C,DPE,DR)):-
	number(C),
	C>=0,
	dataPropertyExpression(DPE),
	dataRange(DR).
dataMaxCardinality(maxCardinality(C,DPE)):-
	number(C),
	C>=0,
	dataPropertyExpression(DPE).


dataExactCardinality(exactCardinality(C,DPE,DR)):-
	number(C),
	C>=0,
	dataPropertyExpression(DPE),
	dataRange(DR).
dataExactCardinality(exactCardinality(C,DPE)):-
	number(C),
	C>=0,
	dataPropertyExpression(DPE).
dataExactCardinality(cardinality(C,OPE)):-
	number(C),
	C>=0,
	objectPropertyExpression(OPE).




is_valid_axiom(Axiom) :- \+ \+ valid_axiom(Axiom).




equivalent_to(X,Y) :- equivalentClasses(L),member(X,L),member(Y,L),X\=Y.
equivalent_to(X,Y) :- equivalentProperties(L),member(X,L),member(Y,L),X\=Y.

disjoint_with(X,Y) :- disjointClasses(L),member(X,L),member(Y,L),X\=Y.

anyPropertyAssertion(P,E,V) :- propertyAssertion(P,E,V).
anyPropertyAssertion(P,E,V) :- annotationAssertion(P,E,V).


labelAnnotation_value(X,Val) :-
        anyPropertyAssertion('http://www.w3.org/2000/01/rdf-schema#label', X, literal(type(_,Val))),atom(Val).
labelAnnotation_value(X,Val) :-
        anyPropertyAssertion('http://www.w3.org/2000/01/rdf-schema#label', X, literal(lang(_,Val))),atom(Val).
labelAnnotation_value(X,Val) :-
        anyPropertyAssertion('http://www.w3.org/2000/01/rdf-schema#label', X, literal(Val)),atom(Val).




axiom_directly_about(Ax,About) :-
        axiom(Ax),
        Ax =.. [_,Arg1|_],
        (   is_list(Arg1)
        ->  member(About,Arg1)
        ;   About=Arg1).
axiom_directly_about(Ax,About) :-
	Ax=propertyAssertion(_,About,_),
        axiom(Ax).
axiom_directly_about(Ax,About) :-
	Ax=annotationAssertion(_,About,_),
        axiom(Ax).
axiom_directly_about(Ax,About) :-
	Ax=classAssertion(_,About),
        axiom(Ax).


axiom_directly_references(Ax,Ref) :-
        axiom(Ax),
        axiom_or_expression_references(Ax,Ref).

axiom_or_expression_references(X,Ref) :-
        X =.. [P|Args],
        P\=literal,
        member(Arg,Args),
        (   is_list(Arg)
        ->  member(Ref,Arg)
        ;   Ref=Arg).

axiom_about(Ax,About) :-
        axiom_directly_about(Ax,About).
axiom_about(Ax,About) :-
        axiom_directly_about(Ax,X),
        axiom_about(X,About).

axiom_references(Ax,Ref) :-
        axiom_directly_references(Ax,Ref).
axiom_references(Ax,Ref) :-
        axiom_directly_references(Ax,X),
        axiom_or_expression_references(X,Ref).

axiom_contains_expression(Ax,Ex) :-
        axiom_contains_expression(Ax,Ex,_).
axiom_contains_expression(Ax,Ex,D) :-
        axiom(Ax),
        expression_has_subexpression(Ax,Ex,[],Chain),
        length(Chain,D).

expression_has_subexpression(Ex,Ex,Accum,Accum).
expression_has_subexpression(Ex,SubEx,Accum,Results) :-
        Ex =.. [F|Args],
        member(A,Args),
        expression_has_subexpression(A,SubEx,[F|Accum],Results).



referenced_description(C) :-
        setof(C,referenced_description_1(C),Cs),
        member(C,Cs).

referenced_description_1(C) :- class(C).
referenced_description_1(C) :-
        subClassOf(A,B),
        (   referenced_description(A,C)
        ;   referenced_description(B,C)).
referenced_description_1(C) :-
        equivalentClasses(L),
        member(A,L),
        referenced_description(A,C).
referenced_description_1(C) :-
        classAssertion(A,_),
        referenced_description(A,C).

referenced_description(X,X) :- ground(X).
referenced_description(someValuesFrom(_,X),Y) :- referenced_description(X,Y).
referenced_description(allValuesFrom(_,X),Y) :- referenced_description(X,Y).
referenced_description(intersectionOf(L),Y) :- member(X,L),referenced_description(X,Y).
referenced_description(unionOf(L),Y) :- member(X,L),referenced_description(X,Y).




:- multifile assert_axiom_hook/1.
:- dynamic assert_axiom_hook/1.

assert_axiom(Axiom) :-
        assert_axiom_hook(Axiom),
        !.
assert_axiom(Axiom) :-
        assert(Axiom),
	(   nb_current(current_ontology,O)
        ->  assert(ontologyAxiom(O,Axiom))
        ;   true),
        !.

assert_axiom(Axiom,O) :-
        assert(Axiom),
	assert(ontologyAxiom(O,Axiom)),
        !.

:- multifile retract_axiom_hook/1.
:- dynamic retract_axiom_hook/1.

retract_axiom(Axiom) :-
        retract_axiom_hook(Axiom),
        !.
retract_axiom(Axiom) :-
        retractall(Axiom),
	retractall(ontologyAxiom(_,Axiom)),
        !.

retract_axiom(Axiom,Ontology) :-
        \+ var(Ontology),
	retractall(ontologyAxiom(Ontology,Axiom)),
        (   \+ ontologyAxiom(_,Axiom)
        ->  retractall(Axiom)
        ;   true),                      !.


retract_all_axioms :-
        findall(A,axiom(A),Axioms),
        maplist(retract,Axioms),
        findall(ontologyAxiom(O,A),ontologyAxiom(O,A),OAxioms),
        maplist(retract,OAxioms),
	!.


owl2_model_init :-
	assert(annotationProperty('http://www.w3.org/2000/01/rdf-schema#label')),
	assert(annotationProperty('http://www.w3.org/2000/01/rdf-schema#comment')).

consult_axioms(File) :-
        consult(File).

axiom_type(A,T) :- functor(A,T,_).




:- use_module(owl2_model).

:- begin_tests(owl2_model,[setup(init_axioms),cleanup(retract_all_axioms)]).

init_axioms :-
        Axioms=[
                ontology(animals),
                class(organism),
                class(animal),
                class(carnivore),
                class(herbivore),
                objectProperty(eats),
                subClassOf(animal,organism),
                equivalentClasses([carnivore,intersectionOf([animal,someValuesFrom(eats,animal)])]),
                equivalentClasses([herbivore,
                                   intersectionOf([animal,
                                                   allValuesFrom(eats,complementOf(animal))])]),
                equivalentClasses([auto_carnivore,hasSelf(eats)]),
                disjointClasses([herbivore,carnivore])
               ],
        retract_all_axioms,
        maplist(assert_axiom,Axioms).

test(loaded) :-
        \+ \+ ontology(_).

test(subclasses) :-
        findall(A-B,subClassOf(A,B),Axs),
        Axs\=[].

test(objectProperty, all(OP == [eats])) :-
        objectProperty(OP).

test(class, all(C == [organism,animal,carnivore,herbivore])) :-
        class(C).


:- end_tests(owl2_model).




:- module(owl2_obo_parser,
          [
           owl_parse_obo_syntax_file/2
           ]).

:- use_module(owl2_io).

:- multifile owl2_io:suffix_format/2.
owl2_io:suffix_format(obo,obo).


:- multifile owl2_io:load_axioms_hook/3.
owl2_io:load_axioms_hook(File,obo,Opts) :-
        owl_parse_obo_syntax_file(File,Opts).

owl_parse_obo_syntax_file(File,Opts) :-
        absolute_file_name(File,Abs),
        atom_concat(Abs,'.owl',OwlFile),
        atom_concat('file://',OwlFile,OwlURI),
        debug(obo,'obo2owl ~w ==> ~w URI: ~w',[File,OwlFile,OwlURI]),
        obo2owl(File,OwlFile,OwlURI,Opts).

obo2owl(In,Out,URI,Opts) :-
        \+ exists_file(Out),
        !,
        debug(obo,'creating new owl file: ~w',[URI]),
        run_obo2owl(In,Out,URI,Opts).
obo2owl(In,Out,_URI,Opts) :-
        time_file(In,InTime),
        time_file(Out,OutTime),
        debug(obo,'comparing ~w < ~w',[InTime,OutTime]),
        InTime < OutTime,
        \+ member(force(true),Opts),
        !,
        debug(obo,'~w < ~w -- using existing owl file',[InTime,OutTime]),
        load_axioms(Out,owl,Opts).
obo2owl(In,Out,URI,Opts) :-
        run_obo2owl(In,Out,URI,Opts).

run_obo2owl(In,Out,URI,Opts) :-
        concat_atom(['obolib-obo2owl','-o',URI,In,'>/dev/null'],' ',Cmd),
        shell(Cmd),
        load_axioms(Out,owl,Opts).




:- module(owl2_owllink,
	  [ owl_link/4 	  ]).

:-use_module(library('http/http_client')).
:-use_module(library('sgml')).
:-use_module(library('sgml_write')).
:-use_module('owl2_xml').





owl_link(ReasonerURL,Request,Response,Options) :-
	owl_link_request_l(Request,RequestXML),
		(   member(request_file=Filename,Options) -> true ; Filename = '_thea_owllink_request.xml'),
	(   member(response_file=FilenameResponse,Options) -> true ; FilenameResponse = '_thea_owllink_response.xml'),
	open(Filename,write,St),
	xml_write(St,element('RequestMessage',
			     [xmlns='http://www.owllink.org/owllink#',
			      xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance',
			      xsi:schemaLocation='http://www.owllink.org/owllink# http://www.owllink.org/owllink-20091116.xsd'],
			     RequestXML),[layout(true)]),close(St),
			     	(   member(no_reasoner,Options) ->
	       open(FilenameResponse,read,St),
	       load_structure(St,ResponseXML,[dialect(xmlns),space(sgml)]),close(St),
	       ResponseXML = [element('ResponseMessage',_,ResponsesXML)],
	       owl_link_response(ResponsesXML,Response)
	;
	   (   http_post(ReasonerURL,file(Filename),Result,[]) ->
					       	          open(FilenameResponse,write,St),write(St,Result),close(St),
	          	          open(FilenameResponse,read,St),
	          load_structure(St,ResponseXML,[dialect(xmlns),space(sgml)]),close(St),
	       	  ResponseXML = [element(_:'ResponseMessage',_,ResponsesXML)],
	          owl_link_response_l(ResponsesXML,Response)
	   ;
	          debug(owllink,'Reasoner error ~w',[ReasonerURL])
	   )
	).


owl_link_request_l([],[]).
owl_link_request_l([Req1|ReqRest],[Res1|ResRest]) :-
	owl_link_request(Req1,Res1),
	owl_link_request_l(ReqRest,ResRest).




owl_link_request(getDescription,element('GetDescription',[],[])) :-!.
owl_link_request(getSettings(KB),element('GetSettings',[kb=KB],[])) :- !.
owl_link_request(getPrefixes(KB),element('GetPrefixes',[kb=KB],[])) :- !.

owl_link_request(createKB(KB_Name_Attrs,Prefixes),element('CreateKB',KB_Name_Attrs,EPrefixes)):-
	options_to_elements(Prefixes,EPrefixes), !.
owl_link_request(releaseKB(KB),element('ReleaseKB',[kb=KB],[])) :-!.
owl_link_request(set(KB,Key,Settings),element('Set',[kb=KB,key=Key],LiteralSettings)) :-
	options_to_literals(Settings,LiteralSettings),!.

owl_link_request(isKBSatisfiable(KB),element('IsKBSatisfiable',[kb=KB],[])) :- !.
owl_link_request(isKBStructurallyConsistent(KB),element('IsKBStructurallyConsistent',[kb=KB],[])) :-!.
owl_link_request(isTBoxConsistent(KB),element('IsTBoxConsistent',[kb=KB],[])) :- !.
owl_link_request(loadOntologies(KB,IRIs,IRIMappings,Imports),element('LoadOntologies',[kb=KB,considerImports=Imports],Elements)) :-
	options_to_elements(IRIMappings,MappingsEL),
	options_to_elements(IRIs,IRIsEL),
	merge(IRIsEL,MappingsEL,Elements),!.

owl_link_request(classify(KB),element('Classify',[kb=KB],[])) :- !.
owl_link_request(realize(KB),element('Realize',[kb=KB],[])) :- !.

owl_link_request(isEntailed(KB,Axioms,Options),element('IsEntailed',[kb=KB|Options],AxiomsXML)) :-
	axioms_elts(_,Axioms,AxiomsXML),!.
owl_link_request(isEntailedDirect(KB,Axioms,Options),element('IsEntailedDirect',[kb=KB|Options],AxiomsXML)) :-
	axioms_elts(_,Axioms,AxiomsXML),!.


owl_link_request(getAllAnnotationProperties(KB),element('GetAllAnnotationProperties',[kb=KB],[])) :-!.
owl_link_request(getAllObjectProperties(KB),element('GetAllObjectProperties',[kb=KB],[])) :- !.
owl_link_request(getAllDatatypes(KB),element('GetAllDatatypes',[kb=KB],[])) :- !.
owl_link_request(getAllIndividuals(KB),element('GetAllIndividuals',[kb=KB],[])) :- !.
owl_link_request(getAllDataProperties(KB),element('GetAllDataProperties',[kb=KB],[])) :- !.
owl_link_request(getAllClasses(KB),element('GetAllClasses',[kb=KB],[])) :- !.


owl_link_request(isClassSatisfiable(KB,Class),element('IsClassSatisfiable',[kb=KB],[ClassXML])) :-
	desc_xml(_,Class,ClassXML),!.
owl_link_request(isClassSubsumedBy(KB,Class1,Class2),element('IsClassSubsumedBy',[kb=KB],[ClassXML1,ClassXML2])) :-
	desc_xml(_,Class1,ClassXML1),
	desc_xml(_,Class2,ClassXML2),!.
owl_link_request(areClassesDisjoint(KB,Classes),element('AreClassesDisjoint',[kb=KB],EClasses)) :-
	axioms_elts(_,Classes,EClasses),!.
owl_link_request(areClassesEquivalent(KB,Classes),element('AreClassesEquivalent',[kb=KB],EClasses)) :-
	axioms_elts(_,Classes,EClasses),!.

owl_link_request(getSubClasses(KB,Class),element('GetSubClasses',[kb=KB],[ClassXML])) :-
	desc_xml(_,Class,ClassXML),!.
owl_link_request(getSubClasses(KB,Class,Direct),element('GetSubClasses',[kb=KB,direct=Direct],[ClassXML])) :-
	desc_xml(_,Class,ClassXML),!.

owl_link_request(getSuperClasses(KB,Class),element('GetSuperClasses',[kb=KB],[ClassXML])) :-
	desc_xml(_,Class,ClassXML),!.
owl_link_request(getSuperClasses(KB,Class,Direct),element('GetSuperClasses',[kb=KB,direct=Direct],[ClassXML])) :-
	desc_xml(_,Class,ClassXML),!.
owl_link_request(getDisjointClasses(KB,Class),element('GetDisjointClasses',[kb=KB],ClassElement)) :-
	(   nonvar(Class) -> desc_xml(_,Class,ClassXML), ClassElement=[ClassXML] ; ClassElement= []),!.

owl_link_request(getEquivalentClasses(KB,Class),element('GetEquivalentClasses',[kb=KB],ClassElement)) :-
	(   nonvar(Class) -> desc_xml(_,Class,ClassXML), ClassElement=[ClassXML] ; ClassElement= []),!.
owl_link_request(getSubClassHierarchy(KB,Class),element('GetSubClassHierarchy',[kb=KB],ClassElement)) :-
	(   nonvar(Class) -> desc_xml(_,Class,ClassXML), ClassElement=[ClassXML] ; ClassElement= []),!.

owl_link_request(getTypes(KB,Individual,Direct),
		 element('GetTypes',[kb=KB,direct=Direct],[IndividualXML])) :-
	axiom_xml(_,Individual,IndividualXML),!.
owl_link_request(getFlattenedTypes(KB,Individual,Direct),
		 element('GetFlattenedTypes',[kb=KB,direct=Direct],[IndividualXML])) :-
	axiom_xml(_,Individual,IndividualXML),!.
owl_link_request(getSameIndividuals(KB,Individual,Direct),
		 element('GetSameIndividuals',[kb=KB,direct=Direct],[IndividualXML])) :-
	axiom_xml(_,Individual,IndividualXML),!.
owl_link_request(getDifferentIndividuals(KB,Individual,Direct),
		 element('GetDifferentIndividuals',[kb=KB,direct=Direct],[IndividualXML])) :-
	axiom_xml(_,Individual,IndividualXML),!.
owl_link_request(getFlattenedDifferentIndividuals(KB,Individual,Direct),
		 element('GetFlattenedDifferentIndividuals',[kb=KB,direct=Direct],[IndividualXML])) :-
	axiom_xml(_,Individual,IndividualXML),!.

owl_link_request(getEquivalentIndividuals(KB,Individual),
		 element('GetEquivalentIndividuals',[kb=KB],IndividualXML)) :-
	axiom_xml(_,Individual,IndividualXML),!.
owl_link_request(getDisjointIndividuals(KB,Individual),
		 element('GetDisjointIndividuals',[kb=KB],IndividualXML)) :-
	axiom_xml(_,Individual,IndividualXML),!.
owl_link_request(getFlattenDisjointIndividuals(KB,Individual),
		 element('GetFlattenDisjointIndividuals',[kb=KB],IndividualXML)) :-
	axiom_xml(_,Individual,IndividualXML),!.


owl_link_request(getObjectPropertiesOfSource(KB,Individual,Negative),
		 element('GetObjectPropertiesOfSource',[kb=KB,negative=Negative],[IndividualXML])) :-
	axiom_xml(_,Individual,IndividualXML),!.
owl_link_request(getObjectPropertiesBetween(KB,I1,I2,Negative),
		 element('GetObjectPropertiesBetween',[kb=KB,negative=Negative],[I1XML,I2XML])) :-
	axiom_xml(_,I1,I1XML),
	axiom_xml(_,I2,I2XML),!.
owl_link_request(getObjectPropertiesOfTarget(KB,Individual,Negative),
		 element('GetObjectPropertiesOfTarget',[kb=KB,negative=Negative],[IndividualXML])) :-
	axiom_xml(_,Individual,IndividualXML),!.

owl_link_request(getDataPropertiesOfSource(KB,Individual,Negative),
		 element('GetDataPropertiesOfSource',[kb=KB,negative=Negative],[IndividualXML])) :-
	axiom_xml(_,Individual,IndividualXML),!.
owl_link_request(getDataPropertiesBetween(KB,I1,Literal,Negative),
		 element('GetDataPropertiesBetween',[kb=KB,negative=Negative],[IXML,LiteralXML])) :-
	axiom_xml(_,I1,IXML),
	axiom_xml(_,Literal,LiteralXML),!.
owl_link_request(getDataPropertiesOfLiteral(KB,Literal,Negative),
		 element('GetDataPropertiesOfLiteral',[kb=KB,negative=Negative],LiteralXML)) :-
	axiom_xml(_,Literal,LiteralXML),!.

owl_link_request(getInstances(KB,Class,Direct),element('GetInstances',[kb=KB,direct=Direct],[ClassXML])) :-
	axiom_xml(_,Class,ClassXML),!.
owl_link_request(getObjectPropertyTargets(KB,ObjectProperty,Individual,Negative),
		 element('GetObjectPropertyTargets',[kb=KB,negative=Negative],[ObjectPropertyXML,IndividualXML])) :-
	axiom_xml(_,Individual,IndividualXML),
	axiom_xml(_,ObjectProperty,ObjectPropertyXML),!.
owl_link_request(getObjectPropertySources(KB,ObjectProperty,Individual,Negative),
		 element('GetObjectPropertySources',[kb=KB,negative=Negative],[ObjectPropertyXML,IndividualXML])) :-
	axiom_xml(_,Individual,IndividualXML),
	axiom_xml(_,ObjectProperty,ObjectPropertyXML),!.

owl_link_request(getFlattenedInstances(KB,Class,Direct),element('GetFlattenedInstances',[kb=KB,direct=Direct],[ClassXML])) :-
	axiom_xml(_,Class,ClassXML),!.
owl_link_request(getFlattenedObjectPropertyTargets(KB,ObjectProperty,Individual,Negative),
		 element('GetFlattenedObjectPropertyTargets',[kb=KB,negative=Negative],[ObjectPropertyXML,IndividualXML])) :-
	axiom_xml(_,Individual,IndividualXML),
	axiom_xml(_,ObjectProperty,ObjectPropertyXML),!.
owl_link_request(getFlattenedObjectPropertySources(KB,ObjectProperty,Individual,Negative),
		 element('GetFlattenedObjectPropertySources',[kb=KB,negative=Negative],[ObjectPropertyXML,IndividualXML])) :-
	axiom_xml(_,Individual,IndividualXML),
	axiom_xml(_,ObjectProperty,ObjectPropertyXML),!.

owl_link_request(getDataPropertyTargets(KB,DataProperty,Individual,Negative),
		 element('GetDataPropertyTargets',[kb=KB,negative=Negative],[DataPropertyXML,IndividualXML])) :-
	axiom_xml(_,Individual,IndividualXML),
	axiom_xml(_,DataProperty,DataPropertyXML),!.
owl_link_request(getDataPropertySources(KB,DataProperty,Literal,Negative),
		 element('GetDataPropertySources',[kb=KB,negative=Negative],[DataPropertyXML,LiteralXML])) :-
	axiom_xml(_,Literal,LiteralXML),
	axiom_xml(_,DataProperty,DataPropertyXML),!.

owl_link_request(getFlattenedDataPropertySources(KB,ObjectProperty,Literal,Negative),
		 element('GetFlattenedDataPropertySources',[kb=KB,negative=Negative],[ObjectPropertyXML,LiteralXML])) :-
	axiom_xml(_,Literal,LiteralXML),
	axiom_xml(_,ObjectProperty,ObjectPropertyXML),!.

owl_link_request(getSubObjectProperties(KB,ObjectProperty,Direct),
		 element('GetSubObjectProperties',[kb=KB,direct=Direct],[ObjectPropertyXML])) :-
	axiom_xml(_,ObjectProperty,ObjectPropertyXML),!.
owl_link_request(getSuperObjectProperties(KB,ObjectProperty,Direct),
		 element('GetSuperObjectProperties',[kb=KB,direct=Direct],[ObjectPropertyXML])) :-
	axiom_xml(_,ObjectProperty,ObjectPropertyXML),!.
owl_link_request(getEquivalentObjectProperties(KB,ObjectProperty,Direct),
		 element('GetEquivalentObjectProperties',[kb=KB,direct=Direct],[ObjectPropertyXML])) :-
	axiom_xml(_,ObjectProperty,ObjectPropertyXML),!.
owl_link_request(getDisjointObjectProperties(KB,ObjectProperty,Direct),
		 element('GetDisjointObjectProperties',[kb=KB,direct=Direct],[ObjectPropertyXML])) :-
	axiom_xml(_,ObjectProperty,ObjectPropertyXML),!.

owl_link_request(getSubObjectPropertyHierarchy(KB,ObjectProperty),
		 element('GetSubObjectPropertyHierarchy',[kb=KB],[ObjectPropertyXML])) :-
	axiom_xml(_,ObjectProperty,ObjectPropertyXML),!.


	owl_link_request(isObjectPropertySatisfiable(KB,ObjectProperty),
		 element('IsObjectPropertySatisfiable',[kb=KB],[ObjectPropertyXML])) :-
	axiom_xml(_,ObjectProperty,ObjectPropertyXML),!.

	owl_link_request(isDataPropertySatisfiable(KB,DataProperty),
		 element('IsDataPropertySatisfiable',[kb=KB],[DataPropertyXML])) :-
	axiom_xml(_,DataProperty,DataPropertyXML),!.

	owl_link_request(getSubDataProperties(KB,DataProperty,Direct),
		 element('GetSubDataProperties',[kb=KB,direct=Direct],[DataPropertyXML])) :-
	axiom_xml(_,DataProperty,DataPropertyXML),!.
owl_link_request(getSuperDataProperties(KB,DataProperty,Direct),
		 element('GetSuperDataProperties',[kb=KB,direct=Direct],[DataPropertyXML])) :-
	axiom_xml(_,DataProperty,DataPropertyXML),!.

	owl_link_request(getEquivalentDataProperties(KB,DataProperty,Direct),
		 element('GetEquivalentDataProperties',[kb=KB,direct=Direct],[DataPropertyXML])) :-
	axiom_xml(_,DataProperty,DataPropertyXML),!.
owl_link_request(getDisjointDataProperties(KB,DataProperty,Direct),
		 element('GetDisjointDataProperties',[kb=KB,direct=Direct],[DataPropertyXML])) :-
	axiom_xml(_,DataProperty,DataPropertyXML),!.

	owl_link_request(getSubDataPropertyHierarchy(KB,DataProperty),
		 element('GetSubDataPropertyHierarchy',[kb=KB],[DataPropertyXML])) :-
	axiom_xml(_,DataProperty,DataPropertyXML),!.

owl_link_request(tell(KB,Axioms),
		 element('Tell',[kb=KB],AxiomsXML)) :-
		  axioms_elts(_,Axioms,AxiomsXML),!.

owl_link_request(Req,_) :-
	throw(cannot_parse_request(Req)).


options_to_elements([],[]).
options_to_elements([O|Rest],[element(T,Args,[])|RestXML]) :-
	O =.. [T|Args],
	options_to_elements(Rest,RestXML).


options_to_literals([],[]).
options_to_literals([O|Rest],[element('Literal',[],[O])|RestXML]) :-
	options_to_literals(Rest,RestXML).




owl_link_response_l([],[]).
owl_link_response_l([ResXMLH|ResXMLRest],[ResH|ResRest]) :-
	owl_link_response(ResXMLH,ResH),
	owl_link_response_l(ResXMLRest,ResRest).


owl_link_response(element(_:'Description',Attrs,Elements),
		  description(Name,MessageO,Descriptions)) :-
	member(name=Name,Attrs),
	(   member(message=Message,Attrs) -> MessageO = [Message] ; MessageO = []),
	maplist(response_elements,Elements,Descriptions),!.

owl_link_response(element(_:'KB',Attrs,_Elements), kb(KB,WarningO)) :-
	member(kb=KB,Attrs),
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),!.

owl_link_response(element(_:'Settings',Attrs,Elements), settings(WarningO,Settings)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	maplist(response_elements,Elements,Settings),!.

owl_link_response(element(_:'Prefixes',Attrs,SettingsE), settings(WarningO,Settings)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	maplist(response_elements,SettingsE,Settings),!.


owl_link_response(element(_:'OK',Attrs,_Elements), ok(WarningO)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),!.

owl_link_response(element(_:'SetOfAnnotationProperties',Attrs,Elements),
		  annotationProperties(WarningO,AnnotationProperties)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	maplist(response_elements,Elements,AnnotationProperties),!.

owl_link_response(element(_:'SetOfClasses',Attrs,ClassLE), setOfClasses(WarningO,ClassL)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	maplist(xml_desc(_),ClassLE,ClassL),!.

owl_link_response(element(_:'SetOfIndividuals',Attrs,IndLE), setOfIndividuals(WarningO,IndL)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	maplist(xml_axiom(_),IndLE,IndL),!.

	owl_link_response(element(_:'SetOfObjectProperties',Attrs,ObjectPropertyLE), setOfLiterals(WarningO,ObjectPropertyL)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	maplist(xml_axiom(_),ObjectPropertyLE,ObjectPropertyL),!.

	owl_link_response(element(_:'SetOfDataProperties',Attrs,DataPropertyLE), setOfLiterals(WarningO,DataPropertyL)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	maplist(xml_axiom(_),DataPropertyLE,DataPropertyL),!.

	owl_link_response(element(_:'SetOfLiterals',Attrs,LitLE), setOfLiterals(WarningO,LitL)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	maplist(xml_axiom(_),LitLE,LitL),!.

	owl_link_response(element(_:'SetOfDatatypes',Attrs,DatatypeLE), setOfLiterals(WarningO,DatatypeL)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	maplist(xml_axiom(_),DatatypeLE,DatatypeL),!.


owl_link_response(element(_:'BooleanResponse',Attrs,_Elements), booleanResponse(Result,WarningO)) :-
	member(result=Result,Attrs),
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),!.

	owl_link_response(element(_:'StringReponse',Attrs,_), stringReponse(Result,WarningO)) :-
	member(result=Result,Attrs),
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),!.


owl_link_response(element(_:'ClassSynsets',Attrs,SynsetsLE), classSynsets(WarningO,SynsetsL)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	maplist(response_elements,SynsetsLE,SynsetsL),!.

owl_link_response(element(_:'Classes',Attrs,ClassesLE), classes(WarningO,ClassesL)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	maplist(xml_desc(_),ClassesLE,ClassesL),!.

owl_link_response(element(_:'ClassHierarchy',Attrs,[SynsetLE|PairElements]), classHierarchy(WarningO,SynsetL,Pairs)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	response_elements(SynsetLE,SynsetL),
	maplist(response_elements,PairElements,Pairs),!.

owl_link_response(element(_:'SetOfDataPropertySynsets',Attrs,SynsetsLE), dataPropertySynsets(WarningO,SynsetsL)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	maplist(response_elements,SynsetsLE,SynsetsL),!.

owl_link_response(element(_:'DataPropertySynonyms',Attrs,SynonymsLE), dataPropertySynonyms(WarningO,SynonymsL)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	maplist(xml_axiom(_),SynonymsLE,SynonymsL),!.


owl_link_response(element(_:'SetOfIndividualSynsets',Attrs,SynsetsLE), individualSynsets(WarningO,SynsetsL)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	maplist(response_elements,SynsetsLE,SynsetsL),!.

owl_link_response(element(_:'IndividualSynonyms',Attrs,SynonymsLE), individualSynonyms(WarningO,SynonymsL)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	maplist(xml_axiom(_),SynonymsLE,SynonymsL),!.

owl_link_response(element(_:'ObjectPropertyHierarchy',Attrs,[SynsetLE|PairElements]),
		  objectPropertyHierarchy(WarningO,SynsetL,Pairs)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	response_elements(SynsetLE,SynsetL),
	maplist(response_elements,PairElements,Pairs),!.

owl_link_response(element(_:'SetOfObjectPropertySynsets',Attrs,SynsetsLE), objectPropertySynsets(WarningO,SynsetsL)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	maplist(response_elements,SynsetsLE,SynsetsL),!.

owl_link_response(element(_:'ObjectPropertySynsets',Attrs,SynsetsLE), objectPropertySynsets(WarningO,SynsetsL)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	maplist(response_elements,SynsetsLE,SynsetsL),!.

owl_link_response(element(_:'DataPropertySynsets',Attrs,SynsetsLE), dataPropertySynsets(WarningO,SynsetsL)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	maplist(response_elements,SynsetsLE,SynsetsL),!.

owl_link_response(element(_:'DataPropertyHierarchy',Attrs,[SynsetLE|PairElements]),
		  dataPropertyHierarchy(WarningO,SynsetL,Pairs)) :-
	(   member(warning=Warning,Attrs) -> WarningO = [Warning] ; WarningO = []),
	response_elements(SynsetLE,SynsetL),
	maplist(response_elements,PairElements,Pairs),!.


owl_link_response(element(_:'Error',[error=Message],_Elements), error(Message)) :- !.
owl_link_response(element(_:'SyntaxError',[error=Message],_Elements), syntaxError(Message)) :- !.
owl_link_response(element(_:'KBError',[error=Message],_Elements), kbError(Message)) :- !.
owl_link_response(element(_:'SemanticError',[error=Message],_Elements), semanticError(Message)) :- !.


owl_link_response(Res,_) :-
	throw(cannot_parse_response(Res)).


response_elements(element(protocolVersion,Attrs,_),protocolVersion(Attrs)) :- !.
response_elements(element(_:'ClassSubClassesPair',_,[element(_:'ClassSynset',_,ClassDescL),
						     element(_:'SubClassSynsets',_,SynsetsE)]),
		  classSubClassesPair(synset(Classes),Synsets)) :-
	maplist(xml_desc(_),ClassDescL,Classes),
	maplist(response_elements,SynsetsE,Synsets),
	!.

response_elements(element(_:'ObjectPropertySubObjectPropertiesPair',_,[element(_:'ObjectPropertySynset',_,OPL),
						     element(_:'SubObjectPropertySynsets',_,SynsetsE)]),
		  objectPropertySubObjectPropertyPairs(synset(OP),Synsets)) :-
	maplist(xml_desc(_),OPL,OP),
	maplist(response_elements,SynsetsE,Synsets),
	!.

response_elements(element(_:'DataPropertySubDataPropertiesPair',_,[element(_:'DataPropertySynset',_,DPL),
						     element(_:'SubDataPropertySynsets',_,SynsetsE)]),
		  dataPropertySubDataPropertyPairs(synset(DP),Synsets)) :-
	maplist(xml_desc(_),DPL,DP),
	maplist(response_elements,SynsetsE,Synsets),
	!.


response_elements(element(_:'ClassSynsets',_,SynsetsE),Synsets) :-
	 maplist(response_elements,SynsetsE,Synsets),!.

response_elements(element(_:'ObjectPropertySynsets',_,SynsetsE),Synsets) :-
	 maplist(response_elements,SynsetsE,Synsets),!.

response_elements(element(_:'DataPropertySynsets',_,SynsetsE),Synsets) :-
	 maplist(response_elements,SynsetsE,Synsets),!.


response_elements(element(_:'SubClassSynsets',_,SynsetsE),Synsets) :-
	 maplist(response_elements,SynsetsE,Synsets),!.


response_elements(element(_:'ClassSynset',_,ClassDescL),synset(Classes)) :-
	maplist(xml_desc(_),ClassDescL,Classes),!.

response_elements(element(_:'DataPropertySynset',_,DPL),synset(DP)) :-
	maplist(xml_axiom(_),DPL,DP),!.

response_elements(element(_:'IndividualSynset',_,IndL),synset(Ind)) :-
	maplist(xml_axiom(_),IndL,Ind),!.

response_elements(element(_:'ObjectPropertySynset',_,OPL),synset(OP)) :-
	maplist(xml_axiom(_),OPL,OP),!.


response_elements(element('_:Setting',[key=Key], [DataRangeE,LiteralE]),setting(Key,DataRange,Literal)) :-
		  LiteralE = element('Literal',_,[Literal]),
		  (   DataRangeE = element('owl:Datatype',Attrs,_) ->
		  (   member(abbreviatedIRI=DataType,Attrs), DataRange = DataType,! ;
		      member('IRI' = DataType,Attrs),DataRange = DataType,! ;
		      DataRange = unknown_datatype) ;
		  DataRange = DataRangeE),!.

response_elements(element(_:'Prefix',[key=Key,name=Name,fullIRI=IRI],_),prefix(Key,Name,IRI)) :- !.

response_elements(element(_:'AnnotationProperty',Attrs, _),annotationProperty(Attrs)) :- !.


response_elements(element(_:'Property',[key=Key], [DataRangeE,LiteralE]),property(Key,DataRange,Literal)) :-
		  LiteralE = element('Literal',_,[Literal]),
		  (   DataRangeE = element('owl:Datatype',Attrs,_) ->
		  (   member(abbreviatedIRI=DataType,Attrs), DataRange = DataType,! ;
		      member('IRI' = DataType,Attrs),DataRange = DataType,! ;
		      DataRange = unknown_datatype) ;
		      DataRange = DataRangeE),!.



response_elements(X,X).







:- module(owl2_plsyn,[
                      write_owl_as_plsyn/0,
                      write_owl_as_plsyn/1,

                      plsyn_owl/2,
                      plsyn_owl/3,
                      
                      op(980,xfy,(--)),
                      op(950,xfy,\^),                                             op(950,fx,individual),
                      op(950,xfy,disjointUnion),
                      op(950,fx,class),
                      op(950,fx,functional),
                      op(950,fx,transitive),
                      op(950,fx,symmetric),
                      op(950,fx,asymmetric),
                      op(950,fx,reflexive),
                      op(950,fx,irreflexive),
                                                                                      op(700,xfy,inverseOf),
                                            op(650,xfy,(::)),
                      op(600,fx,not),
                      op(500,xfy,or),
                      op(200,xfy,and),
                      op(200,xfy,that),
                      op(150,xfy,some),
                      op(150,xfy,only),
                      op(150,xfy,value),
                      op(150,xfy,min),
                      op(150,xfy,max),
                      op(150,xfy,exactly),
                      op(125,xfy,of)                      ]).


:- use_module(owl2_model).
:- use_module(owl2_util).
:- use_module(swrl).
:- use_module(library(readutil)).

:- op(980,xfy,(--)).
:- op(950,fx,individual).

:- op(950,xfy,disjointUnion).

:- op(950,xfy,\^). 
:- op(950,fx,class).
:- op(950,fx,functional).
:- op(950,fx,transitive).
:- op(950,fx,symmetric).
:- op(950,fx,asymmetric).
:- op(950,fx,reflexive).
:- op(950,fx,irreflexive).
:- op(700,xfy,inverseOf).
:- op(650,xfy,(::)).
:- op(600,fx,not).
:- op(500,xfy,or).
:- op(200,xfy,and).
:- op(200,xfy,that).
:- op(150,xfy,some).
:- op(150,xfy,only).
:- op(150,xfy,value).
:- op(150,xfy,min).
:- op(150,xfy,max).
:- op(150,xfy,exactly).
:- op(125,xfy,of).
:- op(100,fx,(?)).

:- multifile owl2_io:load_axioms_hook/3.
owl2_io:load_axioms_hook(File,plsyn,Opts) :-
        owl_parse_plsyn(File,Opts). 
:- multifile owl2_io:save_axioms_hook/3.
owl2_io:save_axioms_hook(_File,plsyn,Opts) :-
        write_owl_as_plsyn(Opts).

owl_parse_plsyn(File,_Opts) :-
        open(File,read,IO,[]),
        repeat,
        (   at_end_of_stream(IO)
        ->  true
        ;   read_term(IO,PlTerm,[module(owl2_plsyn)]),
            plsyn2owl(PlTerm,Axiom),
            (   nb_current(ontology,Ont)
            ->  assert_axiom(Axiom,Ont)
            ;   assert_axiom(Axiom)),
            (   Axiom=ontology(OntNew)
            ->  nb_setval(ontology,OntNew)
            ;   true),
            fail),
        close(IO).

write_owl_as_plsyn:-
        write_owl_as_plsyn([]).

write_owl_as_plsyn(Opts):-
	setof(Ont,member(ontology(Ont),Opts),Onts),
	!,
	        forall((member(Ont,Onts),
		ontologyAxiom(Ont,A),
		\+exclude_axiom(A,Opts)),
	       (   plsyn_owl(Pl,A,Opts),
		   format('~q.~n',[Pl]))).
write_owl_as_plsyn(Opts):-
        forall((axiom(A),\+exclude_axiom(A,Opts)),
	       (   plsyn_owl(Pl,A,Opts),
		   format('~q.~n',[Pl]))).


exclude_axiom(H,Opts) :-
	setof(Ont,member(ontology(Ont),Opts),Onts),
	\+ ((ontologyAxiom(Ont,H),
	     member(Ont,Onts))).

plsyn_owl(Pl,Owl) :-
	plsyn_owl(Pl,Owl,[]).

plsyn_owl(Pl,Owl,Opts) :-
	select(use_labels,Opts,Opts2),
	!,
	map_IRIs(owl2_util:use_label_as_IRI,[Owl],[Owl2]),
	plsyn_owl(Pl,Owl2,Opts2).
plsyn_owl(Pl,Owl,_) :-
        nonvar(Pl),
        plsyn2owl(Pl,Owl),
        !.
plsyn_owl(Pl,Owl,_) :-
        nonvar(Owl),
        owl2plsyn(Owl,Pl),
        !.
plsyn_owl(Pl,Pl,_) :-
        var(Pl).



plsyn2owl(V,V) :-
        var(V),
        !.

plsyn2owl(R @< R1*R2,subPropertyOf(propertyChain(Chain),R)) :-
        plsyn2owl_ec(R1*R2,(*),Chain),
        !.

plsyn2owl(Pl,Owl) :-
        Pl=..[PlPred,PlProp,of(Num,PlC)],
        cardinality_pred(PlPred),
        plpred2owlpred(PlPred,OwlPred),
        !,
        plsyn2owl(PlProp,Prop),
        plsyn2owl(PlC,C),
        Owl=..[OwlPred,Num,Prop,C].
plsyn2owl(Pl,Owl) :-
        Pl=..[PlPred|Args],
        plpred2owlpred(PlPred,OwlPred),
        !,
        maplist(plsyn2owl,Args,Args2),
        Owl=..[OwlPred|Args2].
plsyn2owl(Pl,Owl) :-
        Pl=..[PlPred|Args],
        plpred2owlpred_list(PlPred,OwlPred),         !,
        maplist(plsyn2owl,Args,Args2),
        Owl=..[OwlPred,[Args2]].

plsyn2owl(Ax--Comments,[PlAx,axiomAnnotation('rdfs:comment',literal(Comments))]) :-
        !,
        plsyn2owl(Ax,PlAx).

plsyn2owl(A=B,sameIndividual(ECs)) :-
        !,
        plsyn2owl_ec(A=B,(=),ECs).
plsyn2owl(A==B,equivalentClasses(ECs)) :-
        !,
        plsyn2owl_ec(A==B,(==),ECs).
plsyn2owl(A=@=B,equivalentProperties(ECs)) :-
        !,
        plsyn2owl_ec(A=@=B,(=@=),ECs).
plsyn2owl(A and B,intersectionOf(ECs)) :-
        !,
        plsyn2owl_ec(A and B,and,ECs).
plsyn2owl(A \^ B,disjointClasses(ECs)) :-
        !,
        plsyn2owl_ec(A \^ B,\^,ECs).
plsyn2owl(A or B,unionOf(ECs)) :-
        !,
        plsyn2owl_ec(A or B,or,ECs).
plsyn2owl(Pl,Owl) :-
                Pl=..[OwlPred|Args],
        Args\=[],
        !,
        maplist(plsyn2owl,Args,Args2),
        Owl=..[OwlPred|Args2].
plsyn2owl(X,X) :- !.


plsyn2owl_ec(T,_,[T]) :-
        var(T),
        !.
plsyn2owl_ec(T,Op,L) :-
        T=..[Op,A,B],
        !,
        plsyn2owl_ec(A,Op,LA),
        plsyn2owl_ec(B,Op,LB),
        append(LA,LB,L).
plsyn2owl_ec(A,_,[AX]) :-
        plsyn2owl(A,AX).

owl2plsyn(Owl,Pl) :-
        Owl=..[OwlPred|Args],
        plpred2owlpred(PlPred,OwlPred),
        !,
        maplist(owl2plsyn,Args,Args2),
        Pl=..[PlPred|Args2].
owl2plsyn(Owl,Pl) :-
        Owl=..[OwlPred|Args],
        plpred2owlpred_list(PlPred,OwlPred),
        !,
        maplist(owl2plsyn,Args,Args2),
        Pl=..[PlPred,[Args2]].
owl2plsyn(propertyAssertion(P,S,O),Pl) :-
        atom(P),
        op(999,xfy,P),
        owl2plsyn(S,SX),
        owl2plsyn(O,OX),
        Pl=..[P,SX,OX].
owl2plsyn(equivalentProperties(Args),Pl) :-
        maplist(owl2plsyn,Args,Args2),
        list_to_chain(Args2,(=@=),Pl).
owl2plsyn(equivalentClasses(Args),Pl) :-
        maplist(owl2plsyn,Args,Args2),
        list_to_chain(Args2,(==),Pl).
owl2plsyn(sameIndividuals(Args),Pl) :-
        maplist(owl2plsyn,Args,Args2),
        list_to_chain(Args2,(=),Pl).
owl2plsyn(intersectionOf(Args),Pl) :-
                sort(Args,ArgsSorted),
        maplist(owl2plsyn,ArgsSorted,Args2),
        list_to_chain(Args2,and,Pl).
owl2plsyn(disjointClasses(Args),Pl) :-
        maplist(owl2plsyn,Args,Args2),
        list_to_chain(Args2,\^,Pl).
owl2plsyn(unionOf(Args),Pl) :-
        maplist(owl2plsyn,Args,Args2),
        list_to_chain(Args2,or,Pl).
owl2plsyn(implies(A,C),(A2->C2)) :-
        swrlatoms2plsyn(A,A2),
        swrlatoms2plsyn(C,C2).
owl2plsyn(literal(type(_,X)),X) :- !.
owl2plsyn(literal(X),X) :- atom(X),!.
owl2plsyn(Owl,Pl) :-
        Owl=..[P|Args],
        Args\=[],
        !,
        maplist(owl2plsyn,Args,Args2),
        Pl=..[P|Args2].
owl2plsyn(X,X) :- !.

swrlatoms2plsyn(A,A2) :-
        is_list(A),
        !,
        maplist(swrlatom2plsyn,A,AL),
        list_to_chain(AL,(,),A2).
swrlatoms2plsyn(A,A2) :-
        !,
        swrlatom2plsyn(A,A2).

swrlatom2plsyn(description(CE,I),H) :-
        !,
        swrlatom2plsyn(I,I2),
        H=..[CE,I2].
swrlatom2plsyn(differentFrom(X,Y),X2 \= Y2) :-
        !,
        swrlatom2plsyn(X,X2),
        swrlatom2plsyn(Y,Y2).
swrlatom2plsyn(IPA,IPA2) :-
        IPA=..[P,X,Y],
        !,
        swrlatom2plsyn(X,X2),
        swrlatom2plsyn(Y,Y2),
        IPA2=..[P,X2,Y2].

swrlatom2plsyn(v(V),X) :- !, swrlatom2plsyn(i(V),X).
swrlatom2plsyn(i(V),X) :- number(V),!,VA is V+96,atom_codes(A,[VA]),atom_concat('?',A,X).
swrlatom2plsyn(i(V),X) :- atom_concat('?',V,X).
swrlatom2plsyn(X,X) :- !.



list_to_chain([X],_,Pl) :- !, owl2plsyn(X,Pl).
list_to_chain([X1|L],Op,Pl) :-
        !,
        list_to_chain(L,Op,X2),
        owl2plsyn(X1,X1Pl),
        Pl=..[Op,X1Pl,X2].


plpred2owlpred(transitive,transitiveProperty).
plpred2owlpred(functional,functionalProperty).
plpred2owlpred(symmetric,symmetricProperty).
plpred2owlpred(reflexive,reflexiveProperty).


plpred2owlpred(min,minCardinality).
plpred2owlpred(max,maxCardinality).
plpred2owlpred(exact,exactCardinality).

plpred2owlpred(some,someValuesFrom).
plpred2owlpred(only,allValuesFrom).
plpred2owlpred(value,hasValue).
plpred2owlpred(not,complementOf).


plpred2owlpred(inverseOf,inverseProperties).

plpred2owlpred(::,classAssertion).
plpred2owlpred(<,subClassOf).
plpred2owlpred(@<,subPropertyOf).

plpred2owlpred_list(\=,differentIndividuals). 

cardinality_pred(min).
cardinality_pred(max).
cardinality_pred(exact).





:- module(owl2_popl,
          [
           replace_matching_axioms/2,
           replace_matching_axioms/3,
           replace_matching_axioms_where/3,
           replace_matching_axioms_where/4,
           replace_expression_in_all_axioms/2,
           replace_expression_in_all_axioms/3,

           popl_translate/1,
           popl_translate/2,
           execute_popl_file/1,
           execute_popl_file/2,
           
           op(1100,xfy,===>),
           op(1000,xfy,where),
           op(950,fx,add)

          ]).

:- op(1100,xfy,===>).
:- op(1000,xfy,where).
:- op(950,fx,add).

:- use_module(owl2_model).
:- use_module(owl2_plsyn).


popl_translate(T) :-
        popl_translate(T, []).

popl_translate( X1 ===> X2 where G, Opts) :-
        debug(popl,'Replacing axioms',[]),
                debug(popl,'Replacing expressions',[]),
        replace_expression_in_all_axioms_where(X1,X2,G,Opts).

popl_translate( X1 ===> X2, Opts) :-
        debug(popl,'translating ~w ===> ~w',[X1,X2]),
        debug(popl,'Replacing axioms',[]),
        replace_matching_axioms(X1,X2,Opts),
        debug(popl,'Replacing expressions ~w ===> ~w',[X1,X2]),
        replace_expression_in_all_axioms(X1,X2,Opts).

popl_translate( add X2 where G, Opts) :-
        replace_matching_axioms_where(true,X2,G,Opts),
        replace_expression_in_all_axioms_where(true,X2,G,Opts).

execute_popl_file(F) :-
        execute_popl_file(F, []).


execute_popl_file(F, Opts) :-
        read_file_to_terms(F,Directives,[]),
        forall(member(Directive,Directives),
               popl_translate(Directive, Opts)).

replace_matching_axioms(Ax1,Ax2,Opts) :-
        forall(axiom(Ax1),replace_axiom(Ax1,Ax2,Opts)).

replace_matching_axioms(Ax1,Ax2) :-
        replace_matching_axioms(Ax1,Ax2,[]).

replace_matching_axioms_where(Ax1a,Ax2a,Ga,Opts) :-
        select(syntax(plsyn),Opts,Opts2),
        !,
        plsyn_owl(Ax1a,Ax1),
        plsyn_owl(Ax2a,Ax2),
        plsyn_owl(Ga,G),
        replace_matching_axioms_where(Ax1,Ax2,G,Opts2).
replace_matching_axioms_where(Ax1,Ax2,G,Opts) :-
        member(reasoner(R),Opts),
        !,
        ensure_loaded(owl2_reasoner),
        forall((reasoner_ask(R,G),
                Ax1),
               replace_axiom(Ax1,Ax2,Opts)),
        forall((G,Ax1),replace_axiom(Ax1,Ax2,Opts)).
replace_matching_axioms_where(Ax1,Ax2,G,Opts) :-
        forall((G,Ax1),replace_axiom(Ax1,Ax2,Opts)).

replace_matching_axioms_where(Ax1,Ax2,G) :-
        replace_matching_axioms_where(Ax1,Ax2,G,[]).


replace_axiom(Ax,Ax,[]) :- !. replace_axiom(Ax1a,Ax2a,Opts) :-
        select(syntax(plsyn),Opts,Opts2),
        !,
        plsyn_owl(Ax1a,Ax1),
        plsyn_owl(Ax2a,Ax2),
        replace_axiom(Ax1,Ax2,Opts2).
replace_axiom(true,Ax2,_Opts) :-
        !,
        assert_axiom(Ax2).
replace_axiom(Ax1,Ax2,Opts) :-
        !,
                        findall(ontologyAxiom(O,Ax2),
                ontologyAxiom(O,Ax1),
                NewOntAxioms),
        (   member(copy(true),Opts)
        ->  true
        ;   retract_axiom(Ax1)),
        debug(popl,'Replacing ~w ==> ~w',[Ax1,Ax2]),
        assert_axiom(Ax2),
                maplist(assert_axiom,NewOntAxioms),
        debug(popl,'  Done',[]).




replace_axiom(Ax1,Ax2) :-
        replace_axiom(Ax1,Ax2,[]).

replace_expression_in_all_axioms(T1,T2) :-
        replace_expression_in_all_axioms(T1,T2,[]).

replace_expression_in_all_axioms(T1,T2,Opts) :-
        replace_expression_in_all_axioms_where(T1,T2,true,Opts).


replace_expression_in_all_axioms_where(T1a,T2a,Ga,Opts) :-
        select(syntax(plsyn),Opts,Opts2),
        !,
        plsyn_owl(T1a,T1),
        plsyn_owl(T2a,T2),
        plsyn_owl(Ga,G),
        replace_expression_in_all_axioms_where(T1,T2,G,Opts2).
replace_expression_in_all_axioms_where(T1,T2,G,Opts) :-
        member(ontology(Ont),Opts),
        !,
        normalize_term(T1,T1_Norm),
        findall(Ax-Ax2,
                (   G,
                    ontologyAxiom(Ont,Ax),
                    debug(popl,'testing: ~w ',[Ax]),
                    replace_expression_in_axiom_term(T1_Norm,T2,Ax,Ax2),
                    Ax2\=Ax,
                    debug(popl,'  scheduling: ~w ==> ~w',[Ax,Ax2])),
                Replacements),
        forall(member(Ax-Ax2,Replacements),
               replace_axiom(Ax,Ax2,Opts)).
replace_expression_in_all_axioms_where(T1,T2,G,Opts) :-
        normalize_term(T1,T1_Norm),
        findall(Ax-Ax2,
                (   G,
                    axiom(Ax),
                    replace_expression_in_axiom_term(T1_Norm,T2,Ax,Ax2),
                    Ax2\=Ax,
                    debug(popl,'scheduling: ~w ==> ~w',[Ax,Ax2])),
                Replacements),
        forall(member(Ax-Ax2,Replacements),
               replace_axiom(Ax,Ax2,Opts)).


replace_expression_in_axiom(T1,T2,Ax,Opts) :-
                replace_expression_in_axiom_term(T1,T2,Ax,Ax2),
        replace_axiom(Ax,Ax2,Opts),
        debug(popl,'DONE Replaced ~w ==> ~w for macro ~w ==> ~w',[Ax,Ax2,T1,T2]).

replace_expression_in_axiom_term(T1,T2,Ax1,Ax2) :-
        nonvar(Ax1),
        normalize_term(Ax1,Ax1_Norm),
        Ax1_Norm=T1,
        Ax2=T2,         !.
replace_expression_in_axiom_term(T1,T2,Ax1,Ax2) :-
        axiom(Ax1),
        normalize_term(Ax1,Ax1_Norm),
        debug(popl_detail,'IN ~w ==> ~w :: ~w',[T1,T2,Ax1_Norm]),
        Ax1_Norm =.. [P|Args1],
        maplist(replace_expression(T1,T2),Args1,Args2),
        debug(popl_detail,'  OUT: ~w',[Args2]),
        Ax2 =.. [P|Args2].
        


replace_expression(_,_,X,X) :- var(X),!. replace_expression(T1,T2,X1,X2) :-
        debug(popl_detail,'attempting_match(~w == ~w)',[T1-T2,X1-X2]),
        copy_term(T1-T2,X1-X2),         debug(popl,'repl(~w ==> ~w)',[X1,X2]),
        !. replace_expression(T1,T2,X1,X2) :-
        is_list(X1),
        !,
        maplist(replace_expression(T1,T2),X1,X2).
replace_expression(T1,T2,X1,X2) :-
        X1 =.. [F|Args1],
        Args1\=[],
        !,
        maplist(replace_expression(T1,T2),Args1,Args2),
        X2 =.. [F|Args2].
replace_expression(_,_,X,X).

normalize_term(X,X) :- var(X),!.
normalize_term(X,X) :- atom(X),!.
normalize_term([],[]) :- !.
normalize_term(L,S) :-
        L=[_|_],
        !,
        sort(L,S).
normalize_term(T,T2) :-
        !,
        T=..[F|Args],
        maplist(normalize_term,Args,Args2),
        T2=..[F|Args2].





:- module(owl2_profiles,
          [
           ontology_profile/2,
           ontology_profile_violation/3,
           trim_axioms_by_profile/2,
           owl2_profile/1,
           axiom_profile/2,
           axiom_profile/3
          ]).

:- use_module(owl2_model).
:- use_module(owl2_metamodel).

ontology_profile(Ont,Profile) :-
        owl2_profile(Profile),
        ontology(Ont),
        forall(ontologyAxiom(Ont,Ax),
               axiom_profile(Ax,Profile,true)).

ontology_profile_violation(Ont,Profile,Ax) :-
        owl2_profile(Profile),
        ontology(Ont),
        ontologyAxiom(Ont,Ax),
        \+ axiom_profile(Ax,Profile,true).

trim_axioms_by_profile(Ont,Profile) :-
        ontology(Ont),
        owl2_profile(Profile),
        !,
        findall(Ax,ontology_profile_violation(Ont,Profile,Ax),Axs),
        forall(member(Ax,Axs),
               retract_axiom(Ax,Ont)).


owl2_profile(owl2_EL).
owl2_profile(owl2_QL).
owl2_profile(owl2_RL).

construct_profile(X,P,T) :- axiom_profile(X,P,T).
construct_profile(X,P,T) :- expression_profile(X,P,T).

axiom_profile(A,P) :- axiom_profile(A,P,true).
:- discontiguous axiom_profile/3.

:- discontiguous expression_profile/3.



expression_profile(C,P,true) :- owl2_profile(P),class(C).
expression_profile(C,P,true) :- owl2_profile(P),property(C).
expression_profile(C,P,true) :- owl2_profile(P),dataRange(C).

axiom_profile(annotationAssertion(_,_,_),_,true).
axiom_profile(ontology(_),_,true).
axiom_profile(annotationProperty(_),_,true).
axiom_profile(Ax,_,true) :- declarationAxiom(Ax).



expression_profile(someValuesFrom(P,_),owl2_EL,true) :- objectProperty(P).
expression_profile(hasValue(P,_),owl2_EL,true) :- objectProperty(P).
expression_profile(hasSelf(P),owl2_EL,true) :- objectProperty(P).
expression_profile(oneOf([I]),owl2_EL,true) :- individual(I).
expression_profile(intersectionOf(L),owl2_EL,true) :- forall(member(X,L),expression_profile(X,owl2_EL,true)).
expression_profile(propertyChain(L),owl2_EL,true) :- forall(member(X,L),expression_profile(X,owl2_EL,true)). 

expression_profile(allValuesFrom(_P,_),owl2_EL,false).
expression_profile(maxCardinality(_P,_),owl2_EL,false).
expression_profile(minCardinality(_P,_),owl2_EL,false).
expression_profile(exactCardinality(_P,_),owl2_EL,false).
expression_profile(maxCardinality(_P,_,_),owl2_EL,false).
expression_profile(minCardinality(_P,_,_),owl2_EL,false).
expression_profile(exactCardinality(_P,_,_),owl2_EL,false).

axiom_profile(subClassOf(A,B),owl2_EL,true) :- expression_profile(A,owl2_EL,true),expression_profile(B,owl2_EL,true).
axiom_profile(equivalentClasses(L),owl2_EL,true) :- forall(member(X,L),expression_profile(X,owl2_EL,true)).
axiom_profile(disjointClasses(L),owl2_EL,true) :- forall(member(X,L),expression_profile(X,owl2_EL,true)).
axiom_profile(subPropertyOf(A,B),owl2_EL,true) :- expression_profile(A,owl2_EL,true),expression_profile(B,owl2_EL,true).
axiom_profile(equivalentProperties(L),owl2_EL,true) :- forall(member(X,L),expression_profile(X,owl2_EL,true)).
axiom_profile(transitiveProperty(_),owl2_EL,true).
axiom_profile(reflexiveProperty(_),owl2_EL,true).
axiom_profile(propertyDomain(A,B),owl2_EL,true) :- expression_profile(A,owl2_EL,true),expression_profile(B,owl2_EL,true).
axiom_profile(propertyRange(A,B),owl2_EL,true) :- expression_profile(A,owl2_EL,true),expression_profile(B,owl2_EL,true).
axiom_profile(sameIndividuals(_,_),owl2_EL,true).
axiom_profile(differentIndividuals(_,_),owl2_EL,true).
axiom_profile(classAssertion(A,_),owl2_EL,true) :- expression_profile(A,owl2_EL,true).
axiom_profile(propertyAssertion(A,_,_),owl2_EL,true) :- expression_profile(A,owl2_EL,true).
axiom_profile(negativePropertyAssertion(A,_,_),owl2_EL,true) :- expression_profile(A,owl2_EL,true).
axiom_profile(functionalProperty(P),owl2_EL,true) :- dataProperty(P).
axiom_profile(hasKey(_,_),owl2_EL,true).


expression_profile(unionOf(_),owl2_EL,false).
expression_profile(complementOf(_),owl2_EL,false).
expression_profile(oneOf([_,_|_]),owl2_EL,false).

axiom_profile(disjointProperties(_),owl2_EL,false).
axiom_profile(irreflexiveProperty(_),owl2_EL,false).
axiom_profile(inverseOf(_),owl2_EL,false).
axiom_profile(inverseProperties(_,_),owl2_EL,false).
axiom_profile(functionalProperty(P),owl2_EL,false) :- objectProperty(P).
axiom_profile(inverseFunctionalProperty(_),owl2_EL,false).
axiom_profile(symmetricProperty(_),owl2_EL,false).
axiom_profile(asymmetricProperty(_),owl2_EL,false).

                                

subClassExpression(A,owl2_QL,true) :- class(A).
subClassExpression(someValuesFrom(P,'owl:Thing'),owl2_QL,true) :- objectPropertyExpression(P).
subClassExpression(someValuesFrom(P,D),owl2_QL,true) :- dataRange(D),dataPropertyExpression(P).

superClassExpression(A,owl2_QL,true) :- class(A).
superClassExpression(intersectionOf(L),owl2_QL,true) :- forall(member(X,L),superClassExpression(X,owl2_QL,true)).
superClassExpression(complementOf(A),owl2_QL,true) :- subClassExpression(A,owl2_QL,true).
superClassExpression(someValuesFrom(P,A),owl2_QL,true) :- class(A),objectPropertyExpression(P).


axiom_profile(subClassOf(A,B),owl2_QL,true) :- subClassExpression(A,owl2_QL,true),superClassExpression(B,owl2_QL,true).
axiom_profile(equivalentClasses(L),owl2_QL,true) :- forall(member(X,L),subClassExpression(X,owl2_QL,true)).
axiom_profile(disjointClasses(L),owl2_QL,true) :- forall(member(X,L),subClassExpression(X,owl2_QL,true)).
axiom_profile(subPropertyOf(A,B),owl2_QL,true) :- expression_profile(A,owl2_QL,true),expression_profile(B,owl2_QL,true).
axiom_profile(equivalentProperties(L),owl2_QL,true) :- forall(member(X,L),expression_profile(X,owl2_QL,true)).
axiom_profile(disjointProperties(_),owl2_QL,true).
axiom_profile(inverseProperties(_,_),owl2_QL,true).
axiom_profile(propertyRange(A,B),owl2_QL,true) :- objectPropertyExpression(A),superClassExpression(B,owl2_QL,true).
axiom_profile(propertyRange(A,_B),owl2_QL,true) :- dataPropertyExpression(A).
axiom_profile(propertyDomain(_A,B),owl2_QL,true) :- superClassExpression(B,owl2_QL,true).


axiom_profile(reflexiveProperty(_),owl2_QL,true).
axiom_profile(symmetricProperty(_),owl2_QL,true).
axiom_profile(asymmetricProperty(_),owl2_QL,true).

axiom_profile(differentIndividuals(_,_),owl2_QL,true).
axiom_profile(classAssertion(A,_),owl2_QL,true) :- expression_profile(A,owl2_QL,true).
axiom_profile(propertyAssertion(A,_,_),owl2_QL,true) :- expression_profile(A,owl2_QL,true).

expression_profile(someValuesFrom(P,_),owl2_QL,true) :- objectProperty(P).
expression_profile(hasValue(P,_),owl2_QL,true) :- objectProperty(P).
expression_profile(hasSelf(P),owl2_QL,true) :- objectProperty(P).
expression_profile(oneOf([I]),owl2_QL,true) :- individual(I).
expression_profile(intersectionOf(L),owl2_QL,true) :- forall(member(X,L),expression_profile(X,owl2_QL,true)).



expression_profile(allValuesFrom(_P,_),owl2_QL,false).
expression_profile(maxCardinality(_P,_),owl2_QL,false).
expression_profile(minCardinality(_P,_),owl2_QL,false).
expression_profile(exactCardinality(_P,_),owl2_QL,false).
expression_profile(maxCardinality(_P,_,_),owl2_QL,false).
expression_profile(minCardinality(_P,_,_),owl2_QL,false).
expression_profile(exactCardinality(_P,_,_),owl2_QL,false).



expression_profile(unionOf(_),owl2_QL,false).
expression_profile(complementOf(_),owl2_QL,false).
expression_profile(oneOf([_,_|_]),owl2_QL,false).
expression_profile(propertyChain(_),owl2_QL,false).

axiom_profile(transitiveProperty(_),owl2_QL,false).
axiom_profile(functionalProperty(_),owl2_QL,false).
axiom_profile(irreflexiveProperty(_),owl2_QL,false).
axiom_profile(inverseFunctionalProperty(_),owl2_QL,false).
axiom_profile(hasKey(_,_),owl2_QL,false).
axiom_profile(negativePropertyAssertion(_,_,_),owl2_QL,false).
axiom_profile(sameIndividuals(_,_),owl2_QL,false).








:- module(owl2_reasoner,
          [
	   initialize_reasoner/2,
	   initialize_reasoner/3,
	   reasoner_tell/2,
	   reasoner_tell_all/1,
	   reasoner_ask/3,
	   reasoner_ask/2,
           reasoner_ask/1,
	   reasoner_check_consistency/2,
           reasoner_cache_to_file/3
          ]).

:- use_module(owl2_model).

:- multifile owl2_reasoner:initialize_reasoner_hook/3.
:- multifile owl2_reasoner:reasoner_tell_hook/2.
:- multifile owl2_reasoner:reasoner_tell_all_hook/1.
:- multifile owl2_reasoner:reasoner_ask_hook/2. :- multifile owl2_reasoner:reasoner_ask_hook/3. :- multifile owl2_reasoner:reasoner_check_consistency_hook/2. :- multifile owl2_reasoner:reasoner_unsatisfiable_class_hook/2. 
:- multifile owl2_reasoner:cached_subClassOf/2.
:- multifile owl2_reasoner:cached_classAssertion/2.
:- multifile owl2_reasoner:cached_propertyAssertion/3.

initialize_reasoner(Type,Reasoner) :- 
	initialize_reasoner(Type,Reasoner,[]).

initialize_reasoner(Type,Reasoner,Opts) :-
        load_handler(Type,Opts),
	initialize_reasoner_hook(Type,Reasoner,Opts),
        debug(reasoner,'Initialized reasoner: ~w',[Reasoner]),
        nb_setval(reasoner,Reasoner),
        !.
initialize_reasoner(null,null,_) :- !.
initialize_reasoner(cached(File),cached(File),_) :-
        !,
        load_files([File],[qcompile(large)]).
initialize_reasoner(Type,_,Opts) :- 
        throw(error(initialize_reasoner(Type,Opts))).
	
reasoner_tell(Reasoner,Axiom) :- 
	reasoner_tell_hook(Reasoner,Axiom).

reasoner_tell_all(Reasoner) :- 
	reasoner_tell_all_hook(Reasoner),
	!.
reasoner_tell_all(Reasoner) :- 
	forall(axiom(A),
	       reasoner_tell(Reasoner,A)).


reasoner_ask(Reasoner,Axiom,IsDirect) :-          debug(reasoner,'Reasoner query: ~w',[Axiom]),
	reasoner_ask_hook(Reasoner,Axiom,IsDirect).

reasoner_ask(Reasoner,unsatisfiable(X)) :-
        reasoner_unsatisfiable_class(Reasoner,X).
reasoner_ask(Reasoner,reflexiveSubClassOf(X,Y)) :-
        reasoner_ask(Reasoner,subClassOf(X,Y)).
reasoner_ask(_,reflexiveSubClassOf(X,X)) :-
        class(X).
        
reasoner_ask(Reasoner,Axiom) :- 
        debug(reasoner,'Reasoner query: ~w',[Axiom]),
	reasoner_ask_hook(Reasoner,Axiom).
reasoner_ask(Reasoner,Axiom) :-
        nonvar(Reasoner),
        Reasoner=null,
        Axiom.
reasoner_ask(cached(_),subClassOf(A,B)) :- cached_subClassOf(A,B).
reasoner_ask(cached(_),classAssertion(A,B)) :- cached_classAssertion(A,B).
reasoner_ask(cached(_),propertyAssertion(A,B,C)) :- cached_propertyAssertion(A,B,C).

reasoner_ask(Axiom) :-
        nb_current(reasoner,Reasoner),
        !,
        reasoner_ask(Reasoner,Axiom).
reasoner_ask(Axiom) :-
        reasoner_ask(_,Axiom).



reasoner_check_consistency(Reasoner) :- 
        reasoner_check_consistency(Reasoner,true).
reasoner_check_consistency(Reasoner,V) :- 
	reasoner_check_consistency_hook(Reasoner,V).

reasoner_unsatisfiable_class(Reasoner,C) :- 
	reasoner_unsatisfiable_class_hook(Reasoner,C).

reasoner_cache_to_file(Reasoner,AxiomTemplate,File) :-
        open(File,write,Out,[]),
        reasoner_cache_to_stream(Reasoner,AxiomTemplate,Out),
        close(Out).

reasoner_cache_to_stream(Reasoner,AxiomTemplate,Out) :-
        AxiomTemplate =.. [P|Args],
        atom_concat('cached_',P,P2),
        StoreTemplate =.. [P2|Args],
        forall(reasoner_ask(Reasoner,AxiomTemplate),
               write_precomputed_axiom(StoreTemplate,Out)).

write_precomputed_axiom(Ax,Out) :-
        format(Out,'~q.~n',[Ax]).




load_handler(Type,_Opts) :-
        forall(reasoner_module(Type,Mod),
	       ensure_loaded(library(thea2/Mod))).

reasoner_module(pellet,owl2_java_owlapi).
reasoner_module(factpp,owl2_java_owlapi).
reasoner_module(hermit,owl2_java_owlapi).
reasoner_module(owlapi(_),owl2_java_owlapi).
reasoner_module(graph_reasoner,owl2_graph_reasoner).






:- module(owl2_reasoning_rules,[]).

:- use_module(owl2_model).

:- abolish(owl2_model:subClassOf/2).
:- abolish(owl2_model:subPropertyOf/2).
:- abolish(owl2_model:classAssertion/2).
:- abolish(owl2_model:propertyAssertion/3).

:- multifile owl2_model:subClassOf/2.
:- multifile owl2_model:subPropertyOf/2.
:- multifile owl2_model:classAssertion/2.
:- multifile owl2_model:propetyAssertion/3.

:- table owl2_model:subClassOf/2.
:- table owl2_model:subPropertyOf/2.
:- table owl2_model:classAssertion/2.
:- table owl2_model:propertyAssertion/3.




someValuesFrom_propchain(_,[]).
someValuesFrom_propchain(X,[P|PL]):-
        subClassOf(X,someValuesFrom(P,Y)),
        someValuesFrom_propchain(Y,PL).


:- table subClassOf_all/2.
owl2_model:subClassOf_all(_,[]).
owl2_model:subClassOf_all(X,[D|L]):-
        subClassOf(X,D),
        subClassOf_all(X,L).

:- table pairwise_equivalent_class/2.
pairwise_equivalent_class(X,Y) :- equivalentClasses(L),member(X,L),member(Y,L).
pairwise_equivalent_class(X,Y) :- subClassOf(X,Y),subClassOf(Y,X).

:- table pairwise_disjoint_class/2.
pairwise_disjoint_class(X,Y) :- disjointClasses(L),member(X,L),member(Y,L).
pairwise_disjoint_class(X,Y) :- subClassOf(X,Y),subClassOf(Y,X).

owl2_model:subPropertyOf(X,Y) :- subPropertyOf(X,Z),subPropertyOf(Z,Y).

owl2_model:subClassOf(X,Y) :- subClassOf(X,Z),subClassOf(Z,Y).

owl2_model:subClassOf(X,Y) :-
        pairwise_equivalent_class(X,Y).

owl2_model:subClassOf(X,Y) :-
        pairwise_equivalent_class(X,intersectionOf(L)),
        member(Y,L).

owl2_model:subClassOf(X,Y) :-
        pairwise_equivalent_class(Y,unionOf(L)),
        member(X,L).

owl2_model:subClassOf(X,Y) :-
        pairwise_equivalent_class(Y,intersectionOf(L)),
        subClassOf_all(X,L).

owl2_model:subClassOf(X,someValuesFrom(P,D)) :-
        subPropertyOf(P1,P),
        subClassOf(X,someValuesFrom(P1,D)).


owl2_model:subClassOf(X,someValuesFrom(P,Y)) :-
        subClassOf(X,someValuesFrom(P,D)),
	transitiveProperty(P),
        subClassOf(D,someValuesFrom(P,Y)).





:- table unsatisfiable/1.
unsatisfiable(X) :-
        pairwise_disjoint_class(A,B),
        subClassOf(X,A),
        subClassOf(X,B).



owl2_model:classAssertion(C,I) :- classAssertion(C2,I),subClassOf(C2,C).

owl2_model:classAssertion(C,I) :- propertyDomain(P,C),propertyAssertion(P,I,_).
owl2_model:classAssertion(C,I) :- propertyRange(P,C),propertyAssertion(P,_,I).

owl2_model:propertyAssertion(P,A,B) :- transitiveProperty(P),propertyAssertion(P,A,C),propertyAssertion(P,C,B).
owl2_model:propertyAssertion(P,A,B) :- symmetricProperty(P),propertyAssertion(P,B,A).
owl2_model:propertyAssertion(P,A,B) :- inverseProperties(P,Q),propertyAssertion(Q,B,A).
owl2_model:propertyAssertion(Q,A,B) :- subPropertyOf(P,Q),propertyAssertion(P,A,B).


propertyAssertion_chain([],_,_).
propertyAssertion_chain([P|PL],A,B) :- propertyAssertion(P,A,C),propertyAssertion_chain(PL,C,B).

sameAs(A,B) :- propertyAssertion(P,X,A),functionalProperty(P),propertyAssertion(P,X,B).
sameAs(A,B) :- propertyAssertion(P,A,X),inverseFunctionalProperty(P),propertyAssertion(P,B,X).

illegal(P) :- propertyAssertion(P,A,A),irreflexiveProperty(P).
illegal(P) :- propertyAssertion(P,A,B),asymmetricProperty(P),propertyAssertion(P,B,A).








:-module(owl2_rl_rules,
	 [
	  is_entailed/2,

	  get_tbox_entailments/0,
	  set_tbox/1,
	  clear_entailments/0
	 ]).





:- use_module(owl2_from_rdf).
:- use_module(owl2_model).

:- dynamic entails/3.
:- dynamic entailment/2.
:- dynamic tbox/1.

:- discontiguous is_entailed/2.
:- discontiguous is_entailed/3.

t(Axiom,Count) :- time(aggregate_all(count,(is_entailed(Axiom,_Expl)),Count)).

t(Count) :- time(aggregate_all(count,(is_entailed(_Axiom,_Expl)),Count)).

tbox_axiom_pred(subClassOf/2).
tbox_axiom_pred(equivalentClasses/1).
tbox_axiom_pred(subPropertyOf/2).
tbox_axiom_pred(equivalentProperties/1).
tbox_axiom_pred(propertyDomain/2).
tbox_axiom_pred(propertyRange/2).


clear_entailments :-
	retractall(entailment(_,_)).

get_tbox_entailments :-
	clear_entailments,
	set_tbox(none),
	forall((tbox_axiom_pred(F/A),functor(Pred,F,A),is_entailed(Pred,Expl)),
	       u_assert(entailment(Pred,Expl))),
	set_tbox(saved).

set_tbox(X) :-
	retractall(tbox(_)),
	assert(tbox(X)).


u_assert(X) :-
	call(X),!.
u_assert(X) :-
        debug(rl_rules,'asserting : ~w',[X]),
        assert(X).




is_entailed(Axiom,Expl) :-
	tbox(saved),!,
	tbox_axiom_pred(F/A),
	functor(Axiom,F,A),
	entailment(Axiom,Expl).


is_entailed(subClassOf(X,Y),Expl) :-
	is_entailed(subClassOf(X,Y),Expl,[X]).

is_entailed(subClassOf(X,X),axiom(class(X)),_) :- axiom(class(X)).

is_entailed(subClassOf(X,Y),axiom(equivalentClasses-sym([X,Y])),_) :-
	eq_classes(X,Y).

is_entailed(subClassOf(X,Y),axiom(subClassOf(X,Y)),_Visited) :-
	axiom(subClassOf(X,Y)).

is_entailed(subClassOf(X,Y),scm-sco(axiom(subClassOf(X,Z)),Expl),Visited) :-
	axiom(subClassOf(X,Z)),not(member(Z,Visited)),
	is_entailed(subClassOf(Z,Y),Expl,[X,Z|Visited]).


is_entailed(subClassOf(C1,C2),scm-int(E1),_Visited) :-
	(   axiom(subClassOf(C1,intersectionOf(L))),E1=axiom(subClassOf(C1,intersectionOf(L))) ;
	axiom(equivalentClasses([C1,intersectionOf(L)])), E1 = axiom(equivalentClasses([C1,intersectionOf(L)])) ;
	axiom(equivalentClasses([intersectionOf(L),C1])), E1 = axiom(equivalentClasses([C1,intersectionOf(L)]))),
		member(C2,L).
	

is_entailed(subClassOf(C1,unionOf(L)),scm-uni(unionOf(L)),_Visited) :-
	class_exp(unionOf(L)),member(C1,L).


is_entailed(subClassOf(hasValue(P1,I),hasValue(P2,I)),scm-hv(class_exp(hasValue(P1,I)),
							     class_exp(hasValue(P2,I)),
							     E3),Visited) :-
	class_exp(hasValue(P1,I)),
	class_exp(hasValue(P2,I)),
	not(member(hv(P2),Visited)),
	is_entailed(subPropertyOf(P1,P2),E3,[hv(P1)|Visited]).


is_entailed(subClassOf(someValuesFrom(P,Y1),someValuesFrom(P,Y2)),
	    scm-svf1(class_exp(someValuesFrom(P,Y1)),
		     class_exp(someValuesFrom(P,Y2)),
		     E3),Visited) :-
	class_exp(someValuesFrom(P,Y1)),
	class_exp(someValuesFrom(P,Y2)),Y2 \= Y1,
	not(member(svf(Y2),Visited)),
	is_entailed(subClassOf(Y1,Y2),E3,[svf(Y1)|Visited]).


is_entailed(subClassOf(allValuesFrom(P,Y1),allValuesFrom(P,Y2)),
	    scm-avf1(class_exp(allValuesFrom(P,Y1)),
		     class_exp(allValuesFrom(P,Y2)),
		     E3),Visited) :-
	class_exp(allValuesFrom(P,Y1)),
	class_exp(allValuesFrom(P,Y2)),Y2 \= Y1,
	not(member(avf(Y2),Visited)),
	is_entailed(subClassOf(Y1,Y2),E3,[avf(Y1)|Visited]).


is_entailed(subClassOf(someValuesFrom(P1,Y),someValuesFrom(P2,Y)),
	    scm-svf2(class_exp(someValuesFrom(P1,Y)),
		     class_exp(someValuesFrom(P2,Y)),
		     E3),Visited) :-
	class_exp(someValuesFrom(P1,Y)),
	class_exp(someValuesFrom(P2,Y)),P2 \= P1,
	not(member(svf2(P2),Visited)),
	is_entailed(subPropertyOf(P1,P2),E3,[svf2(P1)|Visited]).

is_entailed(subClassOf(allValuesFrom(P1,Y),allValuesFrom(P2,Y)),
	    scm-avf1(class_exp(allValuesFrom(P1,Y)),
		     class_exp(allValuesFrom(P2,Y)),
		     E3),Visited) :-
	class_exp(allValuesFrom(P1,Y)),
	class_exp(allValuesFrom(P2,Y)),P2 \= P1,
	not(member(avf2(P2),Visited)),
	is_entailed(subPropertyOf(P1,P2),E3,[avf2(P1)|Visited]).


is_entailed(equivalentClasses([X,Y]),Expl) :-
	is_entailed(equivalentClasses([X,Y]),Expl,[X]).

is_entailed(equivalentClasses([X,X]),axiom(equivalentClasses([X,X])),[X]) :- axiom(class(X)).
is_entailed(equivalentClasses([X,Y]),axiom(equivalentClasses([X,Y])),Visited) :-
	axiom(equivalentClasses([X,Y])), not(member(Y,Visited)).

is_entailed(equivalentClasses([X,Y]),axiom(equivalentClasses([X,Y])),Visited) :-
	axiom(equivalentClasses([Y,X])), not(member(Y,Visited)).

is_entailed(equivalentClasses([X,Y]),eq-sym(axiom(equivalentClasses([X,Z])),Expl),Visited) :-
	axiom(equivalentClasses([X,Z])),not(member(Z,Visited)),
	is_entailed(equivalentClasses([Z,Y]),Expl,[Z|Visited]).



is_entailed(sameIndividual([X,Y]),Expl) :-
	var(X),
	is_entailed(sameIndividual([Y,X]),Expl,[Y]).

is_entailed(sameIndividual([X,Y]),Expl) :-
	nonvar(X),
	is_entailed(sameIndividual([X,Y]),Expl,[X]).


is_entailed(sameIndividual([X,Y]),axiom(sameIndividual([X,Y])),Visited) :-
	axiom(sameIndividual([X,Y])), not(member(Y,Visited)).

is_entailed(sameIndividual([X,Y]),axiom(sameIndividual([X,Y])),Visited) :-
	axiom(sameIndividual([Y,X])), not(member(Y,Visited)).

is_entailed(sameIndividual([X,Y]),eq-sym(axiom(sameIndividual([X,Z])),Expl),Visited) :-
	axiom(sameIndividual([X,Z])),not(member(Z,Visited)),
	is_entailed(sameIndividual([Z,Y]),Expl,[Z|Visited]).


is_entailed(sameIndividual([Y1,Y2]),prp-fp(E1,E2),Visited) :-
	not(member(prp-fp(Y1),Visited)), not(member(prp-fp(Y2),Visited)),
	axiom(functionalProperty(P)),
	is_entailed(propertyAssertion(P,X,Y1),E1,[prp-fp(Y1)|Visited]),
	is_entailed(propertyAssertion(P,X,Y2),E2,[prp-fp(Y2)|Visited]),
	Y1 \= Y2.


is_entailed(sameIndividual([X1,X2]),prp-ifp(E1,E2),Visited) :-
	not(member(prp-ifp(X1),Visited)), not(member(prp-ifp(X2),Visited)),
	axiom(inverseFunctionalProperty(P)),
	is_entailed(propertyAssertion(P,X1,Y),E1,[prp-ifp(X1)|Visited]),
	is_entailed(propertyAssertion(P,X2,Y),E2,[prp-ifp(X2)|Visited]).


is_entailed(sameIndividual([Y1,Y2]),cls-maxc2(E1,E2,E3)) :-
	(   axiom(equivalentClasses([C,maxCardinality(1,P)]))
	;
	    axiom(subClassOf(C,maxCardinality(1,P)))
	),
	is_entailed(classAssertion(C,U),E1),
	is_entailed(propertyAssertion(P,U,Y1),E2),
	is_entailed(propertyAssertion(P,U,Y2),E3).



is_entailed(propertyAssertion(P,X,V),Expl) :-
	is_entailed(propertyAssertion(P,X,V),Expl,[]).

is_entailed(propertyAssertion(P,X,V),axiom(propertyAssertion(P,X,V)),Visited) :-
	axiom(propertyAssertion(P,X,V)),not(member(P-X-V,Visited)).

is_entailed(propertyAssertion(P,X,Y),prp-symp(propertyAssertion(P,Y,X)),Visited) :-
	axiom(symmetricProperty(P)),
	axiom(propertyAssertion(P,Y,X)), not(member(P-Y-X,Visited)).

is_entailed(propertyAssertion(P,I1,V),eq-rep-s(Expl1,Expl2),Visited) :-
	 is_entailed(sameIndividual([I1,I2]),Expl1),
	 not(member(eq-rep-s(I2),Visited)),
	 debug(rl-rules,'pa(P,I1,V1) eq-rep-s I2 ~w ~w ~w ~w',[P,I1,V,I2]),
	 is_entailed(propertyAssertion(P,I2,V),Expl2,[eq-rep-s(I1)|Visited]).

is_entailed(propertyAssertion(P,X,V2),eq-rep-o(Expl1,Expl2),Visited) :-
	 nonvar(V2), 	 is_entailed(sameIndividual([V1,V2]),Expl1),
	 not(member(eq-rep-o(V2),Visited)),
	 is_entailed(propertyAssertion(P,X,V1),Expl2,[eq-rep-o(V1)|Visited]).

is_entailed(propertyAssertion(P,X,Y),prp-trp(axiom(propertyAssertion(P,X,Z)),Expl),Visited) :-
	axiom(transitiveProperty(P)),
	axiom(propertyAssertion(P,X,Z)),not(member(prp-trp(Z),Visited)),
	is_entailed(propertyAssertion(P,Z,Y),Expl,[prp-trp(Z)|Visited]).

is_entailed(propertyAssertion(P2,X,Y),prp-spo1(subPropertyOf(P1,P2),Expl),Visited) :-
	axiom(subPropertyOf(P1,P2)),
	not(member(prp-spo1(P2),Visited)),
	is_entailed(propertyAssertion(P1,X,Y),Expl,[prp-spo1(P1)|Visited]).


is_entailed(propertyAssertion(P2,X,Y),prp-eqp1(equivalentProperties([P1,P2]),Exp2),Visited):-
	eq_properties(P1,P2),
	not(member(prp-eqp1(P2),Visited)),
	is_entailed(propertyAssertion(P1,X,Y),Exp2,[prp-eqp1(P1)|Visited]).

is_entailed(propertyAssertion(P2,X,Y),prp-inv1(inverseOf([P1,P2]),Exp2),Visited):-
	inv_properties(P1,P2),
	not(member(prp-inv1(P2),Visited)),
	is_entailed(propertyAssertion(P1,X,Y),Exp2,[prp-inv1(P1)|Visited]).

is_entailed(propertyAssertion(P,I,V),cls-hv1(Exp1)):-
		is_entailed(classAssertion(hasValue(P,V),I),Exp1).


eq_properties(P1,P2) :-
	(   axiom(equivalentProperties([P1,P2])),!;axiom(equivalentProperties([P2,P1]))).

inv_properties(P1,P2) :-
	(   axiom(inverseProperties(P1,P2));axiom(inverseProperties(P2,P1))).

eq_classes(C1,C2) :-
	(   axiom(equivalentClasses([C1,C2])),! ; axiom(equivalentClasses([C2,C1]))).

class_exp(Exp) :-
	(   axiom(subClassOf(_,Exp)) ; axiom(subClassOf(Exp,_)) ;
	axiom(equivalentClasses(E)), member(Exp,E)).


is_entailed(false,eq-diff1) :-
	axiom(sameIndividual(X,Y)),
	(   axiom(differentIndividuals([X,Y])) ; axiom(differentIndividuals([Y,X]))).

is_entailed(false,prp-irp(axiom(irreflexive(P)),E)) :-
	axiom(ireflexiveProperty(P)),
	is_entailed(propertyAssertion(P,X,X),E).

is_entailed(false,prp-asyp(E1,E2)) :-
	axiom(assymetricProperty(P)),
	is_entailed(propertyAssertion(P,X,Y),E1),
	is_entailed(propertyAssertion(P,Y,X),E2).

is_entailed(false,prp-pdw(axiom(disjointProperties([P1,P2])),E2,E3)) :-
       axiom(disjointProperties([P1,P2])),
       is_entailed(propertyAssertion(P1,X,Y),E2),
       is_entailed(propertyAssertion(P2,X,Y),E3).

is_entailed(false,prp-adp(axiom(disjointProperties([P1,P2])),E2,E3)) :-
	axiom(disjointProperties([P1,P2])),
	is_entailed(propertyAssertion(P1,X,Y),E2),
	is_entailed(propertyAssertion(P2,X,Y),E3).

is_entailed(false,cls-nothing2,axiom(classAssertion('owl:Nothing',X))) :-
	axiom(classAssertion('owl:Nothing',X)).


is_entailed(classAssertion(C,X),E) :-
	is_entailed(classAssertion(C,X),E,[]).

is_entailed(classAssertion(C,X),axiom(classAssertion(C,X)),Visited) :-
	axiom(classAssertion(C,X)),not(member(C-X,Visited)).



is_entailed(classAssertion(C2,X),cls-int1(E1,E2),Visited) :-
	is_entailed(subClassOf(C1,intersectionOf(L)),E1),
	member(C2,L),C2 \= C1, not(member(sc(C1),Visited)),
	is_entailed(classAssertion(C1,X),E2,[sc(C2)|Visited]).


is_entailed(classAssertion(unionOf(L),X),cls-uni(unionOf(L),E2),Visited) :-
	class_exp(unionOf(L)),
	member(C1,L),not(member(sc(C1),Visited)),
	is_entailed(classAssertion(C1,X),E2,[sc(unionOf(L))|Visited]).

is_entailed(classAssertion(C,X),oneOf(E1,E2),_):-
	class_exp(oneOf(L)),member(X,L),
	is_entailed(subClassOf(oneOf(L),C1),E1),
	is_entailed(subClassOf(C1,C),E2).


is_entailed(classAssertion(someValuesFrom(P,C1),X),cls-svf1(E2,E3),Visited) :-
	(   axiom(equivalentClasses([_,someValuesFrom(P,C1)]))
	;
	    axiom(subClassOf(_,someValuesFrom(P,C1)))
	),
	is_entailed(propertyAssertion(P,X,V),E2),
	not(member(cls-svf1(C1),Visited)),
	is_entailed(classAssertion(C1,V),E3,[cls-svf1(C1)|Visited]).

is_entailed(classAssertion(Y,V),cls-avf(subClassOf(C,allValuesFrom(P,Y)),E1,E2),Visited) :-
	(   axiom(equivalentClasses([C,allValuesFrom(P,Y)]))
	;
	    axiom(subClassOf(C,allValuesFrom(P,Y)))
	),
	is_entailed(propertyAssertion(P,U,V),E1),
	not(member(cls-avf(P,Y),Visited)),
	is_entailed(classAssertion(C,U),E2,[cls-avf(P,Y)|Visited]).


is_entailed(classAssertion(C2,I),cax-sco-eqc(E1,E2),Visited) :-
	is_entailed(subClassOf(C1,C2),E1),C1 \= C2 ,
	not(member(sc(C1),Visited)),
	is_entailed(classAssertion(C1,I),E2,[sc(C2)|Visited]).

is_entailed(classAssertion(C,Y),prp-rng(E1,E2)) :-
	is_entailed(propertyRange(P,C),E1),
	is_entailed(propertyAssertion(P,_,Y),E2,[]).

is_entailed(classAssertion(C,X),prp-dom(E1,E2)) :-
	is_entailed(propertyDomain(P,C),E1),
	is_entailed(propertyAssertion(P,X,_),E2,[]).



is_entailed(subPropertyOf(X,Y),Expl) :-
	is_entailed(subPropertyOf(X,Y),Expl,[X]).

is_entailed(subPropertyOf(X,X),axiom(objectProperty(X)),[X]) :- axiom(objectProperty(X)).

is_entailed(subPropertyOf(X,X),axiom(datatypeProperty(X)),[X]) :- axiom(datatypeProperty(X)).

is_entailed(subPropertyOf(X,Y),axiom(equivalentProperties-sym([X,Y])),_) :-
	eq_properties(X,Y).

is_entailed(subPropertyOf(X,Y),axiom(subPropertyOf(X,Y)),_Visited) :-
	axiom(subPropertyOf(X,Y)).

is_entailed(subPropertyOf(X,Y),scm-spo(axiom(subPropertyOf(X,Z)),Expl),Visited) :-
	axiom(subPropertyOf(X,Z)),not(member(sp(Z),Visited)),
	is_entailed(subPropertyOf(Z,Y),Expl,[sp(Z)|Visited]).


is_entailed(propertyDomain(P,C),Expl) :-
	is_entailed_pd1(propertyDomain(P,C),Expl);
	is_entailed_pd2(propertyDomain(P,C),Expl).


is_entailed_pd1(propertyDomain(P,D2),scm-dom1(E1,E2)) :-
	axiom(propertyDomain(P,D)),E1 = axiom(propertyDomain(P,D)),
	is_entailed(subClassOf(D2,D),E2).

is_entailed_pd2(propertyDomain(P1,D),scm-dom2(E1,E2)) :-
	axiom(propertyDomain(P,D)),E1 = axiom(propertyDomain(P,D)),
	is_entailed(subPropertyOf(P1,P),E2).


is_entailed(propertyRange(P,C),Expl) :-
	is_entailed_pr1(propertyRange(P,C),Expl);
	is_entailed_pr2(propertyRange(P,C),Expl).

is_entailed_pr1(propertyRange(P,C2),scm-rng1(E1,E2)) :-
	axiom(propertyRange(P,C)),E1 = axiom(propertyRange(P,C)),
	is_entailed(subClassOf(C2,C),E2).


is_entailed_pr2(propertyRange(P1,C),scm-rng2(E1,E2)) :-
	axiom(propertyRange(P,C)),E1 = axiom(propertyRange(P,C)),
	is_entailed(subPropertyOf(P1,P),E2).









entails(eq-sym, [sameAs(X,Y)],[sameAs(Y,X)]).
entails(eq-trans, [sameAs(X,Z),sameAs(Z,Y)],[sameAs(X,Y)]).

entails(eq-rep-s,[sameAs(X,Y),propertyAssertion(P,X,V)],[propertyAssertion(P,Y,V)]).
entails(eq-rep-p,[sameAs(P1,P2),propertyAssertion(P1,X,V)],[propertyAssertion(P2,X,V)]).
entails(eq-rep-o,[sameAs(V1,V2),propertyAssertion(P,X,V1)],[propertyAssertion(P,X,V2)]).
entails(eq-diff1,[sameAs(X,Y),differentFrom(X,Y)],[false]).

entails(prp-dom, [propertyDomain(P,C),propertyAssertion(P,X,_)],[classAssertion(C,X)]).
entails(prp-rng, [propertyRange(P,C),propertyAssertion(P,_,Y)],[classAssertion(C,Y)]).
entails(prp-fp,  [functionalProperty(P),propertyAssertion(P,X,Y1),propertyAssertion(P,X,Y2),pl(Y1 \= Y2)],[sameAs(Y1,Y2)]).
entails(prp-ifp, [inverseFunctionalProperty(P),propertyAssertion(P,X1,Y),propertyAssertion(P,X2,Y)],[sameAs(X1,X2)]).
entails(prp-irp, [irreflexiveProperty(P),propertyAssertion(P,X,X)],[false]).
entails(prp-symp,[symmetricProperty(P),propertyAssertion(P,X,Y)],[propertyAssertion(P,Y,X)]).
entails(prp-asyp,[asymmetricProperty(P),propertyAssertion(P,X,Y),propertyAssertion(P,Y,X)],[false]).
entails(prp-trp, [transitiveProperty(P),propertyAssertion(P,X,Y),propertyAssertion(P,Y,Z)],[propertyAssertion(P,X,Z)]).
entails(prp-spo1,[subPropertyOf(P1,P2),propertyAssertion(P1,X,Y)],[propertyAssertion(P2,X,Y)]).
entails(prp-eqp1,[equivalentProperties([P1,P2]),propertyAssertion(P1,X,Y)],[propertyAssertion(P2,X,Y)]).
entails(prp-eqp2,[equivalentProperties([P1,P2]),propertyAssertion(P2,X,Y)],[propertyAssertion(P1,X,Y)]).
entails(prp-pdw, [disjointProperties(P1,P2),propertyAssertion(P1,X,Y),propertyAssertion(P2,X,Y)],[false]).
entails(prp-adp, [disjointProperties(P),pl(select(P1,P,Rest)),pl(member(P2,Rest)),
		  propertyAssertion(P1,X,Y),
		  propertyAssertion(P2,X,Y)],[false]).
entails(prp-inv1,[inverseOf(P1,P2),propertyAssertion(P1,X,Y)],[propertyAssertion(P2,Y,X)]).
entails(prp-inv2,[inverseOf(P1,P2),propertyAssertion(P2,X,Y)],[propertyAssertion(P1,Y,X)]).



entails(cls-nothing2,[classAssertion('owl:Nothing',_X)],[false]).
entails(cls-int1, [equivalentClasses([C,intersectionOf(L)]),
		   pl(classAssertionList(L,X))],[classAssertion(C,X)]).


entails(cls-int2, [equivalentClasses([C,intersectionOf(L)]),
		   classAssertion(C,X),pl(member(C1,L))],[classAssertion(C1,X)]).

entails(cls-int2s, [subClassOf(C,intersectionOf(L)),
		   classAssertion(C,X),pl(member(C1,L))],[classAssertion(C1,X)]).

entails(cls-uni,  [equivalentClasses([C,unionOf(L)]),classAssertion(C1,X),
		   pl(member(C1,L))],[classAssertion(C,X)]).

entails(cls-unis,  [subClassOf([unionOf(L),C]),classAssertion(C1,X),
		   pl(member(C1,L))],[classAssertion(C,X)]).
entails(ls-svf1, [subClassOf(C,someValuesFrom(P,Y)),propertyAssertion(P,X,V),
		  classAssertion(Y,V)],[classAssertyion(C,X)]).
entails(cls-avf,[classAssertion(allValuesFrom(P,Y),U),propertyAssertion(P,U,V)],
	[classAssertion(Y,V)]).
entails(cls-hv1, [classAssertion(hasValue(P,V),I)],[propertyAssertion(P,I,V)]).
entails(cls-hv2, [classAssertion(hasValue(P,V),I),propertyAssertion(P,X,I)],[classAssertion(hasValue(P,V),X)]).



entails(cls-maxc2, [classAssertion(maxCardinality(1,P),U),
		    propertyAssertion(P,U,Y1),
		    propertyAssertion(P,U,Y2), pl(Y1 \= Y2)],[sameAs(Y1,Y2)]).


entails(cls-oo,  [subClassOf(_,oneOf(L)),pl(member(X,L))],[classAssertion(oneOf(L),X)]).
entails(cls-oo2,  [subClassOf(_,allValuesFrom(_,oneOf(L))),pl(member(X,L))],[classAssertion(oneOf(L),X)]).
entails(cls-oo3,  [subClassOf(_,someValuesFrom(_,oneOf(L))),pl(member(X,L))],[classAssertion(oneOf(L),X)]).


entails(cax-sco, [subClassOf(C1,C2),classAssertion(C1,I)],[classAssertion(C2,I)]).
entails(cax-eqc1, [equivalentClasses(L),pl(member(C1,L)),pl(member(C2,L)),pl(C1 \= C2),
		   classAssertion(C1,X)],[classAssertion(C2,X)]).

entails(cax-dw,	[disjointWith(L),pl(member(C1,L)),pl(member(C2,L)),pl(C1 \= C2),
		   classAssertion(C1,X),classAssertion(C2,X)],[false]).
entails(cax-adc, [allDisjointClasses(L),pl(member(C1,L)),pl(member(C2,L)),pl(C1 \= C2),
		   classAssertion(C1,X),classAssertion(C2,X)],[false]).



entails(scm-cls, [class(C)],[subClassOf(C,C)]). entails(scm-sco, [subClassOf(X,Z),subClassOf(Z,Y)],[subClassOf(X,Y)]).
entails(scm-eqc, [equivalentClasses([C1,C2])],[subClassOf(C1,C2),subClassOf(C2,C1)]).
entails(scm-op,  [objectProperty(P)],[subPropertyOf(P,P)]).
entails(scm-dp,  [datatypePropert(P)],[subPropertyOf(P,P)]).
entails(scm-spo, [subPropertyOf(X,Z),subPropertyOf(Z,Y)],[subPropertyOf(X,Y)]).
entails(scm-eqp, [equivalentProperties([P1,P2])],[subPropertyOf(P1,P2),subPropertyOf(P2,P1)]).
entails(scm-dom1,[propertyDomain(P,C1),subClassOf(C1,C2)],[propertyDomain(P,C2)]).
entails(scm-dom2,[propertyDomain(P2,C),subPropertyOf(P1,P2)],[propertyDomain(P1,C)]).
entails(scm-rng1,[propertyRange(P,C1),subClassOf(C1,C2)],[propertyRange(P,C2)]).
entails(scm-rng2,[propertyRange(P2,C),subPropertyOf(P1,P2)],[propertyRange(P1,C)]).
entails(scm-hv,[subClassOf(_,hasValue(P1,I)),subClassOf(_,hasValue(P2,I),_),subPropertyOf(P1,P2)],
	[subClassOf(hasValue(P1,I),hasValue(P2,I))]).

entails(scm-svf1,[subClassOf(_,someValuesFrom(P,Y1)),subClassOf(_,someValuesFrom(P,Y2)), pl( Y1 \= Y2),
		  subClassOf(Y1,Y2)],[subClassOf(someValuesFrom(P,Y1),someValuesFrom(P,Y2))]).


entails(scm-svf2,[subClassOf(_,someValuesFrom(P1,Y)),subClassOf(_,someValuesFrom(P2,Y)), pl( P1 \= P2),
		  subPropertyOf(P1,P2)],[subClassOf(someValuesFrom(P1,Y),someValuesOf(P2,Y))]).

entails(scm-avf1,[subClassOf(_,allValuesFrom(P,Y1)),subClassOf(_,allValuesFrom(P,Y2)), pl(Y1 \= Y2),
		  subClassOf(Y1,Y2)],[subClassOf(allValuesFrom(P,Y1),allValuesFrom(P,Y2))]).


entails(scm-avf2,[subClassOf(_,allValuesFrom(P1,Y)),subClassOf(_,allValuesFrom(P2,Y)), pl(P1 \= P2),
		  subPropertyOf(P1,P2)],[subClassOf(allValuesFrom(P1,Y),allValuesFrom(P2,Y))]).

entails(scm-int, [subClassOf(C,intersectionOf(L)),pl(member(C1,L))],[subClassOf(C,C1)]).
entails(scm-uni, [subClassOf(C,unionOf(L)),pl(member(C1,L))],[subClassOf(C1,C)]).


:- multifile owl2_reasoner:reasoner_ask_hook/2.
:- multifile owl2_reasoner:initialize_reasoner_hook/3.

owl2_reasoner:reasoner_ask_hook(rl_rules,G) :-
        is_entailed(G,_).
owl2_reasoner:initialize_reasoner_hook(rl_rules,rl_rules,_) :-
        get_tbox_entailments.



:- use_module(owl2_rl_rules).
:- use_module(owl2_io).
:- use_module(owl2_model).

show_all_entailments :-
	debug(test,'getting entailments',[]),
	get_tbox_entailments,
	forall(is_entailed(Axiom,Expl),
	       format('Axiom: ~w  [explanation: ~w]~n',[Axiom,Expl])).

:- begin_tests(owl2_rl_rules_basic,
   [setup(init_axioms),
    cleanup(retract_all_axioms)]).


init_axioms :-
	load_axioms('testfiles/rl_rules_test.pl').

test(query) :-
	show_all_entailments.

:- end_tests(owl2_rl_rules_basic).

:- begin_tests(owl2_rl_rules_wine,
   [setup(init_axioms),
    cleanup(retract_all_axioms)]).

init_axioms :-
	load_axioms('testfiles/wine.owl').

test(query) :-
	show_all_entailments.

:- end_tests(owl2_rl_rules_wine).




:- use_module(owl2_model).
:- use_module(owl2_plsyn).
:- use_module(owl2_util).
:- use_module(owl2_reasoner).
:- use_module(owl2_text_display).
:- use_module(owl2_popl,[popl_translate/1]).
:- use_module(owl2_dotty).

:- op(1100,xfy,--).
:- op(1090,fx,new).
:- op(1090,fx,add).
:- op(1090,fx,init).
:- op(1090,fx,rm).
:- op(1090,fx,m).
:- op(1090,fx,q).
:- op(1090,fx,qi).
:- op(1090,fx,pq).
:- op(1090,fx,v).
:- op(1090,fx,t).
:- op(1090,fx,l).
:- op(1090,fx,set).
:- op(1090,fx,unset).
:- op(1100,xfy,===>). :- op(1000,xfy,where).
:- op(800,xfy,to).
:- op(800,fx,(?)).

:- dynamic transaction/1.
:- dynamic redo_stack/1.
:- discontiguous cmd_doc/4.
:- multifile edit_template/2.

:- initialization(shell_init).

:- redefine_system_predicate('>'(_,_)).
:- redefine_system_predicate(help).

user:file_search_path(home, Home) :-
	getenv('HOME',Home).

rcfile(F) :- absolute_file_name(home('.thearc'),F).

shell_init :-
        set_prolog_flag(verbose,normal),
        print_message(banner,thea_shell_welcome),
        RDFS_Label='http://www.w3.org/2000/01/rdf-schema#label',
        assert_axiom(annotationProperty(RDFS_Label)),
        assert_axiom(annotationAssertion(RDFS_Label,RDFS_Label,literal(lang(en,label)))),
        consult_rc.

consult_rc :-
        rcfile(F),
        exists_file(F),
        !,
        consult(F).
consult_rc.


save_settings :-
        rcfile(F),
        open(F,write,S,[]),
        Q=settings(_,_),
        forall(Q,format(S,'~q.~n',[Q])),
        close(S).

cmd_doc(edit,new,[axiom],'Add axiom to current ontology').
cmd_doc(edit,add,[axiom],'Add axiom to current ontology').
cmd_doc(edit,rm,[axiom],'Retract axiom to current ontology').
cmd_doc(edit,undo,[],'Undo last add/rm').
cmd_doc(edit,redo,[],'Redo last undo').

edit_op(Op,AxiomIn) :- current_ontology(Ont),!,tr(AxiomIn,Axiom), Act =.. [Op,Axiom,Ont],Act,print_message(informational,Act),asserta(transaction(Act)).
edit_op(_,_) :- print_message(error,no_current_ontology).
add AxiomIn where Goal :- !, forall(Goal,add(AxiomIn)).
add AxiomIn :- edit_op(assert_axiom,AxiomIn).
rm AxiomIn :- edit_op(retract_axiom,AxiomIn).
undo :- transaction(Act),undo(Act),print_message(informational,undo(Act)),asserta(redo_stack(Act)),retract(transaction(Act)).
undo(assert_axiom(A,O)) :- retract_axiom(A,O).
undo(retract_axiom(A,O)) :- assert_axiom(A,O).
redo :- redo_stack(Act),Act,print_message(informational,redo(Act)),retract(redo_stack(Act)).
new Ont :- assert_axiom(ontology(Ont)),nb_setval(ontology,Ont).

'===>'(AIn,BIn where G) :- !,tr(AIn,A),tr(BIn,B),popl_translate(A ===> B where G).
'===>'(AIn,BIn) :- tr(AIn,A),tr(BIn,B),popl_translate(A ===> B).

+(TN) :-
        current_opts(Opts),
        T=..[TN,IRI],
                edit_template(T,[iri(IRI_Template)|Fields]),
        get_field_info(iri(IRI_Template),IRI),
                findall(Ax,(member(Field,Fields),
                    get_field_axiom(Field,IRI,Ax)),
                Axs_1),
        flatten(Axs_1,Axs),
        nl,
        writeln('        writeln('        writeln('        (   member(display(combined),Opts)
        ->  Opts_2=Opts
        ;   Opts_2=[display(combined)|Opts]),
        forall(member(Ax,Axs),
               (   tr(Ax,Ax_2),
                   display_term(Ax_2,Opts_2))),
        input('        nl,
        (   Ok=''
        ->  maplist(add,Axs),
            writeln('        ;   print_message(informational,not_added)).


get_field_info(iri(obo(Prefix)),IRI) :-
        !,
        get_field_info(iri(obo(Prefix,7)),IRI).
get_field_info(iri(obo(IDSpace,NumDigits)),IRI) :-
        !,
        concat_atom(['http://purl.obolibrary.org/obo/',IDSpace,'_'],Prefix),
        get_field_info(iri(prefix(Prefix,NumDigits)),IRI).
get_field_info(iri(prefix(Prefix,NumDigits)),IRI) :-
        findall(X,(entity(E),concat_atom([Prefix,X],E),is_numeric_atom(X)),Xs),
        sort(Xs,SXs),
        (   reverse(SXs,[Last|_])
        ->  true
        ;   Last='-1'),
        atom_number(Last,LastID),
        ID is LastID+1,
        concat_atom(['~',NumDigits,'d'],Fmt),
        format(atom(A1),Fmt,[ID]),sub_atom(A1,2,_,0,PaddedID),
        atom_concat(Prefix,PaddedID,IRI).

get_field_axiom(multi(T),_,AxiomsOut) :-
        !,
        repeat,
        (   get_field_axiom(T,_,AxiomsOut)
        ->  true
        ;   !,
            fail).
get_field_axiom(Val-Axioms,_,AxiomsOut) :-
        !,
        repeat,
        nl,
        write('        tr(Axioms,AxiomsOut),
        write('        input(' >> ',Val),
        (   Val=''
        ->  !,
            fail
        ;   \+ is_valid_axiom_list(AxiomsOut)
        ->  print_message(error,not_valid_axioms(AxiomsOut)),
            fail
        ;   format('            tr(AxiomsOut,AxiomsOut_2),
            show(AxiomsOut_2),
            !,
            true).
get_field_axiom(Axiom,_,Axiom) :-
        Axiom\=_-_,
        Axiom\=multi(_),
        !,
        show(Axiom).
is_numeric_atom(A) :- catch(atom_number(A,_),_,fail).

input(Prompt,Val) :-
        write(Prompt),
        read_line_to_codes(user_input,Codes),
        atom_codes(Val,Codes).

is_valid_axiom_list(L) :- is_list(L),!,forall(member(A,L),is_valid_axiom(A)).
is_valid_axiom_list(A) :- is_valid_axiom(A).


cmd_doc(display,t,[class],'Show a tree').
cmd_doc(display,q,[term],'Query axioms').
cmd_doc(display,v,[axiom],'Query axioms').
cmd_doc(display,--,[cmd],'pipe through unix shell. E.g. q _<_ -- \'grep neuron\'.').

t N :- label2iri(N,X), nb_setval(obj,X),current_opts(Opts), display_class_tree(X,Opts).
l N :-
        label2iri(N,X),
        nb_setval(obj,X),
        current_opts(Opts),
        setof(A,
              (   axiom_references(A,X),
                  axiom_type(A,T)),
              As),
        format('* Axiom Type: ~w~n',[T]),
        forall(member(A,As),
               display_term(A,Opts)),
        fail.
l _.

trshow(XIn) :- tr(XIn,X),show(X).
show(X) :- current_opts(Opts),display_term(X,Opts).
v ObjIn :- tr(ObjIn,Obj),current_opts(Opts),visualize_obj(Obj,Opts).
'--'(GoalIn,Cmd) :-
        tr(GoalIn,Goal),
        open(pipe(Cmd),write,S,[]),
        with_output_to(S,forall(Goal,true)),
        close(S).
Cmd > File :-                           open(File,write,S,[]),
        with_output_to(S,Cmd),
        close(S).

cmd_doc(display,ls,[],'List ontologies').
cmd_doc(display,lsa,[],'List axioms in current ontology').

ls :-
        forall(ontology(Ont),
               (   (   current_ontology(Ont)
                   ->  write('*')
               ;   write(' ')),
                   writeln(Ont))).
lsa :-
        current_ontology(Ont),
        !,
        current_opts(Opts),
        forall(ontologyAxiom(Ont,A),
               display_term(A,Opts)).
lsa :-
        !,
        current_opts(Opts),
        forall(axiom(A),
               display_term(A,Opts)).

cmd_doc(display,stats,[],'Stats on current ontology').
stats :- current_ontology(Ont),stats(Ont).
stats(Ont) :-
        forall(aggregate(count,A,Arity^(ontologyAxiom(Ont,A),functor(A,T,Arity)),Num),
               format('#~w\t~w~n',[T,Num])).


cmd_doc(query,gi,[axiom],'Entailment query - translates Axiom to native prolog axiom term and calls reasoner. as qi/1 with no result mapping.').
cmd_doc(query,g,[axiom],'Assertion query - translates Axiom to prolog goal and calls directly. As q/1 with no result mapping.').
gi(AxiomIn) :- tr(AxiomIn,Axiom),reasoner_ask(Axiom).
g(AxiomIn) :- tr(AxiomIn,Axiom),Axiom.

q SelectIn where QueryIn :- !,tr(QueryIn,Query),tr(SelectIn,Select), forall(Query,show(Select)).
q QueryIn :- !,tr(QueryIn,Query), forall(Query,show(Query)).

pq Select where Query :- !, forall(Query,show(Select)).
pq Query :- !, forall(Query,show(Query)).

qi SelectIn where QueryIn :- !,tr(QueryIn,Query),tr(SelectIn,Select), forall(reasoner_ask(Query),show(Select)).
qi QueryIn :- !,tr(QueryIn,Query), forall(reasoner_ask(Query),show(Query)).

cmd_doc(reasoner,init,[name],'Initialize a reasoner on current ont. E.g. "reasoner pellet.". Stores current reasoner in global variable.').
init RN :- initialize_reasoner(RN,_,[]).



cmd_doc(help,?,[cmd],'Get help about a command.').
cmd_doc(help,h,[],'Show history.').
? X :- usage(X).
help :- usage.



set (P to V) :- !,unset(P), assert(settings(P,V)),save_settings.
set P + V :- !,assert(settings(P,V)),save_settings.
set P - V :- !,retractall(settings(P,V)),save_settings.
unset P :- retractall(settings(P,_)),save_settings.
settings :- q(settings(_,_)).


tr(In,Out) :- plsyn_owl(In,X),map_IRIs(get_IRI_from_label,X,Out).

:- multifile settings/2.
:- dynamic settings/2.
opt_doc(display,'options for tuning screen display of axioms').
opt_value(display,combined,'show both prolog and pretty').
opt_value(display,tabular,'TSV for axiom arguments').
opt_value(display,prolog,'show prolog syntax rather than pretty').
opt_value(display,plsyn,'show prolog plsyn syntax').
opt_value(display,labels,'show labels not IRIs').

current_opts(Opts) :-
        findall(Opt,
                (   settings(P,V),
                    atom(P),
                    Opt =.. [P,V]),
                Opts).

current_ontology(Ont) :- nb_current(ontology,Ont),!.
current_ontology(Ont) :-
        ontology(Ont),
        !,
        set_current_ontology(Ont).
set_current_ontology(Ont) :-
        nb_setval(ontology,Ont),
        print_message(informational,shell('Set ontology to ~w'-[Ont])).

label2iri(Label,Obj) :- labelAnnotation_value(Obj,Label),!.
label2iri(X,X).


prolog:message(thea_shell_welcome) -->
               ['
prolog:message(redo(Act)) --> ['Redo: '],prolog:message(Act).
prolog:message(undo(Act)) --> ['Undo: '],prolog:message(Act).
prolog:message(assert_axiom(A,Ont)) --> ['Asserting '],prolog:message(ax(A)),[' into ',Ont].
prolog:message(retract_axiom(A,Ont)) --> ['Retracting '],prolog:message(ax(A)),[' into ',Ont].
prolog:message(ax(Ax)) --> [Atom],{current_opts(Opts),with_output_to(atom(Atom),display_term(Ax,Opts))}.
prolog:message(shell(M)) --> [M].


usage :-
        writeln('BOMB Shell Commands'),
        forall(cmd_doc(_,C,_,Doc),
               format('~w\t~w~n',[C,Doc])),
        nl.
usage(C) :-
        cmd_doc(_,C,_,Doc),
        writeln(Doc).





:- module(owl2_text_display,
          [display_term/1,
           display_term/2,

           display_class_tree/1,
           display_class_tree/2
           ]).

:- use_module(owl2_model).



display_term(T) :-
    display_term(T,[]).

display_term(T,Opts) :-
        select(display(combined),Opts,Opts2),
        !,
        format('        display_term(T,Opts2),
        format('~q.~n',[T]).
display_term(T,Opts) :-
        member(display(tr(T,TG,Ont,Ax)),Opts),
        !,
        forall(TG,
               assert_axiom(Ax,Ont)).
display_term(T,Opts) :-
        member(display(tabular),Opts),
        !,
        T=..L,
        display_subterms(L,'\t',Opts),
        nl.
display_term(T,Opts) :-
        member(display(prolog),Opts),
        !,
        format('~q.~n',[T]).
display_term(T,Opts) :-
        member(display(plsyn),Opts),
        member(display(labels),Opts),
        !,
        map_IRIs(use_label_as_IRI,T,T2),
        plsyn_owl(X,T2),
        (   member(display(show_orig),Opts)
        ->  format('~q.~n',[T])
        ;   true),
        (   member(display(no_plquote),Opts)
        ->  format('~w~n',[X])
        ;   format('~q.~n',[X])).
display_term(T,Opts) :-
        member(display(plsyn),Opts),
        !,
        plsyn_owl(X,T),
        format('~q.~n',[X]).
display_term(T,Opts) :-
        member(display(labels),Opts),
        !,
        map_IRIs(use_label_as_IRI,T,X),
        format('~w~n',[X]).
display_term(T,_) :-
        format('~w~n',[T]).

display_subterms(_,[],_,_).
display_subterms([T|L],Sep,Opts) :-
        !,
        display_subterm(T,Sep,Opts),
        (   L=[]
        ->  true
        ;   format(Sep,[]),
            display_subterms(L,Sep,Opts)).

display_subterm(T,Opts) :-
        display_subterm(T,' ',Opts).

display_subterm(T,Sep,Opts) :-
        member(display(labels),Opts),
        member(display(plsyn),Opts),
        !,
        map_IRIs(use_label_as_IRI,T,T2),
        plsyn_owl(X,T2),
        format('~w~w~w',[T,Sep,X]).
display_subterm(T,_Sep,Opts) :-
        member(display(plsyn),Opts),
        !,
        plsyn_owl(X,T),
        format('~w',[X]).
display_subterm(T,Sep,Opts) :-
        member(display(labels),Opts),
        !,
        format('~w',[T]),
        format('~w',[Sep]),
        (   labelAnnotation_value(T,N)
        ->  format('~w',[N])
        ;   true).
display_subterm(T,_,_) :-
        format('~w',[T]).


display_class_tree(Class) :-
        display_class_tree(Class,[]).

display_class_tree(Class,Opts) :-
        member(traverse(P),Opts),
        !,
        forall(display_class_tree(Class,
                        X-Y-(   subClassOf(X,Y)
                            ;   X=someValuesFrom(P,Y)),
                        _,
                        []),
               true).
display_class_tree(Class,Opts) :-
        forall(display_class_tree(Class,X-Y-subClassOf(X,Y),_,Opts),
               true).



display_class_tree(Class,Template,Tab2,Opts) :-
        copy_term(Template,Class-Parent-Goal),
        (   Goal
        *-> display_class_tree(Parent,Template,Tab,Opts),
            Tab2 = [' '|Tab],
            writetab(Tab2)
        ;   Tab2=[]),
        write_owl_class(Class,Opts),
        nl.

writetab([]).
writetab([_|L]):-
        write(' '),
        writetab(L).

write_owl_class(Class,Opts) :- display_subterm(Class,Opts).



:- module(owl2_thea1_compat,[
			     class/5,
			     subclassOf/2,
			     disjointSet/1,
			     equivalentSet/1,
			     property/7,
			     sameIndividuals/1,
			     individual/4
		    ]
	 ).



:- use_module(owl2_model,[]).
:- use_module('owl2_from_rdf').

class(C,false,true,Annotations,Descs) :-
        owl2_model:class(C),
        (   owl2_model:equivalentClasses(ECL),member(C,ECL) -> select(C,ECL,Descs) ; Descs = []),
	findall(annotation(AP,AV),owl2_model:annotationAssertion(AP,C,AV),Annotations).

subclassOf(X,Y) :-
	owl2_model:subClassOf(X,Y).

disjointSet(S) :-
	owl2_model:disjointClasses(S).

equivalentSet(S) :-
	owl2_model:equivalentClasses(S).

property(PID,Deprecated,AnnotationList,PID_SuperList,
		    PTList,
		    PID_DomainList,PID_RangeList):-
	(   owl2_model:dataProperty(PID) ;  owl2_model:objectProperty(PID)),
	property_type(PID,PTList),
	Deprecated = false,
	findall(annotation(AP,AV),owl2_model:annotationAssertion(AP,PID,AV),AnnotationList),
	findall(SPID,owl2_model:subPropertyOf(PID,SPID),PID_SuperList),
	findall(Domain,owl2_model:propertyDomain(PID,Domain),PID_DomainList),
	findall(Range,owl2_model:propertyRange(PID,Range),PID_RangeList).
	

property_type(PID,[OT,F,IF,T,S,iof(Inv)]) :-
	(   owl2_model:dataProperty(PID) -> OT =datatypeProperty ; true),
	(   owl2_model:objectProperty(PID) -> OT = objectProperty ; true),
	(   owl2_model:functionalProperty(PID) -> F = functional ; true),
	(   owl2_model:inverseFunctionalProperty(PID) -> IF=inversefunctional; true),
	(   owl2_model:transitiveProperty(PID) -> T = transitive ; true),
	(   owl2_model:symmetricProperty(PID)-> S = symmetric ; true),
	(   owl2_model:inverseProperties(PID,Inv) ; true),!.
	

				
sameIndividuals(Set) :-
	owl2_model:sameIndividual(Set).



individual(I,Annotations,ITList,IVList) :-
        owl2_model:classAssertion(_,I),
	findall(C1,owl2_model:classAssertion(C1,I),ITList),
	findall(value(P,V),owl2_model:propertyAssertion(P,I,V),IVList),
	findall(annotation(AP,AV),owl2_model:annotationAssertion(AP,I,AV),Annotations).



go :-
	owl_parse('http://www.theoldtile.gr/data',complete,complete,true),
	open('thea2',write,St),
	print(St, '****   Classes *****'),nl(St),
	forall(owl_parser:class(A,B,C,D,E),(print(St,A-B-C-D-E),nl(St))),
	print(St, '****   Sub Classes *****'),nl(St),
	forall(owl_parser:subclassOf(A,B),(print(St,A-B),nl(St))),
	print(St, '****   Equiv Set  *****'),nl(St),	
	forall(owl_parser:equivalentSet(S),(print(St,S),nl(St))),
	print(St, '****   DisjointSet Set  *****'),nl(St),
	forall(owl_parser:disjointSet(S),(print(St,S),nl(St))),
	print(St, '****   Properties   *****'),nl(St),
	forall(owl_parser:property(A,B,C,D,E,F,G),(print(St,A-B-C-D-E-F-G),nl(St))),	
	print(St, '****   Annotation Properties  *****'),nl(St),
	forall(owl_parser:annotationProperty(A),(print(St-A),nl(St))),	
	print(St, '****   Individuals  *****'),nl(St),      	
	forall(owl_parser:individual(A,B,C,D),(print(St,A-B-C-D),nl(St))),	
	print(St, '****   Different Individuals  *****'),nl(St),
	forall(owl_parser:differentIndividuals(S),(print(St,S),nl(St))),	
	print(St, '****   Same Individuals  *****'),nl(St),
	forall(owl_parser:sameIndividuals(S),(print(St,S),nl(St))),	
      

	close(St).



:- module(owl2_to_progol,
          [
           write_progol_mode_decls/1,
           write_progol_facts/3
           ]).

:- use_module(owl2_model).
:- use_module(owl2_basic_reasoner).

:- multifile owl2_io:save_axioms_hook/3.
owl2_io:save_axioms_hook(File,progol,Opts) :-
        (   nonvar(File)
        ->  tell(File)
        ;   true),
        member(mode_decls(Roots),Opts),
        write_progol_mode_decls(Roots),
        member(head(Head),Opts),
        member(goal(Goal),Opts),
        member(type(TypeDecl),Opts),
        write_progol_facts(Head,Goal,TypeDecl),
        told.

write_progol_facts(Head,Goal,TypeDecl) :-
        format('        setof(TypeDecl,Goal^Goal,TypeDecls),
        nl,
        format('        forall(member(TypeDecl,TypeDecls),
               format('~q.~n',[TypeDecl])),
        forall(Goal,format('~q.~n',[Head])).

write_progol_mode_decls(Roots) :-
        forall(class(X),
               write_progol_mode_decl(class(X),Roots)).

write_progol_mode_decl(class(X),Roots) :-
        entailed(subClassOf(X,Root)),
        member(Root,Roots),
        format(':- modeb(1,~q(+~q))?~n',[X,Root]),
        !.
write_progol_mode_decl(_,_).




:- module(owl2_to_prolog_dlp,
          [
           owl_write_all_dlpterms/0,
           owl_write_all_dlpterms/1,
           owl_dlpterm/2,
           owl_dlpterm/3,
           owl_write_dlpterm/2,
           owl_write_prolog_code/2
           ]).

:- use_module(owl2_model).
:- use_module(owl2_from_rdf,[collapse_ns/4]).

:- dynamic closed_world_assumption/0.



:- multifile owl2_io:save_axioms_hook/3.
owl2_io:save_axioms_hook(File,dlp,Opts) :-
        (   nonvar(File)
        ->  tell(File)
        ;   true),
        owl_write_all_dlpterms(Opts),
        told.
owl2_io:save_axioms_hook(File,dlp_yap,Opts) :-
        owl2_io:save_axioms_hook(File,dlp,[write_directives(table)|Opts]).


uri_to_atom(literal(type(_,A)),A) :- !.

uri_to_atom(URI,A) :-
        collapse_ns(URI,A,':',[]).


owl_write_all_dlpterms :-
        owl_write_all_dlpterms([]).

owl_write_all_dlpterms(Opts) :-
        forall(member(write_directives(Dir),Opts),
               write_directives(Dir,Opts)),
        setof(Ax,axiom(Ax),Axs),
        forall(member(Ax,Axs),
               owl_write_dlpterm(Ax,Opts)).

write_directives(table,Opts) :-
        forall(class(C),
               write_table_class(C,Opts)),
        forall(property(P),
               write_table_property(P,Opts)).
write_directives(dummy_fact,Opts) :-
        forall(class(C),
               write_dummy_class(C,Opts)),
        forall(property(P),
               write_dummy_property(P,Opts)).

write_table_class(X,Opts) :-
        collapse_ns(X,X1,'_',Opts),
        format(':- table ~q/1.~n',[X1]).
write_table_property(X,Opts) :-
        collapse_ns(X,X1,'_',Opts),
        format(':- table ~q/2.~n',[X1]).
write_dummy_class(X,Opts) :-
        collapse_ns(X,X1,'_',Opts),
        format('~q(_) :- fail.~n',[X1]).
write_dummy_property(X,Opts) :-
        collapse_ns(X,X1,'_',Opts),
        format('~q(_,_) :- fail.~n',[X1]).


owl_dlpterm(OwlAsTerm,R) :- 
	owl_as2prolog(OwlAsTerm,R,_).
        
owl_dlpterm(OwlAsTerm,R,_) :- 
	owl_as2prolog(OwlAsTerm,R,_).





owl_write_dlpterm(OwlAsTerm,Options) :- 
	owl_as2prolog(OwlAsTerm,R,_),
        format('	owl_write_prolog_code(R,Options),
        !.
owl_write_dlpterm(OwlAsTerm,_) :- 
        throw(thea(cannot_write(OwlAsTerm))).






owl_write_prolog_code([],_) :- !.


owl_write_prolog_code([H|T],Options) :-
	owl_write_prolog_code(H,Options),!, 
	owl_write_prolog_code(T,Options).



owl_write_prolog_code(;(A,B),Options) :- !,
	write('('), owl_write_prolog_code(A,Options), 	write(';'), 
	owl_write_prolog_code(B,Options), write(')').


owl_write_prolog_code( (A,B), Options ) :- !,
	owl_write_prolog_code(A,Options), 
	write(','), 
	owl_write_prolog_code(B,Options).

owl_write_prolog_code(\+ (\+ (A)),Options) :- !,
	owl_write_prolog_code(A,Options).
owl_write_prolog_code(\+ (A),Options) :- !,
	write('(\\+ ('), owl_write_prolog_code(A,Options), write(') )').



owl_write_prolog_code( (class('owl:Nothing',_):- B), Options) :-
        member(disjunctive_datalog(true),Options),
        !,
        write(':-'),            
        nl, write('     '), 
        owl_write_prolog_code(B,Options), 
        write('.'), nl.

owl_write_prolog_code( (class('owl:Nothing',_):- _), Options) :-
        member(suppress_owl_nothing(true),Options),
        !.

owl_write_prolog_code( ( ( H1; H2) :- B), Options) :- !,
        (   member(disjunctive_datalog(true),Options)
        ->  owl_write_prolog_head_disjunction((H1;H2),Options),
            write(':-'),            
	    nl, write('     '), 
	    owl_write_prolog_code(B,Options), 
	    write('.'), nl
        ;   true).
        
owl_write_prolog_code( (H :- B), Options) :-!,
	(   H = false , ! 
	;   
	B = false , ! 
	; 
	H = [], ! 
	; 
	H = [_|_] , !, 
	    maplist(map_head_conjunction(B),H,R), 
	    owl_write_prolog_code(R,Options) 
	; 
	H = (H1 :- H2) , !, 
	    owl_write_prolog_code(:-(H1,(H2,B)),Options) 	; 
	H = (H1 ; H2) , !, 
	    owl_write_prolog_head_disjunction(H,Options)
	;  
	B = none, !, 	    owl_write_prolog_code(H,Options), write('.'), nl
	; 
	owl_write_prolog_code(H,Options), write(':-'), 	    nl, write('     '),
	    owl_write_prolog_code(B,Options), 
	    write('.'), nl
	).


owl_write_prolog_code(class(X,Y),Options) :- !,
	collapse_ns(X,X1,'_',Options),
	(   var(Y), !, 	
	    writeq(X1), write('(X)') 
	;   Y = y , !,  
	    writeq(X1), write('('), write('Y'), write(')')
	;   Y=v(VY), !,
	    writeq(X1), write('('), write('V'),write(VY), write(')')
        ;   uri_to_atom(Y,Y1),
            writeq(X1), write('('), writeq(Y1), write(')')
	).




owl_write_prolog_code(property(_,_,literal(_)),Options) :-
        member(suppress_literals(true),Options),
        write(true),
        !.
owl_write_prolog_code(property(P,X,Y),Options) :- !,
	collapse_ns(P,P1,'_',Options),
	writeq(P1),  write('('),
	(   X = x, !, write('X') 
        ;   X = y, !, write('Y')  
        ;   X = z, !, write('Z')  
        ;   X = v(NX), !, write('V'),write(NX)  
        ;   X = var , !, write('_') 
        ;   uri_to_atom(X,X1),
            writeq(X1)
	),	
	write(','),
	(   Y = x, !, write('X')  
	;   Y = y, !, print('Y')  
	;   Y = z, !, print('Z')  
        ;   Y = v(NY), !, write('V'),write(NY)  
	;   Y = var , !, print('_') 
	;   uri_to_atom(Y,Y1),
            writeq(Y1)
	),
	write(')').

owl_write_prolog_code(swrlproperty(P,X,Y),Options) :- !, 
	collapse_ns(P,P1,'_',Options),collapse_ns(Y,Y1,'_',[no_base(_)]),collapse_ns(X,X1,'_',[no_base(_)]),
        upcase_atom(X1,X2),
        upcase_atom(Y1,Y2),
	writeq(P1),  write('('),
	write(X2),
        write(','),
	write(Y2),
	write(')').

owl_write_prolog_code(swrldescription(P,X),Options) :- !, 
	collapse_ns(P,P1,'_',Options),collapse_ns(X,X1,'_',[no_base(_)]),
        upcase_atom(X1,X2),
	writeq(P1),  write('('),
	write(X2),
	write(')').

owl_write_prolog_code(v(NY),_Options) :- !,
         write('V'),write(NY).



owl_write_prolog_code(none,_Options) :- !.

owl_write_prolog_code(literal(type(_,Term)),_Options) :-
	writeq(Term).



owl_write_prolog_code(Term,_Options) :-
	writeq(Term).

owl_write_prolog_head_disjunction((H1;H2),Options) :-
        member(head_disjunction_symbol(Op),Options),
        !,
        owl_write_prolog_code(H1,Options),
        write(' '),
        write(Op),
        write(' '),
        owl_write_prolog_head_disjunction(H2,Options).
owl_write_prolog_head_disjunction(H,Options) :-
        !,
        owl_write_prolog_code(H,Options).








map_head_conjunction(B,H, :-(H,B)).




owl_as2prolog(class(_),none,_) :- !.



owl_as2prolog(equivalentClasses([_]),none,_) :- !.

owl_as2prolog(equivalentClasses([]),none,_) :- !.


owl_as2prolog(equivalentClasses([C,D]),[R1,R2],_) :- !,
		owl_as2prolog(subClassOf(C,D),R1,_),
	owl_as2prolog(subClassOf(D,C),R2,_).

owl_as2prolog(equivalentClasses(L),RL,_) :- !,
        findall(R,
                (   member(C,L),
                    member(D,L),
                    C\=D,
                    owl_as2prolog(subclassOf(C,D),R,_)),
                RL).

owl_as2prolog(disjointClasses(L),RL,_) :- !,
        findall(R,
                (   member(C,L),
                    member(D,L),
                    C@<D,
                    owl_as2prolog(subClassOf(intersectionOf([C,D]),'owl:Nothing'),R,_)),
                RL).

owl_as2prolog(differentIndividuals(_),none,_) :- !.



owl_as2prolog(subClassOf(A,B),R,_) :-
     owl_as2prolog(description(A,_),Rb,body),
     owl_as2prolog(description(B,_),Rh,head),
     !,     
     R = (:-(Rh,Rb)).


owl_as2prolog(description(intersectionOf(_),_),false,fact):- !.

owl_as2prolog(description(hasSelf(_),_),false,fact):- !.



owl_as2prolog(description(intersectionOf(DL),X),R,Param):- !,
	owl_as2prolog(description_list(DL,X,','),R,Param).



owl_as2prolog(description(unionOf(DL),X),R,head):-!,
        owl_as2prolog(description_list(DL,X,';'),R,body). 

owl_as2prolog(description(unionOf(DL),X),R,body):-!,
	owl_as2prolog(description_list(DL,X,';'),R,body).

owl_as2prolog(description(unionOf(DL),X),R,fact):-!,
	owl_as2prolog(description_list(DL,X,';'),R,fact).



owl_as2prolog(description(complementOf(D),X),(\+ R),body) :-
        closed_world_assumption,
        owl_as2prolog(description(D,X),R,body),
        !.

owl_as2prolog(description(complementOf(_),_),false,_) :- !.



owl_as2prolog(description(oneOf(DL),_),member(_,DL),body) :- !.
owl_as2prolog(description(oneOf(_),_),false,_) :- !.



owl_as2prolog(description(hasValue(PropertyID,Value),X),R,_) :- 
	R = property(PropertyID,X,Value),!.


owl_as2prolog(description(allValuesFrom(PropertyID,Descr),_),R,body) :-
        closed_world_assumption,
        !,
	owl_as2prolog(description(Descr,y),D,body),
	R =  (\+ (property(PropertyID,x,y),\+ D)).

owl_as2prolog(description(allValuesFrom(_,_),_),false,body) :-  !.


owl_as2prolog(description(allValuesFrom(PropertyID,Descr),_),R,head) :-  !,
	owl_as2prolog(description(Descr,y),D,head),
	R =  :-(D,property(PropertyID,x,y)).

owl_as2prolog(description(allValuesFrom(PropertyID,Descr),ID),R,fact) :-  !,
	owl_as2prolog(description(Descr,_),D,head),
	R =  :-(D,property(PropertyID,ID,x)).



owl_as2prolog(description(someValuesFrom(_,_),_),false,head) :-  !.

owl_as2prolog(description(someValuesFrom(PropertyID,Descr),_),R,body) :-  !,
        gensym('Ex_',ExV),
	owl_as2prolog(description(Descr,v(ExV)),D,body),
	R =  (D,property(PropertyID,x,v(ExV))).



owl_as2prolog(description(maxCardinality(_,_),_),false,_) :-  !.
owl_as2prolog(description(minCardinality(_,_),_),false,_) :-  !.
owl_as2prolog(description(exactCardinality(_,_),_),false,_) :-  !.

owl_as2prolog(description(maxCardinality(_,_,_),_),false,_) :-  !.
owl_as2prolog(description(minCardinality(_,_,_),_),false,_) :-  !.
owl_as2prolog(description(exactCardinality(_,_,_),_),false,_) :-  !.



owl_as2prolog(description(Any,X),class(Any,X),_) :- !.




owl_as2prolog(description_list([],_,_),[],_) :- !.

owl_as2prolog(description_list([Descr],X,_),R,body) :- !,
	owl_as2prolog(description(Descr,X),R,body).

owl_as2prolog(description_list([Descr|Rest],X,Separator),T,Param) :-
	owl_as2prolog(description(Descr,X),H,Param),!,	
	owl_as2prolog(description_list(Rest,X,Separator),Tail,Param),
	(   Param = body , ! ,  
	    (H = false, !, T = [false] ; Tail = false, !, T = false
	    ; 
	    T =.. [Separator,H,Tail]
	    ) ; 	    
	T = [H|Tail]
	).



owl_as2prolog(subPropertyOf(P,SuperP),(SPE :- PE),_) :- !,
        owl_as2prolog(propertyExpression(P),PE,head),
        owl_as2prolog(propertyExpression(SuperP),SPE,body).

owl_as2prolog(propertyExpression(inverseOf(P)),property(P,y,x), _) :- !.

owl_as2prolog(propertyExpression(propertyChain(PL)),ChainGoal, _) :-
        chain_to_goal(PL,ChainGoal).


owl_as2prolog(propertyExpression(P),property(P,x,y), _) :- !.


owl_as2prolog(propertyDomain(P,D),(L :- property(P,x,var)), _) :- !,
        map_description(head,_,D,L).

owl_as2prolog(propertyRange(P,D),(L :- property(P,var,x)), _) :- !,
        map_description(head,_,D,L).

owl_as2prolog(disjointProperties(L),RL,_) :- !,
        findall( ('owl:Nothing'(x) :- property(C,x,y),property(D,x,y)),
                (   member(C,L),
                    member(D,L),
                    C@<D),
                RL).


owl_as2prolog(objectProperty(_),[],_) :- !.
owl_as2prolog(dataProperty(_),[],_) :- !.
owl_as2prolog(annotationProperty(_),[],_) :- !.


owl_as2prolog(classAssertion(C,I),L,_) :- !,
        map_description(fact,I,C,L).

owl_as2prolog(propertyAssertion(P,I,J), :-(property(P,I,J),none),_) :- !.


owl_as2prolog(owl(_,_,_,_),[],_) :- !.
owl_as2prolog(ontology(_),[],_) :- !.

owl_as2prolog(annotationAssertion(_,_,_), [], _) :- !.
owl_as2prolog(namedIndividual(_), [], _) :- !.


	

owl_as2prolog(functionalProperty(P), (property(sameIndividuals,x,y) :- (property(P,z,x),property(P,z,y))),_) :- !.
owl_as2prolog(inverseFunctionalProperty(P), (property(sameIndividuals,x,y) :- (property(P,z,x),property(P,z,y))),_) :- !.
owl_as2prolog(transitiveProperty(P), (property(P,x,y) :- (property(P,x,z),property(P,z,y))),_) :- !.
owl_as2prolog(symmetricProperty(P), (property(P,x,y) :- property(P,y,x)),_) :- !.
owl_as2prolog(reflexiveProperty(P), (property(P,x,x) :- property(P,x,y)),_) :- !. owl_as2prolog(inverseProperties(P,inverseOf(P)),none,_) :- !. owl_as2prolog(inverseProperties(inverseOf(P),P),none,_) :- !. owl_as2prolog(inverseProperties(P,Inv),[(PE :- IPE),(IPE2 :- PE2)], _) :- !,
        owl_as2prolog(propertyExpression(P),PE,head),
        owl_as2prolog(propertyExpression(inverseOf(Inv)),IPE,body),
        owl_as2prolog(propertyExpression(inverseOf(P)),PE2,body),
        owl_as2prolog(propertyExpression(Inv),IPE2,head).





owl_as2prolog(implies(A,C),(CP :- AP), _) :- !,
              owl_as2prolog(swrl(A),AP,body),
              owl_as2prolog(swrl(C),CP,head).

owl_as2prolog(swrl([]), true, _Type) :- !.
owl_as2prolog(swrl([A]), G, Type) :-
         !,
         owl_as2prolog(swrl(A),G,Type). owl_as2prolog(swrl([A|AL]), (G,Gs), Type) :-
         !,
         owl_as2prolog(swrl(A),G,Type),
         owl_as2prolog(swrl(AL),Gs,Type).

owl_as2prolog(swrl(description(C,X)),class(C,PX), Type) :-
        !,
        owl_as2prolog(swrl(X),PX,Type).

owl_as2prolog(swrl(propertyAssertion(P,X,Y)),property(P,PX,PY), Type) :-
        !,
        owl_as2prolog(swrl(X),PX,Type),
        owl_as2prolog(swrl(Y),PY,Type).
owl_as2prolog(swrl(builtin(B,Args)),G, Type) :-
        !,
        swrl:pred_swrlb(P,B),
        findall(AP,(member(A,Args),
                   owl_as2prolog(swrl(A),AP,Type)),
                ArgsP),
        G=..[property,P|ArgsP].  
owl_as2prolog(swrl(A),property(P,PX,PY), Type) :-
        A=..[P,X,Y],
        !,
        owl_as2prolog(swrl(X),PX,Type),
        owl_as2prolog(swrl(Y),PY,Type).
owl_as2prolog(swrl(i(V)),v(V),_) :- !.

owl_as2prolog(swrl(A),G,T) :-
        owl_as2prolog(A,G,T).

chain_to_goal(PL,ChainGoal) :-
        chain_to_goal(PL,x,v(1),ChainGoal).

chain_to_goal([P],V,_,Goal) :-
        !,
        (   P=inverseOf(PI)
        ->  Goal=property(PI,y,V)
        ;   Goal=property(P,V,y)).
chain_to_goal([P|PL],V,VN,(Goal,ChainGoal)) :-
        !,
        (   P=inverseOf(PI)
        ->  Goal=property(PI,VN,V)
        ;   Goal=property(P,V,VN)),
        VN=v(N),
        NPlus1 is N+1,
        chain_to_goal(PL,VN,v(NPlus1),ChainGoal).



map_description(fact,X,Description,:-(DMap,none)) :- !,
	owl_as2prolog(description(Description,X),DMap,fact).

map_description(Type,X,Description,DMap) :- !,
	owl_as2prolog(description(Description,X),DMap,Type).
                 





:- use_module(owl2_to_prolog_dlp).

:- begin_tests(owl2_to_prolog_dlp,[setup(init_axioms),cleanup(retract_all_axioms)]).

init_axioms :-
        Axioms=[
                ontology(animals),
                class(organism),
                class(animal),
                class(plant),
                class(carnivore),
                class(herbivore),
                class(leg),
                objectProperty(eatsChain),
                objectProperty(eats),
                objectProperty(eatenBy),
                objectProperty(hasPart),
                objectProperty(partOf),
                subPropertyOf(eats,eatsChain),
                transitiveProperty(eatsChain),
                transitiveProperty(partOf),
                transitiveProperty(hasPart),
                inverseProperties(eats,eatenBy),
                subClassOf(animal,organism),
                equivalentClasses([sixLeggedAnimal,intersectionOf([animal,exactCardinality(hasPart,6,leg)])]),
                equivalentClasses([carnivore,intersectionOf([animal,someValuesFrom(eats,animal)])]),
                equivalentClasses([herbivore,
                                   intersectionOf([animal,
                                                   allValuesFrom(eats,complementOf(animal))])]),
                                disjointClasses([plant,animal]),
                disjointClasses([herbivore,carnivore])
               ],
        retract_all_axioms,
        maplist(assert_axiom,Axioms).

test(all) :-
        forall(axiom(Ax),
               (   
                   writeln(axiom=Ax),
                   owl_dlpterm(Ax,Pl),
                   writeln(prolog=Pl),
                   owl_write_prolog_code(Pl,[]))),
        format('
testmap(equivalentClasses([a1,a2]),
        [(a1(X):-a2(X)),(a2(X):-a1(X))]).
testmap(equivalentClasses([a_and_b,intersectionOf([a,b])]),
        (   a_and_b(X):-(a(X),b(X)))).
testmap(equivalentClasses([a_or_b,unionOf([a,b])]),
        (   a_or_b(X):-(a(X);b(X)))).
testmap(equivalentClasses([only_has_part_a,allValuesFrom(has_part,a)]),
        true).
testmap(equivalentClasses([only_has_part_a_and_b,
                           allValuesFrom(has_part,
                                         intersectionOf([a,b]))]),
        true).
testmap(equivalentClasses([ribonucleotide,
                           allValuesFrom(has_part,
                                         intersectionOf(['phosphate unit',
                                                         'ribose ring',
                                                         intersectionOf([nucleobase,
                                                                         someValuesFrom(covalently_bonded_to,
                                                                                        intersectionOf(['ribose ring',
                                                                                                        someValuesFrom(covalently_bonded_to,
                                                                                                                       'phosphate unit')]))])]))]),
        (   true)).

test(x) :-
        forall(testmap(Owl,PlMatch),
               (   format('owl: ~w :: expected: ~w~n',[Owl,PlMatch]),
                   owl_dlpterm(Owl,Pl),
                   format('  plterm: ~w~n',[Pl]),
                   owl_write_prolog_code(Pl,[]))).



:- end_tests(owl2_to_prolog_dlp).




:- module(owl2_util,
          [
           owl_parse_pro/1,
           owlx_file_to_prolog/1,
           rdf_file_to_prolog/1,
           rdf_file_to_prolog/2,
	   download_import_closure/1,
	   download_import_closure/2,
           write_owl_as_prolog/0,
           undeclared_property/3,
           expand_namespaces/0,
           remove_namespaces/0,
           contract_namespaces/0,
           remove_ns/2,
           replace_ns_prefix/4,
           use_label_as_IRI/2,
           get_IRI_from_label/2,
           use_labels_for_IRIs/0,
           use_safe_labels_for_IRIs/0,
           replace_labels_with_IRIs/0,
           use_numeric_IRIs_for_classes/2,
           prefix_IRIs/1,
           translate_IRIs/1,
           translate_IRIs/2,
           map_IRIs/3,
           assume_entity_declarations/0,
           collect_orphan_axioms/1,
           use_class_labels_as_synonyms/1,
           class_label_synonym_axiom/2,
	   any_axiom_template/1,
           write_ontology_summary/0,
	   show_class/1,
           treeview/1,
           treeview/2,
	   owl_statistics/2
          ]).

:- use_module(swrl). :- use_module(owl2_model).
:- use_module(owl2_metamodel).
:- use_module(owl2_from_rdf).
:- use_module(owl2_xml).
:- use_module(owl2_catalog).
:- use_module(owl2_reasoner).


:-use_module(library('http/http_open')).
:-use_module(library('http/http_client')).
:-use_module(library('http/thread_httpd.pl')).
:-use_module(library(sgml)).


owl_parse_pro(F):-
        owl2_model:consult(F).


owlx_file_to_prolog(F):-
        owl_parse_xml(F),
        write_owl_as_prolog.

rdf_file_to_prolog(F):-
        owl_parse_rdf(F),
        write_owl_as_prolog.

rdf_file_to_prolog(F,Opts):-
        owl_parse_rdf(F,Opts),
        write_owl_as_prolog.

write_owl_as_prolog:-
        forall(axiompred(PS),
               write_axioms(PS)).

write_axioms(P/A):-
        !,
        functor(H,P,A),
        write_axioms(H).

write_axioms(H):-
        forall(H,format('~q.~n',[H])).

download_import_closure(F) :-
	download_import_closure(F,[]).

download_import_closure(F,Opts) :-
	retractall(temp_catalog(_,_)),
	download_import_closure(F,[],Opts),
	save_catalog.
download_import_closure([],_,_) :- !.
download_import_closure([F|Fs],IL,Opts) :-
	member(F,IL),
	!,
	download_import_closure(Fs,IL,Opts).
download_import_closure([F|Fs],IL,Opts) :-
	!,
	get_import_closure(F,Xs,Opts),
	append(Fs,Xs,Fs2),
	download_import_closure(Fs2,[F|IL],Opts).
download_import_closure(F,IL,Opts) :-
	\+ is_list(F), 	!,
	download_import_closure([F],IL,Opts).

get_import_closure(F,Xs,_Opts) :-
	import_url_local(F,Local),
	exists_file(Local),
	!,
	register_ontology_localpath(F,Local),
        ensure_loaded(library(semweb/rdf_db)),
	rdf_load(Local,[]),
	findall(X,rdf_has(_,'http://www.w3.org/2002/07/owl#imports',X),Xs),
	debug(download,'adding ~w',[Xs]),
	rdf_retractall(_,_,_).
get_import_closure(F,[],_Opts) :-
	format(user_error,'Could not download: ~w~n',[F]).

import_url_local(F,Local) :-
		concat_atom(['',Local],'http://',F),
	!,
		        	sformat(Cmd,'wget -N -x ~w',[F]),
	debug(download,'cmd: ~w',[Cmd]),
	shell(Cmd).
import_url_local(F,F).


expr_refp(someValuesFrom(P,_),P).
expr_refp(allValuesFrom(P,_),P).
undeclared_property(P,A,X) :-
        axiom_contains_expression(A,X),
        expr_refp(X,P),
        atom(P),
        \+ property(P).



remove_namespaces:-
        translate_IRIs(remove_ns).

expand_namespaces:-
        translate_IRIs(expand_ns).

contract_namespaces:-
        translate_IRIs(contract_ns).

prefix_IRIs(X):-
        translate_IRIs(prefix_IRI(X)).



use_numeric_IRIs_for_classes(NS,Base) :-
        findall(From-To,
                (   class(From),
                    atom_concat(NS,_Local,From),
                    gensym(Base,NewLocal),
                    atom_concat(NS,NewLocal,To)),
                Map),
        length(Map,NumMappings),
        format(user_error,'Mappings: ~w~n',[NumMappings]),
        translate_IRIs(replace_IRI_using_map(Map)).



use_labels_for_IRIs:-
        translate_IRIs(use_label_as_IRI).

use_safe_labels_for_IRIs:-
        translate_IRIs(use_safe_label_as_IRI).

replace_labels_with_IRIs:-
        translate_IRIs(get_IRI_from_label).

remove_ns(IRI,X) :-
        concat_atom([_,X],'#',IRI),
        !.
remove_ns(X,X).

replace_ns_prefix(From,To,OldIRI,NewIRI) :-
        atom_concat(From,Local,OldIRI),
        !,
        atom_concat(To,Local,NewIRI).
replace_ns_prefix(_,_,X,X).

contract_ns(URI,ID) :-
        atom(URI),
        rdf_db:rdf_global_id(NS:Local,URI),
        NS \= rdf,
        NS \= rdfs,
        NS \= owl,
        !,
        concat_atom([NS,Local],':',ID).
contract_ns(X,X).



use_safe_label_as_IRI(IRI,X) :-
        use_label_as_IRI(IRI,X1),
        atom_chars(X1,Chars),
        replace_nonalpha(Chars,Chars2),
        atom_chars(X,Chars2),
        !.

use_label_as_IRI(IRI,X) :-
        labelAnnotation_value(IRI,X),
        !.
use_label_as_IRI(IRI,X) :-
        remove_ns(IRI,X),
        !.
use_label_as_IRI(X,X).

get_IRI_from_label(X,X) :- var(X),!.
get_IRI_from_label(X,IRI) :- labelAnnotation_value(IRI,X),!.
get_IRI_from_label(X,X).



use_property_as_IRI(Prop,IRI,NewIRI) :-
        anyPropertyAssertion(Prop,IRI,Literal),
	Literal=literal(type(_,Val)),
	concat_atom([NS,Local],':',Val),
	rdf_global_id(NS:Local,NewIRI),
        !.
use_property_as_IRI(X,X).


prefix_IRI(Pre,X,Y) :-
        (   entity(X) ; ontology(X)),
        \+ sub_atom(X,0,_,_,Pre),
        \+ sub_atom(X,0,_,_,http),
        !,
        atom_concat(Pre,X,Y).
prefix_IRI(_,X,X) :- !.

replace_IRI_using_map(Map,X,Y) :- member(X-Y,Map),!.
replace_IRI_using_map(_,X,X).


:- module_transparent translate_IRIs/1.
translate_IRIs(Goal):-
        findall(A,axiom(A),Axioms),
        findall(A-A2,(member(A,Axioms),
                      map_IRIs(Goal,A,A2)),
                MapPairs),
        forall(member(A-A2,MapPairs),
               (   findall(O2,(ontologyAxiom(O,A),
                              map_IRIs(Goal,O,O2)),
                           Os),
                   retract_axiom(A),
                   assert_axiom(A2),
                   forall(member(O,Os),
                          assert_axiom(A2,O)))).

:- module_transparent translate_IRIs/2.
translate_IRIs(Goal,Ontology):-
        findall(A,ontologyAxiom(Ontology,A),Axioms),
        maplist(map_IRIs(Goal),Axioms,Axioms2),
        maplist(retract_axiom,Axioms),
        forall(member(A,Axioms2),
               assert_axiom(A,Ontology)).

:- module_transparent map_IRIs/3.
map_IRIs(_,X,X) :- var(X),!.
map_IRIs(_,[],[]) :- !.
map_IRIs(G,[X|Xs],[X2|X2s]) :-
        !,
        map_IRIs(G,X,X2),
        map_IRIs(G,Xs,X2s).
map_IRIs(G,X,X2) :-
        atom(X),
        call(G,X,X2),
        !.
map_IRIs(G,X,X2) :-
        X=..[F|Args],
        Args\=[],
        !,
        maplist(map_IRIs(G),Args,Args2),
                F2=F,
        X2=..[F2|Args2].
map_IRIs(G,X,X2) :-
        call(G,X,X2),
        !.

use_class_labels_as_synonyms(NS) :-
        forall(labelAnnotation_value(IRI,X),
               (   atom_concat(NS,X,C),
                   assert_axiom(class(C)),
                   assert_axiom(equivalentClasses([C,IRI])))).

class_label_synonym_axiom(NS,Ax) :-
        entity(IRI),
        labelAnnotation_value(IRI,X),
        atom_concat(NS,X,C),
        (   Ax=class(C)
        ;   Ax=equivalentClasses([C,IRI])).

any_axiom_template(T) :-
	findall(T,
		(   axiom(A),
		    extract_axiom_template(A,T)),
		Ts),
	uniqify(Ts,Ts2),
	member(T,Ts2).

uniqify([],[]).
uniqify([H|L],L2) :-
	\+ \+ member(H,L),
	uniqify(L,L2).
uniqify([H|L],[H|L2]) :-
	uniqify(L,L2).


inferred_declaration(class(C)) :- classAssertion(C,_),atom(C).
inferred_declaration(class(C)) :- subClassOf(C,_),atom(C).
inferred_declaration(class(C)) :- equivalentClasses(L),member(C,L),atom(C).
inferred_declaration(namedIndividual(I)) :- classAssertion(_,I).
inferred_declaration(namedIndividual(I)) :- propertyAssertion(_,I,_).
inferred_declaration(namedIndividual(I)) :- propertyAssertion(_,_,I).
inferred_declaration(objectProperty(P)) :- subPropertyOf(P,_).
inferred_declaration(objectProperty(P)) :- subPropertyOf(_,P).
inferred_declaration(objectProperty(P)) :- inverseProperties(P,_).
inferred_declaration(objectProperty(P)) :- inverseProperties(_,P).



assume_entity_declarations :-
        forall(inferred_declaration(A),
               assert_axiom(A)).

collect_orphan_axioms(Ont) :-
        (   \+ ontology(Ont)
        ->  assert_axiom(ontology(Ont))
        ;   true),
        forall((axiom(A),\+ontologyAxiom(_,A)),
               assert_axiom(A,Ont)).

               
               
        

extract_axiom_template(A,_) :-
	atom(A),
	!.
extract_axiom_template(literal(_),_) :-
	!.
extract_axiom_template([],[]).
extract_axiom_template(L,L2) :-
	L=[_|_],
	maplist(extract_axiom_template,L,L2).
	extract_axiom_template(A,T) :-
	A=..[P|L],
	maplist(extract_axiom_template,L,L2),
	T=..[P|L2].


write_dllearner_conf(Query,Var) :-
        setof(C,Var^(Query,classAssertion(C,Var)),Classes),
        forall(member(Class,Classes),
               write_dllearner_conf(Query,Var,Class)).

write_dllearner_conf(Query,Var,Class) :-
        labelAnnotation_value(Class,N),
        format('// Target: ~w "~w"~n',[Class,N]),
        nl,
        forall((Query,classAssertion(Class,Var)),
               format('+"~w"~n',[Var])),
        forall((Query,\+classAssertion(Class,Var)),
               format('-"~w"~n',[Var])),
        nl.


write_ontology_summary:-
        forall(axiompred(PS),
               write_axiom_summary(PS)).

write_axiom_summary(P/A) :-
        functor(H,P,A),
        aggregate(count,H,H,Count),
        format('Axiom: ~w count = ~w',[P,Count]).

write_new_preds:-
        typedg(_,_),
        fail.

typedg(TG,G) :-
        export_list(owl2_model,EL),
        member(TP/Arity,EL),
        functor(TG,TP,Arity),
        clause(TG,(G,_)),
        owl2_model:axiompred(P/Arity),
        functor(G,P,Arity),
        (   owlpredicate_typed(P2,TP),
            P2\=P
        ->  format('**** ~w ~w ~w~n',[P,P2,TP])
        ;   true),
        \+ owlpredicate_typed(_,TP),
        format('~q.~n',[owlpredicate_typed(P,TP)]).

owlpredargs :-
        export_list(owl2_model,EL),
        member(TP/Arity,EL),
        functor(TG,TP,Arity),
        clause(TG,(_,subsumed_by(_,L))),
        \+ owlpredicate_arguments(TP,_),
        format('~q.~n',[owlpredicate_arguments(TP,L)]),
        fail.

get_class(Q,C) :- annotationLabel_value(C,Q),!.
get_class(C,C).

show_superclasses(R,Q) :-
	get_class(Q,C),
	forall(reasoner_ask(R,subClassOf(C,P)),
	       show_class(P)).

class_pp(C) --> {labelAnnotation_value(C,L)},!,[L].
class_pp(C) --> {atom(C)},!,[C].
class_pp([]) --> !.
class_pp([C]) --> !,class_pp(C).
class_pp([C1,C2|L]) --> !,class_pp(C1),[' '],class_pp([C2|L]).
class_pp(C) --> {C=..[P|Args]},!,[P,'( '],class_pp(Args),[' ) '].



show_class(C) :- class_pp(C,Toks,[]),maplist(write,Toks),nl.

treeview(Class) :-
        forall(treeview(Class,X-Y-subClassOf(X,Y),_,[]),
               true).

treeview(Class,Opts) :-
        member(traverse(P),Opts),
        !,
        forall(treeview(Class,
                        X-Y-(   subClassOf(X,Y)
                            ;   X=someValuesFrom(P,Y)),
                        _,
                        []),
               true).
treeview(Class,Opts) :-
        forall(treeview(Class,X-Y-subClassOf(X,Y),_,Opts),
               true).



treeview(Class,Template,Tab2,Opts) :-
        copy_term(Template,Class-Parent-Goal),
        (   Goal
        *-> treeview(Parent,Template,Tab,Opts),
            Tab2 = [' '|Tab],
            writetab(Tab2)
        ;   Tab2=[]),
        write_owl_class(Class,Opts),
        nl.

writetab([]).
writetab([_|L]):-
        write(' '),
        writetab(L).

write_owl_class(Class,_) :-
        labelAnnotation_value(Class,Label),
        !,
        write(Label).
write_owl_class(Class,_) :-
        write(Class).

replace_nonalpha(['_'|T],L) :-
        replace_nonalpha1([x,x,x|T],L).
replace_nonalpha([H|T],L) :-
        downcase_atom(H,H2),
        replace_nonalpha1([H2|T],L).
replace_nonalpha1([],[]) :- !.
replace_nonalpha1([H|T],[H|T2]) :-
        isalpha(H),
        !,
        replace_nonalpha1(T,T2).
replace_nonalpha1([_|T],['_'|T2]) :-
        replace_nonalpha1(T,T2).

isalpha('_').
isalpha(X) :- X @>= 'a',X @=< 'z'.
isalpha(X) :- X @>= 'A',X @=< 'Z'.
isalpha(X) :- X @>= '0',X @=< '9'.


               

stats(File) :- owl_statistics(all,XML), open(File,write,S), xml_write(S,XML,[header(true)]),close(S).



owl_statistics(all,[element(all_axioms,[axiomCount=ACount],[AxiomsElement|OList1])]) :-

	findall(element(owl4,[source=Source,count=Count],[]),
		(   aggregate_all(set(S),(owl2_from_rdf:owl(_,_,_,Source),
					       (atom(Source),S=Source ; Source = used(_),S=used)),SetSource),
		    member(Source,SetSource),
		    aggregate_all(count,((Source = used, Source1 = used(_) ; Source1=Source),owl2_from_rdf:owl(_,_,_,Source1)),Count)),
		OWL4),

	owl_statistics(axioms,AxiomsElement),
	findall(OElem,(ontology(O),owl_statistics(ontology(O),OElem)), OList),
	append(OWL4,OList,OList1),
	aggregate_all(count,axiom(_),ACount),!.


owl_statistics(ontology(O),element(ontology,[name=O,axiomCount=ACount,axiomPredCount=AxiomPredCount],OntAxioms)) :-
	findall(element(P-axioms,[axiomCount=APCount],[]),  		(   axiompred(P/A),functor(T,P,A),
		    								    aggregate_all(count,ontologyAxiom(O,T),APCount)
		),
		OntAxioms),
	aggregate_all(count,ontologyAxiom(O,_Axiom),ACount),
	aggregate_all(sum(X), member(element(_Pred,[axiomCount=X],_),OntAxioms),AxiomPredCount).


owl_statistics(axioms,element(allAxioms,[axiomCount=ACount,axiomPredCount=AxiomPredCount],OntAxioms)) :-
	findall(element(P-axioms,[axiomCount=APCount],[]),  		(   axiompred(P/A),functor(T,P,A),
		    								    aggregate_all(count,axiom(T),APCount)
		),
		OntAxioms),
	aggregate_all(count,axiom(_Axiom),ACount),
	aggregate_all(sum(X), member(element(_Pred,[axiomCount=X],_),OntAxioms),AxiomPredCount).


owl_stats_axiom_element(class(C),element(class,[name=C],[])) :- !.
owl_stats_axiom_element(T,AT) :-
	term_to_atom(T,AT).





init_service(Port) :-
	(   nonvar(Port), !, http_server(graph_http_reply,[port(Port),workers(1)]) ; true).


graph_http_reply(Request) :-
	format('Content-type: text/xml\r\n\r\n'),
	member(input(StIn),Request),
	member(peer(_Peer),Request),
	member(path(Path),Request),

	(   Path = '/crossdomain.xml',!,
	    xml_write(element('cross-domain-policy',[],[element(allow-access-from,[domain='*'],[])]),[])
	;
	     set_stream(StIn,timeout(0)),
	     load_structure(StIn, RequestXML,[dialect(xml),space(sgml)])

	),
	open('graph_http.log',append,Log),write(Log,RequestXML),nl(Log),
	owl_generate_graph(_,false,Result),
	xml_write([Result],[header(true)]),
	xml_write(Log,[Result],[header(true)]),nl(Log),
	close(Log).


graph(File,Reify) :-
	(   ontology(Ontology) -> owl_generate_graph(Ontology,Reify,Result) ;
	    Result = element(error,[],[no_ontology_found])
	),
	open(File,write,S), xml_write(S,[Result],[header(true)]),close(S).

owl_generate_graph(Ontology,ReifyAxioms,Result) :-
	(   ontology(Ontology) ->
	    owl_generate_graph(Ontology,ReifyAxioms,Result,[])
	 ;
	    Result = element(error,[],[no_ontology_found])).

owl_generate_graph(Ontology,ReifyAxioms,element(ontology_graph,[name=Ontology],Nodes),AxiomPreds) :-
	findall(Node,
		(   axiompred(P/A), (AxiomPreds = [_|_] , member(P/A,AxiomPreds) ; AxiomPreds = []),
		    functor(T,P,A),
		    ontologyAxiom(Ontology,T), owl_generate_axiom_graph(T,ReifyAxioms,Node)
		),
		Nodes).


owl_generate_axiom_graph(subClassOf(Sub,Super),true,element(node, [type=subClassOf],Children)) :-
	Children = [element(arc,[type=axiom_argument],[SubNode]),
		    element(arc,[type=axiom_argument],[SuperNode])],
	owl2_generate_ce_graph(Sub,element(E,L,C)),
	SubNode = element(E,L,[element(arc,[type=subClassOf],[SuperNode])|C]),
	owl2_generate_ce_graph(Super,SuperNode).

owl_generate_axiom_graph(equivalentClasses([Sub,Super]),true,element(node, [type=equivalentClass],Children)) :-
	Children = [element(arc,[type=axiom_argument],[SubNode]),
		    element(arc,[type=axiom_argument],[SuperNode])],
	owl2_generate_ce_graph(Sub,element(E,L,C)),
	SubNode = element(E,L,[element(arc,[type=equivalentClass],[SuperNode])|C]),
	owl2_generate_ce_graph(Super,SuperNode).


owl_generate_axiom_graph(subClassOf(Sub,Super),false,SubNode) :-
	owl2_generate_ce_graph(Sub,element(E,L,C)),
	SubNode = element(E,L,[element(arc,[type=subClassOf],[SuperNode])|C]),
	owl2_generate_ce_graph(Super,SuperNode).

owl_generate_axiom_graph(equivalentClasses([Sub,Super]),false,SubNode) :-
	owl2_generate_ce_graph(Sub,element(E,L,C)),
	SubNode = element(E,L,[element(arc,[type=equivalentClass],[SuperNode])|C]),
	owl2_generate_ce_graph(Super,SuperNode).





owl2_generate_ce_graph(intersectionOf([E|Rest]),element(node,[type=intersectionOf],Children)) :-
	findall(element(arc,[type=member],[Node]),
		(member(X,[E|Rest]), owl2_generate_ce_graph(X,Node)),
		Children),!.

owl2_generate_ce_graph(unionOf([E|Rest]),element(node,[type=unionOf],Children)) :-
	findall(element(arc,[type=member],[Node]),
		(member(X,[E|Rest]), owl2_generate_ce_graph(X,Node)),
		Children),!.

owl2_generate_ce_graph(IRI,element(node,[type=class,id=NSLocalA],[])) :- atom(IRI),rdf_db:rdf_global_id(NSLocal,IRI),
	term_to_atom(NSLocal,NSLocalA),!. 

owl2_export_axiom(oneOf([E|Rest]),main_triple(BNode,'rdf:type',Type)) :-
	as2rdf_bnode(oneOf([E|Rest]),BNode),
	owl2_export_list([E|Rest],LNode),
	(   classExpression(E) -> Type = 'owl:Class'; Type = 'owl:Datatype'),
	owl_rdf_assert(BNode,'owl:oneOf', LNode),!.

owl2_export_axiom(datatypeRestriction(DT,FVs),main_triple(BNode,'rdf:type','rdfs:Datatype')) :-
	as2rdf_bnode(datatypeRestriction(DT,FVs),BNode),
	owl_rdf_assert(BNode,'rdf:type','rdfs:Datatype'),
	owl2_export_axiom(DT,main_triple(Tpe,_,_)),owl_rdf_assert(BNode,'owl:onDatatype',Tpe),
	owl2_export_list(FVs,LNode),
	owl_rdf_assert(BNode,'owl:withRestrictions',LNode).

owl2_export_axiom(facetRestriction(F,V),main_triple(BNode,F2,_V2)) :-
	(   sub_atom(F,_,_,_,'#')
	->  F2=F2
	;   atom_concat('xsd:',F,F2)),
	as2rdf_bnode(facetRestriction(F,V),BNode),
	owl_rdf_assert(BNode,F,V).

owl2_export_axiom(complementOf(E),main_triple(BNode,'rdf:type',Type)) :-
	as2rdf_bnode(complementOf(E),BNode),
	owl2_export_axiom(E,main_triple(Te,_,_)),
	(   classExpression(E) -> Type = 'owl:complementOf'; Type = 'owl:datatypeComplementOf'),
	owl_rdf_assert(BNode,'owl:complementOf', Te),!.



owl2_export_axiom(someValuesFrom(PE,CEorDR),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(someValuesFrom(PE,CEorDR),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl2_export_axiom(PE,main_triple(Tpe,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tpe),
	owl2_export_axiom(CEorDR,main_triple(Tce,_,_)),owl_rdf_assert(BNode,'owl:someValuesFrom',Tce),!.


owl2_export_axiom(allValuesFrom(PE,CEorDR),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(allValuesFrom(PE,CEorDR),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl2_export_axiom(PE,main_triple(Tpe,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tpe),
	owl2_export_axiom(CEorDR,main_triple(Tce,_,_)),owl_rdf_assert(BNode,'owl:allValuesFrom',Tce),!.

owl2_export_axiom(hasValue(PE,Value),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(hasValue(PE,Value),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl2_export_axiom(PE,main_triple(Tpe,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tpe),
	owl2_export_axiom(Value,main_triple(TValue,_,_)),owl_rdf_assert(BNode,'owl:hasValue',TValue),!.

owl2_export_axiom(hasSelf(OPE),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(hasValue(OPE),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl2_export_axiom(OPE,main_triple(Tope,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tope),
	owl_rdf_assert(BNode,'owl:hasSelf',	literal(type('http://www.w3.org/2001/XMLSchema#boolean','true'))),!.


owl2_export_axiom(minCardinality(N,OPE),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(minCardinality(N,OPE),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl_rdf_assert(BNode,'owl:minCardinality',literal(type('http://www.w3.org/2001/XMLSchema#nonNegativeInteger',N))),
	owl2_export_axiom(OPE,main_triple(Tope,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tope),!.

owl2_export_axiom(minCardinality(N,OPE,CEorDR),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(minCardinality(N,OPE,CEorDR),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl_rdf_assert(BNode,'owl:minQualifiedCardinality',literal(type('http://www.w3.org/2001/XMLSchema#nonNegativeInteger',N))),
	owl2_export_axiom(OPE,main_triple(Tope,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tope),
	owl2_export_axiom(CEorDR,main_triple(Tce,_,_)),
	(   classExpression(CEorDR) -> owl_rdf_assert(BNode,'owl:onClass',Tce); owl_rdf_assert(BNode,'owl:onDataRange',Tce)),!.


owl2_export_axiom(maxCardinality(N,OPE),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(maxCardinality(N,OPE),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl_rdf_assert(BNode,'owl:maxCardinality',literal(type('http://www.w3.org/2001/XMLSchema#nonNegativeInteger',N))),
	owl2_export_axiom(OPE,main_triple(Tope,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tope),!.

owl2_export_axiom(maxCardinality(N,OPE,CEorDR),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(maxCardinality(N,OPE,CEorDR),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl_rdf_assert(BNode,'owl:maxQualifiedCardinality',literal(type('http://www.w3.org/2001/XMLSchema#nonNegativeInteger',N))),
	owl2_export_axiom(OPE,main_triple(Tope,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tope),
	owl2_export_axiom(CEorDR,main_triple(Tce,_,_)),
	(   classExpression(CEorDR) -> owl_rdf_assert(BNode,'owl:onClass',Tce); owl_rdf_assert(BNode,'owl:onDataRange',Tce)),!.


owl2_export_axiom(exactCardinality(N,OPE),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(exactCardinality(N,OPE),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl_rdf_assert(BNode,'owl:cardinality',literal(type('http://www.w3.org/2001/XMLSchema#nonNegativeInteger',N))),
	owl2_export_axiom(OPE,main_triple(Tope,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tope),!.

owl2_export_axiom(exactCardinality(N,OPE,CEorDR),main_triple(BNode,'rdf:type','owl:Restriction')) :-
	as2rdf_bnode(exactCardinality(N,OPE,CEorDR),BNode),
	owl_rdf_assert(BNode,'rdf:type','owl:Restriction'),
	owl_rdf_assert(BNode,'owl:qualifiedCardinality',literal(type('http://www.w3.org/2001/XMLSchema#nonNegativeInteger',N))),
	owl2_export_axiom(OPE,main_triple(Tope,_,_)),owl_rdf_assert(BNode,'owl:onProperty',Tope),
	owl2_export_axiom(CEorDR,main_triple(Tce,_,_)),
	(   classExpression(CEorDR) -> owl_rdf_assert(BNode,'owl:onClass',Tce); owl_rdf_assert(BNode,'owl:onDataRange',Tce)),!.







:- module(owl2_xml,
          [
           owl_parse_xml/1,
           owl_parse_xml/2,

	   axiom_xml/3,
	   xml_axiom/3,
	   desc_xml/3,
	   axioms_elts/3,
	   xml_desc/3
          ]).

:- use_module(owl2_model).
:- use_module(owl2_xml).
:- use_module(owl2_metamodel).
:- use_module(owl2_io).
:- use_module(library(sgml)).
:- use_module(library(semweb/rdf_db)).




:- multifile owl2_io:load_axioms_hook/3.
owl2_io:load_axioms_hook(File,owlx,Opts) :-
        owl_parse_xml(File,Opts).

owl_parse_xml(File) :-
        owl_parse_xml(File,[]).

owl_parse_xml(File,_Opts) :-
        load_structure(File,[XML],[dialect(xmlns),space(remove)]),
        xml_ontology(XML,Ont,Axioms),
        assert_axiom(Ont),
        forall(member(Axiom,Axioms),
               assert_axiom(Axiom)),
        !.
owl_parse_xml(File,_) :-
        throw(no_parse(File)).

xsb_owl_parse_xml(File,_Opts) :-
        load_structure(file(File),[XML],[dialect(xmlns),space(remove)],_Warn),
        xml_ontology(XML,Ont,Axioms),
        assert_axiom(Ont),
        forall(member(Axiom,Axioms),
               assert_axiom(Axiom)),
        !.

xml_ontology(element(_:'Ontology',Atts,Elts),ontology(O),Axioms) :-
                member('ontologyIRI'=O,Atts),
                elts_axioms(O,Elts,Axioms).


elts_axioms(_,[],[]).
elts_axioms(O,[E|Elts],Axioms2):-
        xml_axiom(O,E,A),
        !,
        elts_axioms(O,Elts,Axioms),
        (   is_list(A)
        ->  append(A,Axioms,Axioms2)
        ;   Axioms2=[A|Axioms]).
elts_axioms(O,[E|_],_) :-
        throw(error(cannot_translate_axiom(E,O))).



xml_axiom(Ont,element(_:'EntityAnnotation',_Atts,[Decl|Elts]),[EntityAxiom|Annots]) :-
        !,
        xml_axiom(Ont,Decl,EntityAxiom),
        EntityAxiom=..[_,E],
        findall(annotationAssertion(E,P,V),
                (   member(AX,Elts),
                    xml_annotation(AX,annotation(P,V))),
                Annots).

xml_axiom(Ont,element(_:'Declaration',_,[Decl]),Axiom) :-
        !,
        xml_axiom(Ont,Decl,Axiom).

xml_axiom(_Ont,element(_:Name,Atts,_),Axiom) :-
        xmle_entity(Name,Axiom,[IRI]),
        !,
        atts_iri(Atts,IRI).

xml_axiom(_Ont,element(_:Name,_Atts,Sub),Axiom) :-
        xmle_axiom(Name,Axiom,Args),
        !,
        maplist(axiom_xml_arg(Name),Sub,Args).

xml_axiom(Ont,Elt,_) :-
        throw(xml_axiom(Ont,Elt)).


axiom_xml_arg(ParentAxiom,Element,c(Arg)) :-
	desc_xml(ParentAxiom,Arg,Element),!.

axiom_xml_arg(_ParentAxiom,element(OWL_NS:'NamedIndividual',Atts,[]),i(IRI)) :-
	iri_att(IRIAtt),member(IRIAtt=IRI,Atts),owl_ns(OWL_NS),!.
axiom_xml_arg(_ParentAxiom,element('http://www.w3.org/2006/12/owl2-xml#':'ObjectProperty',Atts,[]),op(IRI)) :-
	iri_att(IRIAtt),member(IRIAtt=IRI,Atts),!.
axiom_xml_arg(_ParentAxiom,element('http://www.w3.org/2006/12/owl2-xml#':'DataProperty',Atts,[]),dp(IRI)) :-
	iri_att(IRIAtt),member(IRIAtt=IRI,Atts),!.
axiom_xml_arg(_ParentAxiom,element('http://www.w3.org/2006/12/owl2-xml#':'AnnotationProperty',Atts,[]),ap(IRI)) :-
	iri_att(IRIAtt),member(IRIAtt=IRI,Atts),!.
axiom_xml_arg(_ParentAxiom,X,X) :- !.


xml_desc(_Parent,element(_:Name,_Atts,[PEX|Elts]),Desc) :-
        xmle_PEdescription(Name,Pred),
        !,
                xml_desc(Name,PEX,PE),
        maplist(xml_desc(Name),Elts,Fillers),
        Desc=..[Pred,PE|Fillers].

xml_desc(_Parent,element(_:Name,Atts,[PEX|FillersX]),Desc) :-
        xmle_functor(Name,F),
        !,
        member(cardinality=Card,Atts),
                xml_desc(Name,PEX,PE),
        maplist(xml_desc(Name),FillersX,Fillers),
        Desc=..[F,Card,PE|Fillers].

xml_desc(_Parent,element(_:Name,_Atts,Elts),Desc) :-
        xmle_functor(Name,Pred),
        !,
        maplist(xml_desc(Name),Elts,Fillers),
        Desc=..[Pred,Fillers].

xml_desc(_Parent,element(_:_Name,Atts,[]),IRI) :-
                iri_att(A),
        member(A=IRI,Atts),
        !.

xml_desc(_Parent,element('owl:Class',Atts,[]),IRI) :-
                iri_att(A),
        member(A=IRI,Atts),
        !.


xml_desc(Parent,Elt,_) :-
        throw(xml_desc(Elt,in(Parent))).

xml_annotation(element(_:'Annotation',Atts,Elts),annotation(P,V)) :-
        !,
        member(annotationURI=P,Atts),
        Elts=[element(_:'Constant',_,[V])].

atts_iri(Atts,TIRI) :-
  	(   TIRI = i(IRI) ; TIRI = c(IRI) ; TIRI = op(IRI); TIRI = dp(IRI) ; var(IRI)),!,
	iri_att(A),
        member(A=IRI,Atts).


iri_att('URI').  iri_att('abbreviatedIRI').  iri_att('IRI'). 


:- rdf_register_ns(owlx,'http://www.w3.org/2006/12/owl2-xml#').

owl_ns(OWL_NS) :- rdf_db:ns(owl,OWL_NS),!.
owl_ns(OWL_NS) :- rdf_db:ns(owlx,OWL_NS),!.


:- multifile owl2_io:save_axioms_hook/3.
owl2_io:save_axioms_hook(File,owlx,Opts) :-
        owl_generate_xml(File,Opts).

owl_generate_xml(File) :-
        owl_generate_xml(File,[]).

owl_generate_xml(File,_Opts) :-
        findall(Axiom,axiom(Axiom),Axioms),
        (   select(ontology(Ont),Axioms,Axioms2)
        ->  true
        ;   Ont='http://example.com',Axioms2=Axioms),
        ontology_xml(Ont,Axioms2,XML),
        debug(owl_exporter,'Writing to ~w',[XML]),
        (   nonvar(File)
        ->  open(File,write,IO,[dialect(xml)])
        ;   open(pipe(cat),write,IO,[dialect(xml)])),
        xml_write(IO,XML,[
                         ]),
        close(IO),
        !.
owl_generate_xml(File,_) :-
        throw(no_generate(File)).

ontology_xml(O,Axioms,element(OWL_NS:'Ontology',Atts,Elts)) :-
	iri_att(IRIAtt),member(IRIAtt=O,Atts),owl_ns(OWL_NS),!,
        debug(owl_exporter,'Writing ~w',[O]),
        axioms_elts(O,Axioms,Elts).

axioms_elts(_,[],[]).
axioms_elts(O,[ontology(_)|Axioms],Elts):-
        !,
        axioms_elts(O,Axioms,Elts).
axioms_elts(O,[A|Axioms],[E|Elts]):-
        axiom_xml(O,A,E),
        !,
        axioms_elts(O,Axioms,Elts).
axioms_elts(O,[A|_],_) :-
        throw(error(axiom_elts(A,O))).

axiom_xml(_Ont,Axiom,XML) :-
                                       xmle_entity(_Name,Axiom,[Arg]),
	axiom_arg_xml(Axiom,Arg,XML),!.

axiom_xml(_Ont,Axiom,element(OWL_NS,[],Subs)) :-
        xmle_axiom(Name,Axiom,Args),owl_ns(OWL_NS),
        !,
        debug(owl_exporter,'Axiom: ~w',[Axiom]),
        maplist(axiom_arg_xml(Name),Args,Subs).
axiom_xml(_Ont,Axiom,_) :-
        throw(error(xmle_axiom(Axiom))).

axiom_arg_xml(ParentAxiom,c(Arg),Element) :-
	desc_xml(ParentAxiom,Arg,Element),!.

axiom_arg_xml(_ParentAxiom,c(IRI),element(OWL_NS:'Class',Atts,[])) :-
	iri_att(IRIAtt),member(IRIAtt=IRI,Atts),owl_ns(OWL_NS),!.
axiom_arg_xml(_ParentAxiom,i(IRI),element(OWL_NS:'NamedIndividual',Atts,[])) :-
	iri_att(IRIAtt),member(IRIAtt=IRI,Atts),owl_ns(OWL_NS),!.
axiom_arg_xml(_ParentAxiom,i(IRI),element(OWL_NS:'Individual',Atts,[])) :-
	iri_att(IRIAtt),member(IRIAtt=IRI,Atts),owl_ns(OWL_NS),!.
axiom_arg_xml(_ParentAxiom,op(IRI),element(OWL_NS:'ObjectProperty',Atts,[])) :-
	iri_att(IRIAtt),member(IRIAtt=IRI,Atts),owl_ns(OWL_NS),!.
axiom_arg_xml(_ParentAxiom,dp(IRI),element(OWL_NS:'DataProperty',Atts,[])) :-
	iri_att(IRIAtt),member(IRIAtt=IRI,Atts),owl_ns(OWL_NS),!.
axiom_arg_xml(_ParentAxiom,ap(IRI),element(OWL_NS:'AnnotationProperty',Atts,[])) :-
	iri_att(IRIAtt),member(IRIAtt=IRI,Atts),owl_ns(OWL_NS),!.
axiom_arg_xml(_ParentAxiom,X,X) :- !.




desc_xml(_Parent,propertyChain(PL),element(OWL_NS:'ObjectPropertyChain',_,Elts)) :-
	owl_ns(OWL_NS),!,
        maplist(desc_xml('ObjectPropertyChain'),PL,Elts).


	desc_xml(_Parent,IRI,element(OWL_NS:'Class',Atts,[])) :-
	iri_att(IRIAtt),member(IRIAtt=IRI,Atts),owl_ns(OWL_NS),
        atom(IRI),
	!.

desc_xml(_Parent,Desc,element(OWL_NS:Name,_Atts,Elts)) :-
        	owl_ns(OWL_NS),
        Desc=..[Pred,Args],
        is_list(Args),
        owlpredicate_typed(Pred,TypedPred),
        xmle_PEdescription(Name,TypedPred),
        Test=..[TypedPred,Desc],
        Test,
        debug(owl_exporter,'Desc: ~w Typed: ~w',[Desc,TypedPred]),
        !,
        maplist(desc_xml(Name),Args,Elts).

desc_xml(_Parent,Desc,element(OWL_NS:Name,_Atts,Elts)) :-
        	owl_ns(OWL_NS),
        Desc=..[Pred|Args],
        owlpredicate_typed(Pred,TypedPred),
        xmle_PEdescription(Name,TypedPred),
        Test=..[TypedPred,Desc],
        Test,
        debug(owl_exporter,'Desc: ~w Typed: ~w',[Desc,TypedPred]),
        !,
        maplist(desc_xml(Name),Args,Elts).

desc_xml(_Parent,Desc,element(OWL_NS:Name,[cardinality=Card],Elts)) :-
        	owl_ns(OWL_NS),
        Desc=..[Pred,Card|Args],
        owlpredicate_typed(Pred,TypedPred),
        xmle_functor(Name,TypedPred),
        Test=..[TypedPred,Desc],
        Test,
        !,
        maplist(desc_xml(Name),Args,Elts).

desc_xml(_Parent,Desc,element(OWL_NS:Name,[],Elts)) :-
	owl_ns(OWL_NS),
        Desc=..[Pred|Fillers],
        xmle_functor(Name,Pred),
        !,
        debug(owl_exporter,'Desc: ~w',[Desc]),
        maplist(desc_xml(Name),Fillers,Elts).

desc_xml(_Parent,IRI,element(OWL_NS:Name,Atts,[])) :-
	owl_ns(OWL_NS),
	iri_att(IRIAtt),member(IRIAtt=IRI,Atts),
        atom(IRI),
        xmle_entity(Name,Goal,[IRI]),
        Goal,
        !.

desc_xml(_Ont,Desc,_) :-
        throw(description(Desc)).



xmle_cardpred('ObjectMinCardinality',minCardinality).
xmle_cardpred('ObjectMaxCardinality',maxCardinality).
xmle_cardpred('ObjectExactCardinality',exactCardinality).

xmle_cardpred('DataMinCardinality',minCardinality).
xmle_cardpred('DataMaxCardinality',maxCardinality).
xmle_cardpred('DataExactCardinality',exactCardinality).

xmle_PEdescription('ObjectIntersectionOf',objectIntersectionOf).
xmle_PEdescription('ObjectUnionOf',objectUnionOf).
xmle_PEdescription('ObjectComplementOf',objectComplementOf).
xmle_PEdescription('ObjectOneOf',objectOneOf).
xmle_PEdescription('ObjectSomeValuesFrom',objectSomeValuesFrom).
xmle_PEdescription('ObjectAllValuesFrom',objectAllValuesFrom).
xmle_PEdescription('ObjectHasValue',objectHasValue).
xmle_PEdescription('ObjectHasSelf',objectHasSelf).

xmle_PEdescription('DataIntersectionOf',dataIntersectionOf).
xmle_PEdescription('DataUnionOf',dataUnionOf).
xmle_PEdescription('DataComplementOf',dataComplementOf).
xmle_PEdescription('DataOneOf',dataOneOf).
xmle_PEdescription('DataSomeValuesFrom',dataSomeValuesFrom).
xmle_PEdescription('DataAllValuesFrom',dataAllValuesFrom).
xmle_PEdescription('DataHasValue',dataHasValue).

xmle_functor('ObjectMinCardinality',objectMinCardinality).
xmle_functor('ObjectMaxCardinality',objectMaxCardinality).
xmle_functor('ObjectExactCardinality',objectExactCardinality).
xmle_functor('DataSomeValuesFrom',dataSomeValuesFrom).
xmle_functor('DataAllValuesFrom',dataAllValuesFrom).
xmle_functor('DataHasValue',dataHasValue).
xmle_functor('DataMinCardinality',dataMinCardinality).
xmle_functor('DataMaxCardinality',dataMaxCardinality).
xmle_functor('DataExactCardinality',dataExactCardinality).



xmle_entity('Class',class(A),[c(A)]).
xmle_entity('Datatype',datatype(A),[dt(A)]).
xmle_entity('ObjectProperty',objectProperty(A),[op(A)]).
xmle_entity('DataProperty',dataProperty(A),[dp(A)]).
xmle_entity('AnnotationProperty',annotationProperty(A),[ap(A)]).
xmle_entity('NamedIndividual',namedIndividual(A),[i(A)]). xmle_entity('Individual',individual(A),[i(A)]).

xmle_axiom('SubClassOf',subClassOf(A, B),[c(A), c(B)]).
xmle_axiom('EquivalentClasses',equivalentClasses(A),A1) :- maplist(iri_type(c),A,A1).
xmle_axiom('DisjointClasses',disjointClasses(A),A1) :- maplist(iri_type(c),A,A1).
xmle_axiom('DisjointUnion',disjointUnion(A, B),[c(A), c(B)]).

xmle_axiom('SubObjectPropertyOf',subPropertyOf(A, B),[op(A), op(B)]).
xmle_axiom('SubDataPropertyOf',subPropertyOf(A, B),[dp(A), dp(B)]).

xmle_axiom('EquivalentObjectProperties',equivalentProperties(A),A1) :- maplist(iri_type(op),A,A1).
xmle_axiom('EquivalentDataProperties',equivalentProperties(A),A1) :- maplist(iri_type(dp),A,A1).

xmle_axiom('DisjointObjectProperties',disjointProperties(A),A1) :- maplist(iri_type(op),A,A1).
xmle_axiom('DisjointDataProperties',disjointProperties(A),A1) :- maplist(iri_type(dp),A,A1).

xmle_axiom('InverseObjectProperties',inverseProperties(A, B),[op(A), op(B)]).

xmle_axiom('ObjectPropertyDomain',propertyDomain(A, B),[op(A), c(B)]).
xmle_axiom('DataPropertyDomain',propertyDomain(A, B),[dp(A), c(B)]).
xmle_axiom('ObjectPropertyRange',propertyRange(A, B),[op(A), c(B)]).
xmle_axiom('DataPropertyRange',propertyRange(A, B),[dp(A), c(B)]).

xmle_axiom('FunctionalObjectProperty',functionalProperty(A),[op(A)]).
xmle_axiom('FunctionalDataProperty',functionalProperty(A),[dp(A)]).

xmle_axiom('InverseFunctionalObjectProperty',inverseFunctionalProperty(A),[op(A)]).

xmle_axiom('ReflexiveObjectProperty',reflexiveProperty(A),[op(A)]).
xmle_axiom('IrreflexiveObjectProperty',irreflexiveProperty(A),[op(A)]).
xmle_axiom('SymmetricObjectProperty',symmetricProperty(A),[op(A)]).
xmle_axiom('AsymmetricObjectProperty',asymmetricProperty(A),[op(A)]).
xmle_axiom('TransitiveObjectProperty',transitiveProperty(A),[op(A)]).

xmle_axiom('SameIndividual',sameIndividual(A),A1) :- maplist(iri_type(i),A,A1).
xmle_axiom('DifferentIndividuals',differentIndividuals(A),A1) :- maplist(iri_type(i),A,A1).
xmle_axiom('ClassAssertion',classAssertion(A, B),[c(A), i(B)]).
xmle_axiom('ObjectPropertyAssertion',propertyAssertion(A, B, C),[op(A), i(B), i(C)]).
xmle_axiom('DataPropertyAssertion',propertyAssertion(A, B, C),[dp(A), i(B), C]).
xmle_axiom('NegativeObjectPropertyAssertion',negativePropertyAssertion(A, B, C),[op(A), i(B), i(C)]).
xmle_axiom('NegativeDataPropertyAssertion',negativePropertyAssertion(A, B, C),[dp(A), i(B), C]).
xmle_axiom('AnnotationAssertion',annotationAssertion(A, B, C),[ap(A), i(B), C]).


iri_type(Type,Arg,TypedArg) :-
	TypedArg =.. [Type,Arg].




:- use_module(owl2_model).
:- use_module(owl2_xml).
:- use_module(owl2_io).

:- begin_tests(rna,[setup(load_owlxfile)]).

load_owlxfile :-
        load_axioms('testfiles/rnao.owlx',owlx).

test(loaded) :-
        \+ \+ ontology(_).


test(expected) :-
        findall(Ax,
                (   expected(Ax),
                    debug(test,'Testing for: ~w',[Ax]),
                    \+ Ax,
                    debug(test,'** FAILED: ~w',[Ax])),
                FailedAxs),
        length(FailedAxs,NumFailed),
        debug(test,'*** TOTAL FAILED: ~d',[NumFailed]),
        FailedAxs=[].

expected(subPropertyOf('http://purl.obofoundry.org/pairs_with_CHH', 'http://purl.obofoundry.org/pairs_with_HH')).
expected(equivalentClasses(['http://purl.obofoundry.org/RNAO_0000003',
                            objectIntersectionOf(objectComplementOf(objectSomeValuesFrom('http://purl.obofoundry.org/has_part',
                                                                                         objectIntersectionOf('http://purl.obofoundry.org/RNAO_0000028',
                                                                                                              objectSomeValuesFrom('http://purl.obofoundry.org/pairs_with_CWW',
                                                                                                                                   'http://purl.obofoundry.org/RNAO_0000028')))),
                                                 objectSomeValuesFrom('http://purl.obofoundry.org/has_part',
                                                                      objectIntersectionOf('http://purl.obofoundry.org/RNAO_0000017',
                                                                                           objectSomeValuesFrom('http://purl.obofoundry.org/pairs_with_CWW',
                                                                                                                'http://purl.obofoundry.org/RNAO_0000017'))),
                                                 objectExactCardinality('2', 'http://purl.obofoundry.org/has_part', 'http://purl.obofoundry.org/RNAO_0000019'))])).
        
:- end_tests(rna).

:- begin_tests(write,[setup(roundtrip)]).

roundtrip :-
        retract_all_axioms,
        load_axioms('testfiles/wine.owl'),
        save_axioms('testfiles/wine.owlx',owlx),
        retract_all_axioms,
        load_axioms('testfiles/wine.owlx',owlx).

        

test(loaded) :-
        \+ \+ ontology(_).
        
:- end_tests(write).





:- module(owlapi_swrl_hooks,
          [
           ]).

:- use_module(library(jpl)).
:- use_module(swrl).
:- use_module(owl2_model).
:- use_module(owl2_metamodel).

prefix('org.semanticweb.owl.model').

:- multifile owl2_java_owlapi:owlterm_java/4.

owl2_java_owlapi:owlterm_java(Fac,rule,Pl,Obj) :-
        swrl_java(Fac,Pl,Obj).

swrl_java(Fac,i(V),Ob) :-
        !,
        owl2_java_owlapi:atom_javaURI(V,VU),
        jpl_call(Fac,getSWRLAtomIVariable,[VU],Ob). swrl_java(Fac,implies(A,C),Ob) :-
        !,
        maplist(swrl_java(Fac),A,JAL),
        list_jset(JAL,SJA),
        maplist(swrl_java(Fac),C,JCL),
        list_jset(JCL,SJC),
        jpl_call(Fac,getSWRLRule,[SJA,SJC],Ob).
swrl_java(Fac,description(CE,I),Ob) :-
        !,
        swrl_java(Fac,CE,JCE),
        swrl_java(Fac,I,JI),
        jpl_call(Fac,getSWRLClassAtom,[JCE,JI],Ob).
swrl_java(Fac,sameAs(X,Y),Ob) :-
        !,
        swrl_java(Fac,X,JX),
        swrl_java(Fac,Y,JY),
        jpl_call(Fac,getSWRLSameAsAtom,[JX,JY],Ob).
swrl_java(Fac,differentFrom(X,Y),Ob) :-
        !,
        swrl_java(Fac,X,JX),
        swrl_java(Fac,Y,JY),
        jpl_call(Fac,getSWRLdifferentFromAtom,[JX,JY],Ob).

swrl_java(Fac,A,Ob) :-
        A=..[F,X],                      !,
        swrl_java(Fac,description(F,X),Ob).
swrl_java(Fac,A,Ob) :-
        A=..[P,X,Y],                      !,
        owl2_java_owlapi:owlterm_java(Fac,_,objectProperty(P),JP),
        swrl_java(Fac,X,JX),
        swrl_java(Fac,Y,JY),
        jpl_call(Fac,getSWRLObjectPropertyAtom,[JP,JX,JY],Ob).
swrl_java(_,A,Ob) :-
        owl2_java_owlapi:atom_javaURI(A,Ob).

list_jset(L,JSet) :-
        jpl_new('java.util.HashSet',[],JSet),
        forall(member(Obj,L),
               jpl_call(JSet,add,[Obj],_)).





:- module(owl_parser,
	  [ convert/3,
	    owl_parse/4,
	    owl_parse/1,
	    owl_report/0,
	    owl_pack_ontology/0,
	    expand_ns/2,                  	    collapse_ns/4,
	    uri_split/4,
	    owlas_load/1,

	   
	    class/5,			  	    owl/4,
	    subclassOf/2,
	    property/7,
	    annotationProperty/1,
	    differentIndividuals/1,
	    sameIndividuals/1,
	    ontology/2,
	    individual/4,
	    disjointSet/1,
	    equivalentSet/1,
	    blanknode/3,
	    blanknode_gen/2,

	    owl_parser_log/2
	  ]).


:- use_module(library('semweb/rdf_db.pl')).
:- use_module(library('semweb/rdf_edit.pl')).
:- use_module(library('semweb/rdfs.pl')).
:- use_module(library('url.pl')).
:- use_module(library('http/http_open.pl')).

:- dynamic(class/5).
:- dynamic(owl/4).
:- dynamic(subclassOf/2).
:- dynamic(property/7).
:- dynamic(annotationProperty/1).
:- dynamic(differentIndividuals/1).
:- dynamic(sameIndividuals/1).
:- dynamic(ontology/2).
:- dynamic(individual/4).
:- dynamic(disjointSet/1).
:- dynamic(equivalentSet/1).
:- dynamic(blanknode/3).
:- dynamic(owl_parser_log/2).

:- dynamic(blanknode_gen/2).
:- dynamic(ontology/12).

:- dynamic(outstream/1).
:- dynamic(owl_repository/2).


owl_repository('http://www.semanticweb.gr/elevator.owl','testfiles/elevator5-tbox.owl').
owl_repository('http://www.kleemann.gr/elevator/data','testfiles/elevator5-abox.owl').
owl_repository('http://www.theoldtile.gr/data','testfiles/elevator5-tiles.owl').


go :-
	owl_parse('http://www.theoldtile.gr/data',complete,complete,true),
	open('thea1',write,St),
	print(St, '****   Classes *****'),nl(St),
	forall(class(A,B,C,D,E),(print(St,A-B-C-D-E),nl(St))),
	print(St, '****   Sub Classes *****'),nl(St),
	forall(subclassOf(A,B),(print(St,A-B),nl(St))),
	print(St, '****   Equiv Set  *****'),nl(St),	
	forall(equivalentSet(S),(print(St,S),nl(St))),
	print(St, '****   DisjointSet Set  *****'),nl(St),
	forall(disjointSet(S),(print(St,S),nl(St))),	
	
	print(St, '****   Properties   *****'),nl(St),
	forall(property(A,B,C,D,E,F,G),(print(St,A-B-C-D-E-F-G),nl(St))),	
	print(St, '****   Annotation Properties  *****'),nl(St),
	forall(annotationProperty(A),(print(St-A),nl(St))),	
	print(St, '****   Individuals  *****'),nl(St),      	
	forall(individual(A,B,C,D),(print(St,A-B-C-D),nl(St))),	
	print(St, '****   Different Individuals  *****'),nl(St),
	forall(differentIndividuals(S),(print(St,S),nl(St))),	
	print(St, '****   Same Individuals  *****'),nl(St),
	forall(sameIndividuals(S),(print(St,S),nl(St))),	
      
	close(St).

            					       

owl_parse(URL, RDF_Load_Mode, OWL_Parse_Mode,Imports) :-
	(   RDF_Load_Mode=complete,!,rdf_retractall(_,_,_); true),
	retractall(rdf_db:rdf_source(_,_,_,_)),
	rdf_load_stream(URL,[URL],Imports),
	owl_parse(OWL_Parse_Mode).
	        
    
owl_parse(OWL_Parse_Mode) :-
	rdf_2_owl,
	(   OWL_Parse_Mode=complete,!,owl_clear_as; true),
	owl_count(Z0), owl_parse_named_classes, owl_count(Z1), Z01 is Z0 - Z1,
	owl_parser_log(['Getting named classes...', Z01, ' triples used']), 	
	owl_parse_subclasses, owl_count(Z2), Z12 is Z1 - Z2,
	owl_parser_log(['Getting subclasses...',Z12, ' triples used']),	
	owl_parse_disjoint_classes, owl_count(Z3), Z23 is Z2 - Z3,
	owl_parser_log(['Getting disjoint sets of classes...', Z23, ' triples used']),
	owl_parse_equivalent_classes, owl_count(Z4), Z34 is Z3 - Z4,
	owl_parser_log(['Getting equivalent sets of classes...', Z34, ' triples used']),
	owl_parse_property, owl_count(Z5), Z45 is Z4 - Z5,
	owl_parser_log(['Getting properties...', Z45, ' triples unused']),
	owl_parse_annotationProperty, owl_count(Z6),Z56 is Z5 - Z6,
	owl_parser_log(['Getting Annotation properties...',Z56,' triples used']),
        owl_parse_individual_axioms, owl_count(Z7), Z67 is Z6 - Z7,
	owl_parser_log(['Getting Individual axioms...',Z67, 'triples used']),
	owl_parse_ontology, owl_count(Z8), Z78 is Z7 - Z8,
	owl_parser_log(['Getting Ontology...',Z78, ' triples used ']),
	owl_parse_named_individuals,owl_count(Z9), Z89 is Z8 - Z9,
	owl_parser_log(['Getting named Individuals...',Z89, ' triples used']),
	owl_parse_unnamed_classes, owl_count(Z10), Z910 is Z9 - Z10,
	owl_parser_log(['Getting unamed classes...', Z910, ' triples used']),
	owl_parse_unnamed_individuals,owl_count(Z11), Z1011 is Z10 - Z11,
	owl_parser_log(['Getting unnamed Individuals...',Z1011, 'triples used']),
	owl_parser_log(['Nubber of unused remain triples ', Z11]).


owl_pack_ontology :- 
	ontology(O,OA),
	findall(class(C1,C2,C3,C4,C5), class(C1,C2,C3,C4,C5),CL),
	findall(subclassOf(S1,S2), subclassOf(S1,S2),SL),
	findall(property(P1,P2,P3,P4,P5,P6,P7),property(P1,P2,P3,P4,P5,P6,P7),PL),
	findall(annotationProperty(AP1),annotationProperty(AP1),APL),
	findall(differentIndividuals(DI),differentIndividuals(DI),DIL),
	findall(sameIndividuals(SI),sameIndividuals(SI),SIL),
	findall(individual(I1,I2,I3,I4), individual(I1,I2,I3,I4), IL),
	findall(disjointSet(DS), disjointSet(DS), DSL), 
	findall(equivalentSet(ES),equivalentSet(ES),ESL),
	findall(blanknode(BN1,BN2,BN3),blanknode(BN1,BN2,BN3),BNL),
	assert(ontology(O,OA,CL,SL,PL,APL,DIL,SIL,IL,DSL,ESL,BNL)).

owl_report :-
	ontology(_O,OA,CL,SL,PL,APL,DIL,SIL,IL,DSL,ESL,BNL),
	length(OA, OACount), print('Ontology Properties:'-OACount), nl,
	length(CL, CLCount), print('Classes:'-CLCount), nl,
	length(SL, SLCount), print('SubClasses:'-SLCount), nl,
	length(PL, PLCount), print('Properties:'-PLCount), nl,
	length(APL, APLCount), print('Annotation Properties:'-APLCount), nl,
	length(DIL, DILCount), print('Different Individuals'-DILCount), nl,
	length(SIL, SILCount), print('Same Individuals'-SILCount), nl,
	length(IL, ILCount), print('Individuals'-ILCount), nl,
        length(DSL, DSLCount), print('Disjoint Classes'-DSLCount), nl,
        length(ESL, ESLCount), print('Equivalent Classes'-ESLCount), nl,
        length(BNL, BNLCount), print('Blank Nodes'-BNLCount), nl.


owlas_load(File) :-
	open(File,read,St),
	read(St,Term),
	read_owlas_terms(St,Term).
	
read_owlas_terms(St,'end_of_file') :- 
	close(St),!.
read_owlas_terms(St,X) :-	
	owlas_process(X),
	read(St,Term),!,
	read_owlas_terms(St,Term).

owlas_process(class(A,B,C,D,E)) :-
	(   class(A,B1,C1,D1,E1),!,
	    retract(class(A,B1,C1,D1,E1))
	;
	true),
	assert(class(A,B,C,D,E)).	

owlas_process(individual(A,B,C,D)) :-
	(   individual(A,B1,C1,D1),!,
	    retract(individual(A,B1,C1,D1))
	;
	true),
	assert(individual(A,B,C,D)).

owlas_process(subclassOf(A,B)) :-
	(   subclassOf(A,B),!
	;
	assert(subclassOf(A,B))).

owlas_process(_). 


owl_parser_log(Log) :-
	get_time(T),convert_time(T,TS),
	assertz(owl_parser_log(TS, Log)).



owl_clear_as :- 
	retractall(class(_,_,_,_,_)),
	retractall(subclassOf(_,_)),
	retractall(property(_,_,_,_,_,_,_)),
	retractall(annotationProperty(_)),
	retractall(differentIndividuals(_)),
	retractall(sameIndividuals(_)),
	retractall(ontology(_,_)),
	retractall(individual(_,_,_,_)),
	retractall(disjointSet(_)),
	retractall(equivalentSet(_)),
	retractall(blanknode(_,_,_)),
	retractall(ontology(_,_,_,_,_,_,_,_,_,_,_,_)).




convert(T,V,typed_value(T,V)).     




rdf_2_owl :-
	owl_parser_log(['Removing existing owl triples']),
	retractall(owl(_,_,_,_)),
	owl_parser_log('Copying RDF triples to OWL triples'), 
	rdf(X,Y,Z), 
	assert(owl(X,Y,Z,not_used)), fail.

rdf_2_owl :-
	owl_count(Z),
	owl_parser_log(['Number of owl triples copied: ',Z]).



rdf_load_stream(URL,Imported,Imports) :- 
  	(sub_string(URL,0,4,_,'http'), !, 
	 catch((http_open(URL,RDF_Stream,[]),
         		rdf_load(RDF_Stream,[blank_nodes(noshare)]), 
		close(RDF_Stream)),
	       Message, 
	       (owl_repository(URL,RURL),!,rdf_load_stream(RURL,Imported,Imports) ;
	         print(Message),nl)) 
	 ;
	 RDF_Stream = URL, rdf_load(RDF_Stream,[blank_nodes(noshare),if(true)])
	 ),

	(   Imports = true,
	    rdf(X,'http://www.w3.org/2002/07/owl#imports',Import_URL),
	    not( member(Import_URL, Imported)),!,
	    rdf_retractall(X,'http://www.w3.org/2002/07/owl#imports',Import_URL),
            rdf_load_stream(Import_URL,[Import_URL|Imported],Imports)
	  ; true).




 


owl_count(U) :- 
	findall(1,owl(_,_,_,not_used),X), length(X,U).



use_owl(X1,Y1,Z1) :- 
	expand_ns(X1,X),
	expand_ns(Y1,Y),
	expand_ns(Z1,Z),
	owl(X,Y,Z, not_used),
	retract(owl(X,Y,Z, not_used)),
	assert(owl(X,Y,Z,used)).



use_owl(X1,Y1,Z1,named) :- 
	expand_ns(X1,X),
	expand_ns(Y1,Y),
	expand_ns(Z1,Z),
	owl(X,Y,Z, not_used),
	not(sub_string(X,0,2,_,'__')), 
	retract(owl(X,Y,Z, not_used)),
	assert(owl(X,Y,Z,used)).



expand_ns(NS_URL, Full_URL) :-
	atom(NS_URL),
	not(NS_URL = literal(_)),
	uri_split(NS_URL,Short_NS,Term, ':'), 
	rdf_db:ns(Short_NS,Long_NS),!,
	concat_atom([Long_NS,Term],Full_URL).

expand_ns(URL, URL).



collapse_ns(FullURL, NSURL,Char,Options) :-
	nonvar(FullURL), 
	not(FullURL = literal(_)),
	uri_split(FullURL,LongNS, Term, '#'), 
	concat(LongNS,'#',LongNS1),
	rdf_db:ns(ShortNS,LongNS1),
	(   member(no_base(ShortNS),Options), ! , NSURL = Term 
	; 
	concat_atom([ShortNS,Char,Term],NSURL)
	),!.

collapse_ns(URL, URL,_,_).




uri_split(URI,Namespace,Term,Split_Char) :-
	sub_atom(URI,Start,_,After,Split_Char),
	sub_atom(URI,0,Start,_,Namespace),
	Start1 is Start + 1, 
	sub_atom(URI,Start1,After,_,Term). 

	


owl_collect_linked_nodes(Node,Predicate,InList,OutList) :-
	use_owl(Node,Predicate,A),!,
	owl_collect_linked_nodes(Node,Predicate,InList,List1),
	owl_collect_linked_nodes(A,Predicate,List1,OutList).

owl_collect_linked_nodes(Node,Predicate,InList,OutList) :-
	use_owl(A,Predicate,Node),!,
	owl_collect_linked_nodes(Node,Predicate,InList,List1),
	owl_collect_linked_nodes(A,Predicate,List1,OutList).
	
owl_collect_linked_nodes(Node,_,List, [Node|List]) :- 
	not(memberchk(Node, List)),!.

owl_collect_linked_nodes(_,_,List, List) :- !.





owl_deprecated_class(CID,Deprecated) :-
	use_owl(CID,'rdf:type','owl:DeprecatedClass'), Deprecated = true,!; 
	Deprecated = false.


owl_deprecated_property(PID,Deprecated) :-
	use_owl(PID,'rdf:type','owl:DeprecatedProperty'), Deprecated = true,!; 
	Deprecated = false.


owl_get_bnode(Node,Description) :-
	sub_string(Node,0,2,_,'__'),!,
	not( blanknode(Node,_,_)),
	assert(blanknode(Node,Description, used)).

owl_get_bnode(_,_).


use_optional_type(D) :- 
  use_owl(D,'rdf:type','owl:Class'), use_owl(D,'rdf:type','rdfs:Class'),!;
  use_owl(D,'rdf:type','rdfs:Class'),!;
  true.



owl_description_list('http://www.w3.org/1999/02/22-rdf-syntax-ns#nil',[]) :- !.
	     
owl_description_list(X,[F|R]) :- 
	use_owl(X,'rdf:type','rdf:List'),
	use_owl(X,'rdf:first',Element),
	owl_description(Element,F),
	use_owl(X,'rdf:rest',Y),
	!,owl_description_list(Y,R).



owl_individual_list('http://www.w3.org/1999/02/22-rdf-syntax-ns#nil',[]) :- !.

owl_individual_list(X,[F|R]) :- 
	use_owl(X,'rdf:type','rdf:List'),
	use_owl(X,'rdf:first',F),
	use_owl(X,'rdf:rest',Y),
	!,owl_individual_list(Y,R).



owl_restriction(Element,Restriction) :- 
	use_owl(Element,'rdf:type','owl:Restriction'),
	use_owl(Element, 'owl:onProperty',PropertyID),
	owl_restriction_type(Element,PropertyID, Restriction),!.

owl_restriction_type(E, PropertyID, restriction(PropertyID,allValuesFrom(Descr))) :- 
	use_owl(E, 'owl:allValuesFrom',D),
	owl_description(D, Descr),!.

owl_restriction_type(E, PropertyID, restriction(PropertyID,someValuesFrom(Descr))) :- 
	use_owl(E, 'owl:someValuesFrom',D),
	owl_description(D, Descr),!.

owl_restriction_type(E, PropertyID,restriction(PropertyID,cardinality(C))) :- 
	use_owl(E, 'owl:cardinality',C).

owl_restriction_type(E, PropertyID,restriction(PropertyID,minCardinality(C))) :- 
	use_owl(E, 'owl:minCardinality',C).

owl_restriction_type(E, PropertyID, restriction(PropertyID,maxCardinality(C))) :- 
	use_owl(E, 'owl:maxCardinality',C).
owl_restriction_type(E, PropertyID, restriction(PropertyID,value(Value))) :- 
	use_owl(E, 'owl:hasValue',Value).



owl_description(C,C) :- 
	not(sub_string(C,0,2,_,'__')).

owl_description(C,D) :- 
	blanknode(C,D,Use),
	(   Use = used, owl_parser_log(C-D), 
	    retractall(blanknode(C,D,used)),
	    assert(blanknode(C,D,shared))
	;
	    true).

owl_description(D,Restriction) :- 
	owl_restriction(D, Restriction),
	use_optional_type(D),
	owl_get_bnode(D,Restriction).

owl_description(D,unionOf(L)) :- 
	use_owl(D,'owl:unionOf',L1),
	use_optional_type(D),
	owl_description_list(L1,L),
	owl_get_bnode(D,unionOf(L)).

owl_description(D,intersectionOf(L)) :- 
	use_owl(D,'owl:intersectionOf',L1),
	use_optional_type(D),
	owl_description_list(L1,L),
	owl_get_bnode(D,intersectionOf(L)).

owl_description(D,complementOf(Descr)) :- 
	use_owl(D,'owl:complementOf',D1),
	use_optional_type(D),	
	owl_description(D1,Descr),
	owl_get_bnode(D,complementOf(Descr)).

owl_description(D,oneOf(L)) :- 
	use_owl(D,'owl:oneOf',L1),
	use_optional_type(D),
	owl_individual_list(L1,L),
	owl_get_bnode(D,oneOf(L)).
 
  
owl_parse_named_classes :-         
	(   use_owl(C,'rdf:type','owl:Class',named) ; use_owl(C,'rdf:type','rdfs:Class',named)),
	owl_deprecated_class(C,Deprecated),
	not(class(C,_,_,_,_)),
        findall(D,(owl_description(C,D),C \= D), DL),    
	findall(CA,owl_annotation(C,CA), CAL),   
	assert(class(C,Deprecated,complete,CAL, DL)),
	(   use_owl(C, 'rdf:type','rdfs:Class'); true ),
	fail.

owl_parse_named_classes.         

 

owl_parse_unnamed_classes :- 
	(   use_owl(C,'rdf:type','owl:Class') ; use_owl(C,'rdf:type','rdfs:Class')), 
	owl_deprecated_class(C,Deprecated),
	not(class(C,_,_,_,_)),
        findall(D,(owl_description(C,D),C \= D ), DL),    
	findall(CA,(owl_annotation(C,CA)), CAL),   
	assert(class(C,Deprecated,complete,CAL, DL)),
	(   use_owl(C, 'rdf:type','rdfs:Class'); true ),
	fail.

owl_parse_unnamed_classes.



owl_parse_subclasses :- 
	use_owl(X,'rdfs:subClassOf',Y),	
        owl_description(X,DX),
	owl_description(Y,DY),
	retractall(subclassOf(DX,DY)),
        assert(subclassOf(DX,DY)),fail.

owl_parse_subclasses. 





assert_equivalentSet(Set) :-
	delete(Set,intersectionOf([]),[A,B|Rest]),!,
	retractall(equivalentSet([A,B|Rest])),
	assert(equivalentSet([A,B|Rest])).
	

owl_parse_equivalent_classes:-
	use_owl(X,'owl:equivalentClass',Y),
	owl_collect_linked_nodes(X,'owl:equivalentClass',[],List1),
	owl_collect_linked_nodes(Y,'owl:equivalentClass',List1,List2),
	owl_set_descriptions(List2,SetD),	
	assert_equivalentSet(SetD),
		fail.

owl_parse_equivalent_classes.




owl_parse_disjoint_classes :-
	findall(X-Y,use_owl(X,'owl:disjointWith',Y),Arcs),
	owl_disjoint_arcs(Arcs).



owl_disjoint_arcs([A-B|T]) :-
	owl_remove_sym(B-A,T,T1),
	owl_disjoint_nodes([A,B],Set,T1,T2),
	owl_set_descriptions(Set,SetD),
	(   findall(S,(disjointSet(S),subset(SetD,S)),[]),assert(disjointSet(SetD));true),
	owl_disjoint_arcs(T2).

owl_disjoint_arcs([]).



owl_set_descriptions([],[]).

owl_set_descriptions([H1|T1],[H2|T2]):-
	owl_description(H1,H2),!,
	owl_set_descriptions(T1,T2).

owl_set_descriptions([H1|T1],[H1|T2]):-
	owl_set_descriptions(T1,T2).




owl_disjoint_nodes(SetIn,SetOut,ArcsIn,ArcsOut) :-
	owl_disjoint_node(X,SetIn,ArcsIn,ArcsOut1),!,
	owl_disjoint_nodes([X|SetIn],SetOut,ArcsOut1,ArcsOut).

owl_disjoint_nodes(X,X,Arcs,Arcs).



owl_disjoint_node(_,[],T,T) :- !.
owl_disjoint_node(Node,[H|T],ArcsIn,ArcsOut ):-
	(   member(Node-H,ArcsIn),owl_remove_sym(Node-H,ArcsIn,ArcsOut1); 
	    member(H-Node,ArcsIn),owl_remove_sym(H-Node,ArcsIn,ArcsOut1)), 
	not(memberchk(Node,[H|T])),
	owl_disjoint_node(Node,T,ArcsOut1,ArcsOut).




owl_remove(_,[],[]) :- !.
owl_remove(H,[H|T],T1) :- !, 
	owl_remove(H,T,T1).
owl_remove(H,[A|T],[A|T1]) :-
	owl_remove(H,T,T1).



owl_remove_sym(A-B,In,Out) :-
	(  sub_string(A,0,2,_,'__'); sub_string(B,0,2,_,'__')),
	owl_remove(A-B,In,In1),
	owl_remove(B-A,In1,Out),!.
owl_remove_sym(_,In,In).

	

owl_parse_property :- 
	owl_parse_property_type(PID,PTList),
	owl_deprecated_property(PID,Deprecated),
	not(sub_string(PID,0,2,_,'__')), 
	not(property(PID,_,_,_,_,_,_)),  
	findall(Xs, use_owl(PID,'rdfs:subPropertyOf',Xs),PID_SuperList),
	findall(Dd, (use_owl(PID,'rdfs:domain',Xd),owl_description(Xd,Dd)), PID_DomainList), 
	findall(Dr,(use_owl(PID,'rdfs:range',Xr), owl_description(Xr,Dr)), PID_RangeList),
	findall(CA,(owl_annotation(PID,CA)), AnnotationList),   
	assert(property(PID,Deprecated,AnnotationList,PID_SuperList,
			      PTList,PID_DomainList,PID_RangeList)),
	fail.


owl_parse_property:-
	use_owl(X,'owl:equivalentProperty',Y),
	owl_collect_linked_nodes(X,'owl:equivalentProperty',[],List1),
	owl_collect_linked_nodes(Y,'owl:equivalentProperty',List1,List2),
	assert(equivalentSet(List2)),
	fail.

owl_parse_property.



owl_parse_property_type(PID,[OT,F,IF,T,S,iof(Inv)]) :-
	(   use_owl(PID,'rdf:type','owl:DatatypeProperty'), OT = datatypeProperty ; true),
	(   use_owl(PID,'rdf:type','owl:ObjectProperty'), OT = objectProperty ; true),
	(   use_owl(PID,'rdf:type','owl:FunctionalProperty'),F=functional ; true),
	(   use_owl(PID,'rdf:type','owl:InverseFunctionalProperty'),IF=inversefunctional; true),
	(   use_owl(PID,'rdf:type','owl:TransitiveProperty'), T=transitive; true),
	(   use_owl(PID,'rdf:type','owl:SymmetricProperty'), S=symmetric; true),
	(   use_owl(PID,'owl:inverseOf', Inv); true),
	nonvar(PID).


owl_annotation(C,annotation(APID,Value)) :- 
	annotationProperty(APID),
	use_owl(C,APID,Value).

owl_annotation(C,annotation(APID,Value)) :-
	use_owl(APID,'rdf:type','owl:AnnotationProperty'),
	(   use_owl(APID,'rdf:type','rdf:Property'),! ; true),
	not(sub_string(APID,0,2,_,'__')), 
	not(annotationProperty(APID)),  
	assert(annotationProperty(APID)),
	use_owl(C,APID,Value).

owl_annotation(C, annotation('rdfs:comment',CA)) :-
  	use_owl(C,'rdfs:comment',CA).	

owl_annotation(O, annotation('rdfs:label',OA)) :-
  	use_owl(O,'rdfs:label',OA).		     

owl_annotation(O, annotation('rdfs:seeAlso',OA)) :-
  	use_owl(O,'rdfs:seeAlso',OA).	


 
owl_parse_annotationProperty :- 
	use_owl(PID, 'rdf:type', 'owl:AnnotationProperty'),
	not(sub_string(PID,0,2,_,'__')), 
	not(annotationProperty(PID)),  
	assert(annotationProperty(PID)),
		findall(Dr, (use_owl(PID,'rdfs:range',Xr),owl_description(Xr,Dr)), _),

		fail.

owl_parse_annotationProperty.


owl_parse_ontology :-
	use_owl(O,'rdf:type','owl:Ontology'),
        findall(OA,(owl_ontology_annotation(O,OA);owl_annotation(O,OA)), OAL),   
	assert(ontology(O,OAL)),fail.

owl_parse_ontology.


owl_ontology_annotation(O, annotation(P,O1)) :-
	use_owl(P,'rdf:type','owl:OntologyProperty'),
        use_owl(O,P,O1),
  	use_owl(O1,'rdf:type','owl:Ontology'),!.

owl_ontology_annotation(O, annotation('owl:versionInfo',OA)) :-
  	use_owl(O,'owl:versionInfo',OA).		     

owl_ontology_annotation(O, annotation('rdfs:isDefinedBy',OA)) :-
  	use_owl(O,'rdfs:isDefinedBy',OA).	

owl_ontology_annotation(O, annotation('owl:imports',OA)) :-
  	use_owl(O,'owl:imports',OA).	

owl_ontology_annotation(O, annotation('owl:backwardCompatibleWith',OA)) :-
  	use_owl(O,'owl:backwardCompatibleWith',OA).	

owl_ontology_annotation(O, annotation('owl:priorVersion',OA)) :-
  	use_owl(O,'owl:priorVersion',OA).	




owl_parse_named_individuals :- 
	owl(I,_,_,not_used),
	not(sub_string(I,0,2,_,'__')), not(individual(I,_,_,_)),
	findall(T, (use_owl(I,'rdf:type',T1),owl_description(T1,T)),ITList),
	findall(value(P,V), (property(P,_,_,_,_,_,_),use_owl(I,P,V)), IVList),
 	findall(A,(owl_annotation(I,A)), AnnotationList), 
	assert(individual(I,AnnotationList,ITList,IVList)),fail.

owl_parse_named_individuals.



owl_parse_unnamed_individuals:-
	owl(I,_,_,not_used),not(individual(I,_,_,_)),
	findall(T, (use_owl(I,'rdf:type',T1),owl_description(T1,T)),ITList),
	findall(value(P,V), ((property(P,_,_,_,_,_,_);			    
			     annotationProperty(P)),use_owl(I,P,V)), IVList),
	findall(A,(owl_annotation(I,A)), AnnotationList), 
	assert(individual(I,AnnotationList,ITList,IVList)),fail.

owl_parse_unnamed_individuals.




owl_parse_individual_axioms :-
	use_owl(X,'rdf:type','owl:AllDifferent'),
	use_owl(X,'owl:distinctMembers',L),
	owl_individual_list(L,L1),
	assert(differentIndividuals(L1)),fail.

owl_parse_individual_axioms :- 
	findall(X-Y,use_owl(X,'owl:differentFrom',Y),Arcs),
	owl_different_arcs(Arcs),
	owl_parse_individual_axioms_2.



owl_parse_individual_axioms_2 :- 
	use_owl(X,'owl:sameAs',Y),
	owl_collect_linked_nodes(X,'owl:sameAs',[],List1),
	owl_collect_linked_nodes(Y,'owl:sameAs',List1,List2),
	assert(sameIndividuals(List2)),
	fail.

owl_parse_individual_axioms_2.



owl_different_arcs([A-B|T]) :-
	owl_remove_sym(B-A,T,T1),
	owl_different_nodes([A,B],Set,T1,T2),
	(   findall(S,(differentIndividuals(S),subset(Set,S)),[]),
	    assert(differentIndividuals(Set));true),
	owl_different_arcs(T2).

owl_different_arcs([]).



owl_different_nodes(SetIn,SetOut,ArcsIn,ArcsOut) :-
	owl_different_node(X,SetIn,ArcsIn,ArcsOut1),!,
	owl_different_nodes([X|SetIn],SetOut,ArcsOut1,ArcsOut).

owl_different_nodes(X,X,Arcs,Arcs).



owl_different_node(_,[],T,T) :- !.
owl_different_node(Node,[H|T],ArcsIn,ArcsOut ):-
	(   member(Node-H,ArcsIn),owl_remove(Node-H,ArcsIn,ArcsOut1); 
	    member(H-Node,ArcsIn),owl_remove(H-Node,ArcsIn,ArcsOut1)), 
	not(memberchk(Node,[H|T])),
	owl_different_node(Node,T,ArcsOut1,ArcsOut).















:- module(owl2_sqlmap_owlgres,
          [
           owlgres_query/2
          ]).

:- use_module(owl2_model).
:- use_module(owl2_metamodel).
:- use_module(owl2_io).
:- use_module(bio(sql_compiler)). :- use_module(library(odbc)).

:- load_schema_defs(owlgres_sql_schema).

owl2_model:objectPropertyAssertion(P,A,B) <-
  object_role_assertion(PI,AI,BI),
  tbox_name(PI,_,_,_,P),
  individual_name(AI,A),
  individual_name(BI,B).

owl2_model:dataPropertyAssertion(P,A,Value) <-
  data_role_assertion(PI,AI,Value,_Datatype,_Lang),
  tbox_name(PI,_,_,_,P),
  individual_name(AI,A).

owl2_model:propertyAssertion(P,A,B) :- dataPropertyAssertion(P,A,B).
owl2_model:propertyAssertion(P,A,B) :- objectPropertyAssertion(P,A,B).

owl2_model:classAssertion(C,A) <-
  concept_assertion(CI,AI),
  tbox_name(CI,C),
  individual_name(AI,A).

owlgres_query(Goal,Project) :-
                getenv('OWLGRES_DB',DB),
        getenv('OWLGRES_USER',USER),
        getenv('OWLGRES_PASSWD',PASSWD),
        odbc_connect(DB,Dbh,[user(USER),alias(DB),password(PASSWD),open(once),silent(true)]),
        plterm_to_sqlterm(Project,Goal,SqlTerm),
        sqlterm2atom(SqlTerm,Sql),
        debug(sql,'SQL: ~w',[Sql]),
        odbc_prepare(Dbh,
                     Sql,
                     [],
                     Sth,
                     []),
        !,
        debug(sql,'prepared, now executing',[]),
        odbc_execute(Sth,[],RowTerm),
        debug(sql,'RowTerm: ~w',[RowTerm]),
        (   is_list(Project)
        ->  ProjectColVars=Project
        ;   compound(Project)
        ->  Project=..[_|ProjectColVars]
        ;   ProjectColVars=[Project]),
        RowTerm =.. [row|Vals],
        unify_project_cols(ProjectColVars,Vals).
        
unify_project_cols([],[]).
unify_project_cols([Var|RestVars],Vals):-
	compound(Var),
	!,
	Var=..[_|InnerVars],
	append(InnerVars,RestVars,Vars),
	unify_project_cols(Vars,Vals).
unify_project_cols([Var|Vars],[Val|Vals]):-
        Var=Val,
        !,
        unify_project_cols(Vars,Vals).
unify_project_cols([Var|Vars],[Val|Vals]):-
        number(Var),
        atom_number(Val,Var),
        !,
        unify_project_cols(Vars,Vals).





:- discontiguous relation/2.
:- discontiguous attribute/3.
:- discontiguous unique/3.

relation(annotation_to_literal, 5).
attribute(1, annotation_to_literal, annotation_role, integer).
attribute(2, annotation_to_literal, individual, integer).
attribute(3, annotation_to_literal, value, string).
attribute(4, annotation_to_literal, datatype, string).
attribute(5, annotation_to_literal, language, string).
relation(annotation_to_resource, 3).
attribute(1, annotation_to_resource, annotation_role, integer).
attribute(2, annotation_to_resource, a, integer).
attribute(3, annotation_to_resource, b, integer).
relation(concept_assertion, 2).
attribute(1, concept_assertion, concept, integer).
attribute(2, concept_assertion, individual, integer).
relation(data_role_assertion, 5).
attribute(1, data_role_assertion, data_role, integer).
attribute(2, data_role_assertion, individual, integer).
attribute(3, data_role_assertion, value, string).
attribute(4, data_role_assertion, datatype, string).
attribute(5, data_role_assertion, language, string).
relation(individual_name, 2).
attribute(1, individual_name, id, integer).
attribute(2, individual_name, name, string).
relation(object_role_assertion, 3).
attribute(1, object_role_assertion, object_role, integer).
attribute(2, object_role_assertion, a, integer).
attribute(3, object_role_assertion, b, integer).

relation(tbox_concept_inclusion, 3).
attribute(1, tbox_concept_inclusion, sub, integer).
attribute(2, tbox_concept_inclusion, super, integer).
attribute(3, tbox_concept_inclusion, positive, bool).
relation(tbox_data_role_inclusion, 2).
attribute(1, tbox_data_role_inclusion, sub, integer).
attribute(2, tbox_data_role_inclusion, super, integer).
relation(tbox_name, 5).
attribute(1, tbox_name, id, integer).
attribute(2, tbox_name, type, integer).
attribute(3, tbox_name, auxiliary, bool).
attribute(4, tbox_name, frequency, integer).
attribute(5, tbox_name, name, string).
relation(tbox_object_role_inclusion, 2).
attribute(1, tbox_object_role_inclusion, sub, integer).
attribute(2, tbox_object_role_inclusion, super, integer).


:- module(swrl,
          [
           implies/2,
           swrlAtom/1,
           swrl_to_owl_axioms/2,
           prolog_clause_to_swrl_rule/2,
           prolog_source_to_swrl_rules/2,
           prolog_source_to_axioms/2
          ]
    ).

:- use_module(owl2_model).
:- use_module(library('semweb/rdf_db.pl'),[rdf_register_ns/3]).

:- multifile owl2_model:axiompred/1, owl2_model:axiom/1.

owl2_model:axiompred(implies/2).
:- dynamic implies/2.
:- multifile implies/2.
owl2_model:axiom(implies(A,C)):- implies(A,C).

:- multifile owl2_model:assert_axiom_hook/1.
owl2_model:assert_axiom_hook(implies(A,C)) :-
        assert(swrl:implies(A,C)).

swrlAtom(A):-
        (   A=description(X,CE)
        ->  classExpression(CE),i_object(X)
        ;   A=dataRange(DR,X)
        ->  dataRange(DR),d_object(X)
        ;   A=sameAs(X,Y)
        ->  i_object(X),i_object(Y)
        ;   A=differentFrom(X,Y)
        ->  i_object(X),i_object(Y)
        ;   A=builtin(X,L)
        ->  builtin(X),list_of_d_object(L)
        ;   A=..[F,X]
        ->  class(F),
            i_object(X)
        ;   A=..[F,X,Y]
        ->  i_object(X),
            (   objectProperty(F)
            ->  i_object(X)
            ;   dataProperty(F)
            ->  d_object(Y))).

i_object(X) :- i_variable(X).
i_object(X) :- individual(X).

d_object(X) :- d_variable(X).
d_object(X) :- literal(X).

i_variable(i(_)).
d_variable(d(_)).

list_of_d_object(L) :- forall(member(X,L),d_object(X)).

normalize_swrl_rule(implies(A,C),implies(AX,CX)) :-
        (   is_list(A)
        ->  maplist(normalize_swrl_atom,A,AX)
        ;   maplist(normalize_swrl_atom,[A],AX)),
        (   is_list(C)
        ->  maplist(normalize_swrl_atom,C,CX)
        ;   maplist(normalize_swrl_atom,[C],CX)).

normalize_swrl_atom(A, description(Class,Ob) ) :-
        A=..[Class,Ob],
        !.
normalize_swrl_atom(A, A).
                   

swrl_to_owl_axioms(Rule, Axioms) :-
        normalize_swrl_rule(Rule,implies(A,Cs)),
        findall(Axiom,
                (   member(C,Cs),
                    debug(swrl,'Translating ~w -> ~w',[A,C]),
                    swrl_to_owl(A,C,Axiom)),
                Axioms),
        Axioms\=[].



swrl_to_owl([description(Sub,v(X))],description(Super,v(X)), subClassOf(Sub,Super)) :- !.
swrl_to_owl([A],C,subPropertyOf(SubP,SuperP)) :-
        A=..[SubP,v(X),v(Y)],
        C=..[SuperP,v(X),v(Y)],
        !.
swrl_to_owl([A],C,symmetricProperty(P)) :-
        A=..[P,v(X),v(Y)],
        C=..[P,v(Y),v(X)],
        !.
swrl_to_owl([A],C,inverseProperties(P,Q)) :-
        A=..[P,v(X),v(Y)],
        C=..[Q,v(Y),v(X)],
        !.
swrl_to_owl(AL,C,transitiveProperty(P)) :-
        C=..[P,v(X),v(Y)],
        subgoals_to_property_chain(AL,PL,X,Y),
        PL=[P,P],
        !.
swrl_to_owl(AL,C,subPropertyOf(propertyChain(PL),P)) :-
        C=..[P,v(X),v(Y)],
        subgoals_to_property_chain(AL,PL,X,Y),
        PL=[_,_|_],
        !.
swrl_to_owl(AL, description(Sub,v(X)), subClassOf(Sub,intersectionOf(DL))) :-
        subgoals_to_intersection(AL,v(X),DL),
        !.
swrl_to_owl([AL], description(Sub,v(X)), subClassOf(Sub,unionOf(DL))) :-
        AL=(_;_),
        !,
        subgoals_to_union(AL,v(X),DL),
        !.
swrl_to_owl(AL, description(Sub,v(X)), subClassOf(someValuesFrom(P,D),Sub)) :-
        select(A1,AL,[A2]),
        A1=..[P,v(X),v(Y)],
        A2=description(D,v(Y)),
        !.
swrl_to_owl(AL,C,subClassOf(Sub,intersectionOf(DL))) :-
        C=..[Sub,v(X)],
        subgoals_to_intersection(AL,X,DL),
        DL=[_,_|_],
        !.
swrl_to_owl(AL,C,subClassOf(Sub,D)) :-         C=..[Sub,v(X)],
        subgoals_to_intersection(AL,X,[D]),
        !.
swrl_to_owl(AL,C,subClassOf(Sub,D)) :- 
        C=..[Sub,v(X)],
        subgoals_to_description(AL,X,D),
        !.
swrl_to_owl([],description(C,I),classAssertion(C,I)) :-
        I\=v(_),
        !.
swrl_to_owl([],C,propertyAssertion(P,X,Y)) :-          C=..[P,X,Y],
        X\=v(_),
        Y\=v(_),
        !.
swrl_to_owl([A],description(D,X),propertyDomain(P,D)) :-
        A=..[P,X,_],
        !.
swrl_to_owl([A],description(R,X),propertyRange(P,R)) :-
        A=..[P,_,X],
        !.
swrl_to_owl(AL,C,Axiom) :-
        C=..[P,X,Y],                    select(A1,AL,[A2]),     
        A1=..[P2,X,Y],                  A2=description(D,Y),          atom(D),
        atom_concat(D,'_p',DP),         !,
        member(Axiom,
               [subClassOf(D,hasSelf(DP)),
                subPropertyOf(propertyChain([P2,DP]),P)]).


subgoals_to_property_chain([],[],X,X) :- !.
subgoals_to_property_chain(AL,[P|PL],X,Y) :-
        select(A,AL,AL2),
        A=..[P,v(X),v(Z)],
        subgoals_to_property_chain(AL2,PL,Z,Y).
subgoals_to_property_chain(AL,[inverseOf(P)|PL],X,Y) :-
        select(A,AL,AL2),
        A=..[P,v(Z),v(X)],
        subgoals_to_property_chain(AL2,PL,Z,Y).

subgoals_to_intersection([],_,[]).
subgoals_to_intersection([A|AL],V,[D|DL]) :-
        A=description(D,V),
        subgoals_to_intersection(AL,V,DL).

subgoals_to_union((A;AL),V,[D|DL]) :-
        !,
        A=description(D,V),
        subgoals_to_union(AL,V,DL).
subgoals_to_union(description(D,_),_,[D]).

subgoals_to_description([],_,[]).
subgoals_to_description([A|AL],V,[D|DL]) :-
        subgoal_to_description(A,V,D),
        subgoals_to_description(AL,V,DL).

subgoal_to_description(description(D,V),V,D).

:- multifile prolog_term_to_swrl_hook/2.


prolog_clause_to_swrl_rule(Term,SWRL):-
        numbervars(Term,1,_,[functor_name(v)]),
        prolog_clause_to_swrl_rule2(Term,SWRL),
        debug(swrl,'translated: ~w ==> ~w',[Term,SWRL]),
        !.
prolog_clause_to_swrl_rule(Term,_):-
        throw(error(prolog_clause_to_swrl_rule(Term))).

prolog_clause_to_swrl_rule2( (C:-A), implies(Ax,Cx) ):-
        !,
        prolog_term_to_swrl_atom(C,Cx),
        prolog_term_to_swrl_atom(A,Ax).
prolog_clause_to_swrl_rule2( ('->'(A,C)), implies(Ax,Cx) ):-
        !,
        prolog_term_to_swrl_atom(C,Cx),
        prolog_term_to_swrl_atom(A,Ax).
prolog_clause_to_swrl_rule2(C, implies([],Cx) ):-         !,
        prolog_term_to_swrl_atom(C,Cx).

prolog_term_to_swrl_atom( A, AX ):-
        prolog_term_to_swrl_hook(A,AX). prolog_term_to_swrl_atom( (A,B), [Ax|Bx] ):-
        !,
        prolog_term_to_swrl_atom(A,Ax),
        prolog_term_to_swrl_atom(B,Bx1),
        (   is_list(Bx1)
        ->  Bx=Bx1
        ;   Bx=[Bx1]).
prolog_term_to_swrl_atom( v(A), v( A)):- !.
prolog_term_to_swrl_atom( A=B, sameAs(AX,BX) ):-
        !,
        prolog_term_to_swrl_atom( A, AX),
        prolog_term_to_swrl_atom( B, BX).
prolog_term_to_swrl_atom( AneqB, differentFrom(AX,BX) ):-
        (   AneqB = (A\=B)
        ;   AneqB = (\+ A=B)),
        !,
        prolog_term_to_swrl_atom( A, AX),
        prolog_term_to_swrl_atom( B, BX).
prolog_term_to_swrl_atom( Goal, builtin(B,[Return|ArgsX2]) ):-
        Goal=..[P|Args],
        pred_swrlb(P,B),
        !,
        maplist(prolog_term_to_swrl_atom,Args,ArgsX),
                reverse(ArgsX,[Return|ArgsXR]),
        reverse(ArgsXR,ArgsX2).
prolog_term_to_swrl_atom( Goal, builtin(B,ArgsX) ):-
        goal_swrlb(Goal,Builtin),
        Builtin=..[B|Args],
        !,
        maplist(prolog_term_to_swrl_atom,Args,ArgsX).
prolog_term_to_swrl_atom( A, description(FX,BX) ):-
        A=..[F,B],
        !,
        default_ns(F,FX),
        prolog_term_to_swrl_atom( B, BX).
prolog_term_to_swrl_atom( A, AX ):-
        A=..[F,B,C],
        !,
        prolog_term_to_swrl_atom( B, BX),
        prolog_term_to_swrl_atom( C, CX),
        default_ns(F,FX),
        AX=..[FX,BX,CX].        prolog_term_to_swrl_atom( A, literal(type('xsd:integer',A)) ) :-
        number(A),
        !.
prolog_term_to_swrl_atom( A, A) :-
        atom(A),
        !.
        
prolog_source_to_swrl_rules(File,Rules) :-
        read_file_to_terms(File,Terms,[]),
        prolog_terms_to_swrl_rules(Terms,Rules).

prolog_terms_to_swrl_rules([],[]).
prolog_terms_to_swrl_rules([T|Terms],[R|Rules]) :-
        prolog_clause_to_swrl_rule(T,R),
        !,
        prolog_terms_to_swrl_rules(Terms,Rules).

prolog_terms_to_swrl_rules([T|Terms],Rules) :-
        format(user_error,'Cannot translate: ~q~n',[T]),
        prolog_terms_to_swrl_rules(Terms,Rules).

prolog_source_to_axioms(File,Axioms) :-
        prolog_source_to_swrl_rules(File,Rules),
        findall(Axiom,
                (   member(Rule,Rules),
                    (   swrl_to_owl_axioms(Rule,Axioms),
                        Axioms\=[]
                    ->  member(Axiom,Axioms)
                    ;   Axiom=Rule)),
                Axioms).


goal_swrlb(concat_atom(L,A),G):-
        G=..[stringConcat,A|L].
goal_swrlb(X is A+B,add(A,B,X)).
goal_swrlb(X is A-B,subtract(A,B,X)).
goal_swrlb(X is A*B,multiply(A,B,X)).
goal_swrlb(X is A/B,divide(A,B,X)).

pred_swrlb(<,lessThan). 
pred_swrlb(=,equal). pred_swrlb(\=,notEqual). pred_swrlb(=<,lessThanOrEqual). 
pred_swrlb(>,greaterThan). 
pred_swrlb(>=,greaterThanOrEqual). 

pred_swrlb(=,stringEqualIgnoreCase). pred_swrlb(atom_length,stringLength).
pred_swrlb(upcase_atom,upperCase).
pred_swrlb(downcase_atom,lowerCase).

default_ns(F,FX) :-
        rdf_register_ns('_d','http://x.org#',[force(true)]),
        atom_concat('_d:',F,FX).



:- multifile owl2_io:load_axioms_hook/3.
owl2_io:load_axioms_hook(File,pl_swrl,Opts) :-
        read_file_to_terms(File,Terms,Opts),
        forall(member(Term,Terms),
               (   prolog_clause_to_swrl_rule(Term,SWRL_Rule),
                   assert_axiom(SWRL_Rule))).

owl2_io:load_axioms_hook(File,pl_swrl_owl,Opts) :-
        read_file_to_terms(File,Terms,Opts),
        forall(member(Term,Terms),
               (   prolog_clause_to_swrl_rule(Term,SWRL_Rule),
                   (   swrl_to_owl_axioms(SWRL_Rule,Axioms)
                   ->  maplist(assert_axiom,Axioms)
                   ;   assert_axiom(SWRL_Rule)))).






:- use_module(swrl).
:- use_module(owl2_model).
:- use_module(owl2_from_rdf).
:- use_module(swrl_rdf_hooks).

:- begin_tests(family,[setup(load_swrlfile),cleanup(retract_all_axioms)]).

load_swrlfile :-
        owl_parse_rdf('testfiles/family.owl').

test(expected) :-
        forall(expected(Ax),
               (   writeln(Ax),
                   Ax)).

test(loaded_implies) :-
        \+ \+ implies(_,_).

expected(implies(['http://www.owl-ontologies.com/Ontology1172270693.owl#has_foster_grandfather'(i('http://www.owl-ontologies.com/Ontology1172270693.owl#a'), i('http://www.owl-ontologies.com/Ontology1172270693.owl#b')), 'http://www.owl-ontologies.com/Ontology1172270693.owl#has_health_state'(i('http://www.owl-ontologies.com/Ontology1172270693.owl#b'), i('http://www.owl-ontologies.com/Ontology1172270693.owl#c'))], ['http://www.owl-ontologies.com/Ontology1172270693.owl#has_fam_hx_in_foster_grandfather'(i('http://www.owl-ontologies.com/Ontology1172270693.owl#a'), i('http://www.owl-ontologies.com/Ontology1172270693.owl#c'))])).

:- end_tests(family).

:- begin_tests(ancestor,[setup(load_swrlfile),cleanup(retract_all_axioms)]).

load_swrlfile :-
        owl_parse_rdf('testfiles/dl-safe-ancestor.owl').

test(expected) :-
        forall(expected(Ax),
               (   writeln(Ax),
                   Ax)).

test(loaded_implies) :-
        \+ \+ implies(_,_).

expected(implies(['http://www.cs.man.ac.uk/~bparsia/2007/examples/dl-safe-ancestor.owl#ancestorOf'(i('http://www.cs.man.ac.uk/~bparsia/2007/examples/dl-safe-ancestor.owl#x'), i('http://www.cs.man.ac.uk/~bparsia/2007/examples/dl-safe-ancestor.owl#y')),
                'http://www.cs.man.ac.uk/~bparsia/2007/examples/dl-safe-ancestor.owl#ancestorOf'(i('http://www.cs.man.ac.uk/~bparsia/2007/examples/dl-safe-ancestor.owl#y'), i('http://www.cs.man.ac.uk/~bparsia/2007/examples/dl-safe-ancestor.owl#z'))],
               ['http://www.cs.man.ac.uk/~bparsia/2007/examples/dl-safe-ancestor.owl#ancestorOf'(i('http://www.cs.man.ac.uk/~bparsia/2007/examples/dl-safe-ancestor.owl#x'), i('http://www.cs.man.ac.uk/~bparsia/2007/examples/dl-safe-ancestor.owl#z'))])).


:- end_tests(ancestor).

:- begin_tests(pl2swrl,[]).

:- op(1100,xfy,<==>).


subClassOf(ab, unionOf([a, b])) <==>
(   (   a(X) ;   b(X)) :- ab(X)).

subClassOf(x, y) <==>  (   y(X):-  x(X)).

subClassOf(unionOf([a, b]), ab) <==>
(   ab(X):- (   a(X) ;   b(X))).

subPropertyOf(r, s) <==>
(   r(X,Y):- s(X,Y)).

subPropertyOf(r, inverseOf(t)) <==>
(   r(X,Y):- t(Y,X)).

subPropertyOf(r, propertyChain([s, t])) <==>
(   r(X,Y):- s(X,V1),t(V1,Y)).

subPropertyOf(r, propertyChain([s, t, u, v, inverseOf(w), x])) <==>
(   r(X,Y):-      s(X,V1),t(V1,V2),u(V2,V3),v(V3,V4),w(V5,V4),x(V5,Y)).

subPropertyOf(r, propertyChain([s, u, w])) <==>
(   r(X,Y):-     s(X,V1),u(V1,V2),w(V2,Y)).

subPropertyOf(r, propertyChain([s, inverseOf(t)])) <==>
(   r(X,Y):-   s(X,V1),t(Y,V1)).

(equivalentClasses([ab,unionOf([a,b])]) <==>
(   ab(X) :- (a(X);b(X)))).

equivalentClasses([efg, intersectionOf([e, f, g])])
<==>
[(   e(X):- efg(X)),
 (   f(X):- efg(X)),
 (   g(X):- efg(X)),
 (   efg(X):- e(X),f(X),g(X))].


test(pl2owl) :-
        forall( (Axiom <==> Pl),
                pl2owl(Pl,Axiom)).

pl2owl(Pl,Axiom) :-
        prolog_clause_to_swrl_rule(Pl,Rule),
        swrl_to_owl_axioms(Rule,[Axiom]).

check(Axiom,Pl) :-
        prolog_clause_to_swrl_rule(Pl,Rule),
        swrl_to_owl_axioms(Rule,[Axiom]).

:- end_tests(pl2swrl).






:- module(swrl_rdf_hooks,
          [
           ]).

:- use_module(library('semweb/rdf_db.pl')).
:- use_module(swrl).
:- use_module(owl2_from_rdf).
:- use_module(owl2_model).
:- use_module(owl2_metamodel).

:- rdf_register_ns(swrl,'http://www.w3.org/2003/11/swrl#',[force(true)]).
:- rdf_register_ns(swrlb,'http://www.w3.org/2003/11/swrlb#',[force(true)]).

:- multifile owl2_from_rdf:owl_parse_axiom_hook/3.
owl2_from_rdf:owl_parse_axiom_hook(X,AnnMode,List) :-
        debug(swrl,'trying swrl hooks for: ~w',[X]),
        swrl_parse_axiom(X,AnnMode,List).

use_owl(A,B,C) :-
        owl2_from_rdf:use_owl(A,B,C).

swrl_parse_axiom(implies(Body,Head),AnnMode,List) :-
        debug(swrl,'Testing swrl:Imp ',[]),
        test_use_owl(X,'rdf:type','swrl:Imp'),         valid_axiom_annotation_mode(AnnMode,X,'rdf:type','swrl:Imp',List),
        use_owl(X,'rdf:type','swrl:Imp'),         debug(swrl,'Parsing swrl:Imp ~w',[X]),
        use_owl(X,'swrl:body',RdfBody),
        use_owl(X,'swrl:head',RdfHead),
        swrl_description_list(RdfBody,Body),
        debug(swrl,'   Body ~w',[Body]),
        swrl_description_list(RdfHead,Head),
        debug(swrl,'   Head ~w',[Head]).


swrl_description_list('http://www.w3.org/1999/02/22-rdf-syntax-ns#nil',[]) :- !.
swrl_description_list(X,[F|R]) :-
		use_owl(X,'rdf:first',Element),
	swrl_description(Element,F),
	use_owl(X,'rdf:rest',Y),
	!,
        swrl_description_list(Y,R).

swrl_description(X,i(X)) :-
        test_use_owl(X,'rdf:type','swrl:Variable'),         !.
swrl_description(X,G) :-
        use_owl(X,'rdf:type','swrl:IndividualPropertyAtom'),
        !,
        use_owl(X,'swrl:propertyPredicate',P),
        use_owl(X,'swrl:argument1',A1),
        use_owl(X,'swrl:argument2',A2),
        swrl_description(P,PP),
        swrl_description(A1,A1P),
        swrl_description(A2,A2P),
        G=..[PP,A1P,A2P]. swrl_description(X,G) :-
        use_owl(X,'rdf:type','swrl:DatavaluedPropertyAtom'),
        !,
        use_owl(X,'swrl:propertyPredicate',P),
        use_owl(X,'swrl:argument1',A1),
        use_owl(X,'swrl:argument2',A2),
        swrl_description(P,PP),
        swrl_description(A1,A1P),
        swrl_description(A2,A2P),
        G=..[PP,A1P,A2P]. swrl_description(X,builtin(P,ArgsP)) :-
        use_owl(X,'rdf:type','swrl:BuiltinAtom'),
        !,
        use_owl(X,'swrl:builtin',P),
        use_owl(X,'swrl:arguments',Args),
        swrl_description_list(Args,ArgsP).
swrl_description(X,G) :-
        use_owl(X,'rdf:type','swrl:ClassAtom'),
        !,
        use_owl(X,'swrl:classPredicate',P),
        use_owl(X,'swrl:argument1',A1),
        swrl_description(P,PP),
        swrl_description(A1,A1P),
        G=description(PP,A1P).
swrl_description(X,G) :-
        use_owl(X,'rdf:type','swrl:DifferentIndividualsAtom'),
        !,
        use_owl(X,'swrl:argument1',A1),
        use_owl(X,'swrl:argument2',A2),
        swrl_description(A1,A1P),
        swrl_description(A2,A2P),
        G=differentFrom(A1P,A2P).
swrl_description(X,G) :-
        use_owl(X,'rdf:type','swrl:SameIndividualAtom'),
        !,
        use_owl(X,'swrl:argument1',A1),
        use_owl(X,'swrl:argument2',A2),
        swrl_description(A1,A1P),
        swrl_description(A2,A2P),
        G=sameAs(A1P,A2P).
swrl_description(X,DX) :-
        owl_description(X,DX),
        !.
swrl_description(X,X) :- !.





hasUncle(X,Z) :- hasParent(X,Y), hasBrother(Y,Z).

hasGrandparent(X,Z) :- hasParent(X,Y), hasParent(Y,Z).

hasSibling(X,Y) :- hasBrother(X,Y).
hasSibling(X,Y) :- hasSister(X,Y).

hasBrother(f,u).
hasFather(c,f).
:- use_module('../owl2_model').
:- use_module('../owl2_io').
:- use_module('../owl2_from_rdf').
:- use_module('../owl2_export_rdf').

thea_test :-
   assert_axiom(class('aw:Animal')),
   assert_axiom(objectProperty('aw:preys_on')),
   assert_axiom(namedIndividual('aw:Lion')),
   assert_axiom(classAssertion('aw:Lion', 'aw:Animal')),
   assert_axiom(namedIndividual('aw:Zebra')),
   assert_axiom(classAssertion('aw:Zebra', 'aw:Animal')),
   assert_axiom(propertyAssertion('aw:preys_on', 'aw:Lion1',
'aw:Zebra1')),

   assert_axiom( annotation( propertyAssertion( 'aw:preys_on', 'aw:Lion1', 'aw:Zebra1' ), 'rdfs:comment', literal('Comment on the preys_on property between Lion and Zebra'))),

   save_axioms('ontology-test.owl', owl, [write_xml_base(true)]),
   retract_axiom(_),
   retract_all_axioms.
ontology('cc').
metabolism == process and has_participant some chemical.
biosynthesis == process and has_output some chemical.

foo_metabolism == process and has_participant some foo.
foo_biosynthesis == process and has_output some foo.

increased_foo == increased_level and towards some foo.
increased_foo_in_blood == increased_level and inheres_in some blood and towards some foo.

abnormal_foo == abnormal_level and towards some foo.
abnormal_foo_in_blood == abnormal_level and inheres_in some blood and towards some foo.

increased_foo_metabolism == increased_rate and inheres_in some foo_metabolism.
decreased_foo_metabolism == decreased_rate and inheres_in some foo_metabolism.
increased_foo_biosynthesis == increased_rate and inheres_in some foo_biosynthesis.
decreased_foo_biosynthesis == decreased_rate and inheres_in some foo_biosynthesis.

increased_rate == rate and magnitude_increased_relative_to some normal.
increased_level == level and magnitude_increased_relative_to some normal.

rate < quality_of_process.
level < quality_of_object.

quality_of_process < quality.
quality_of_object < quality.

foo < chemical.

has_output @< has_participant.

has_part inverseOf part_of.
inheres_in inverseOf bearer_of.
objectProperty(towards).
objectProperty(has_grain).
objectProperty(magnitude_increased_relative_to).
objectProperty(magnitude_decreased_relative_to).

class(decreased_rate).
class(process).
class(normal).

hasUncle(X,Z) :- hasParent(X,Y), hasBrother(Y,Z).

hasGrandparent(X,Z) :- hasParent(X,Y), hasParent(Y,Z).

hasSibling(X,Y) :- hasBrother(X,Y).
hasSibling(X,Y) :- hasSister(X,Y).

hasBrother(f,u).
hasFather(c,f).
:- use_module(library(semweb/sparql_client)).

go(Row) :-
      sparql_query('select * where { ?x rdfs:label "Thessaloniki" }', Row,
		   [ host('dbpedia.org'), path('/sparql')]).

go1(Row) :-
	sparql_query('PREFIX fb: <http://rdf.freebase.com/ns/> PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX geo-ont: <http://www.geonames.org/ontology#> CONSTRUCT {?loc ?person ?stateM} WHERE {     ?loc fb:location.location.people_born_here ?person .   ?person fb:people.deceased_person.cause_of_death dbpedia:Vascular_disease .     ?loc geo-ont:parentFeature ?stateM .     ?stateM geo-ont:name "Massachusetts" ; geo-ont:featureClass geo-ont:A }',Row,[ host('factforge.net'), path('/sparql'), search([format=rdf])]).



go2(Row) :- sparql_query(' CONSTRUCT {?s ?p ?o} WHERE {?s ?p ?o .} LIMIT 100',
			 Row,
			 [ host('factforge.net'), path('/sparql'), search([format=rdf])]).

classAssertion(small_green_left_eye,o3p1).
classAssertion(deformed_blue_right_eye,o4p1).

classAssertion(organism,o1).
classAssertion(big_left_ear,o1p1).
classAssertion(retina_degenerates,o1p2).
classAssertion(axon_terminals_degenerated_in_ca2,o1p3).
classAssertion(deformed_ca2,o1p4).
classAssertion(thin_mm_in_axon_of_dn_of_sn,o1p5).
classAssertion(lewy_bodies_in_sn,o1p6).
propertyAssertion(has,o1,o1p1).
propertyAssertion(has,o1,o1p2).
propertyAssertion(has,o1,o1p3).
propertyAssertion(has,o1,o3p1). 
classAssertion(organism,o2).
classAssertion(deformed_right_ear,o2p1).
classAssertion(axon_terminals_degenerated_in_ca3,o2p2).
classAssertion(atrophied_hippocampus,o2p3).
classAssertion(deformed_hippocampus,o2p4).
classAssertion(axon_terminals_degenerated_in_sn,o2p5).
classAssertion(lewy_bodies_in_sn2,o2p6).
propertyAssertion(has,o2,o2p1).
propertyAssertion(has,o2,o2p2).
propertyAssertion(has,o2,o2p3).
propertyAssertion(has,o2,o4p1). 
o1_x < organism and has_part some thin_mm_in_axon_of_dn_of_sn.
o2_x < organism and has_part some axon_terminals_degenerated_in_ca3.
o3_x < organism and has_part some axon_degenerated_in_hippocampus.
o4_x < organism and has_part some (axon_terminal and has_quality some degenerated).


probe_1 == organism and has_part some (hippocampus and has_part some (ca2 and has_part some (axon and has_part some (axon_terminal and has_quality some degenerated)))).
probe_2 == organism and has_part some (hippocampus and has_part some (ca3 and has_part some (axon and has_part some (axon_terminal and has_quality some degenerated)))).
probe_2b == organism and has_part some (hippocampus and
                                       has_part some (ca2 and has_part some (axon and has_part some (axon_terminal and has_quality some degenerated))) and
                                       has_part some (ca3 and has_part some (axon and has_part some (axon_terminal and has_quality some degenerated)))).
probe_3 == organism and has_part some ((axon and part_of some hippocampus) and has_quality some degenerated).

probe_4 == organism and has_part some (axon and has_part some (axon_terminal and has_quality some degenerated)).


small_green_left_eye == left_eye and has_quality some green and has_quality some small.
deformed_blue_right_eye == right_eye and has_quality some blue and has_quality some deformed.
big_left_ear == left_ear and has_quality some big.
deformed_right_ear == right_ear and has_quality some deformed.

retina_degenerates == retina and has_quality some degenerated.
axon_terminals_degenerated_in_ca2 == ca2 and has_part some (axon_terminal and has_quality some degenerated).
axon_terminals_degenerated_in_ca3 == ca3 and has_part some (axon_terminal and has_quality some degenerated).
axon_terminals_degenerated_in_sn == sn and has_part some (axon_terminal and has_quality some degenerated).
axon_terminals_degenerated == axon_terminal and has_quality some degenerated.
axon_degenerated_in_hippocampus == hippocampus and has_part some (axon and has_quality some degenerated).
atrophied_hippocampus == hippocampus and has_quality some atrophied.
atrophied_ca2 == ca2 and has_quality some atrophied.
deformed_hippocampus == hippocampus and has_quality some deformed.
deformed_ca2 == ca2 and has_quality some deformed.
thin_mm_in_axon_of_dn_of_sn == (((mitochondrion_membrane and part_of some axon) and part_of some dopaminergic_neuron) and part_of some sn) and has_quality some thin. 
lewy_bodies_in_sn == sn and has_part some lewy_body.
lewy_bodies_in_sn2 == lewy_body and part_of some sn.

ca2 < part_of some hippocampus.
ca3 < part_of some hippocampus.
axon < part_of some neuron.
neuron < cell.
cell < part_of some organism.
hippocampus < part_of some brain.
retina < part_of some brain.
neuron < part_of some nervous_system.
brain < organ.
organ < part_of some organism.
brain < part_of some nervous_system.
nervous_system < system.
system < part_of some organism.
axon_terminal < part_of some axon.
mitochondrial_membrane == membrane and part_of some mitochondrion.
mitochondrion < part_of some cell.
dopmainergic_neuron == neuron and outputs some dopamine.
dopamine < neurotransmitter.
lewy_body < inclusion.

left_ear == ear and has_laterality some left.
right_ear == ear and has_laterality some right.
left_eye == eye and has_laterality some left.
right_eye == eye and has_laterality some right.
ear < organ.
ear < part_of some head.
retina < part_of some eye.
eye < part_of some head.

big == size and has_value some increased.
small == size and has_value some decreased.
size < morphology.
deformed < morphology.
morphology < quality.
degenerated < morphology.
atrophied < degenerated.
atrophied < small.
thin < morphology and decreased.
blue < color.
green < color.
red < color.
color < quality.

objectProperty(has_value).
objectProperty(has_laterality).
objectProperty(overlaps).
transitiveProperty(part_of).
transitiveProperty(has_part).
inverseProperties(part_of,has_part).

overlaps @< has_part * part_of.

ontology(species).
ontology(anatomy).
ontology(subcellular).
ontologyAxiom(species,class(organism)).
ontologyAxiom(anatomy,class(ca2)).
ontologyAxiom(anatomy,class(ca3)).
ontologyAxiom(anatomy,class(hippocampus)).
ontologyAxiom(anatomy,class(retina)).
ontologyAxiom(anatomy,class(eye)).
ontologyAxiom(anatomy,class(ear)).
ontologyAxiom(subcellular,class(axon_terminal)).

:- use_module(library(thea2/owl2_model)).
:- use_module(library(thea2/owl2_io)).

g :- load_axioms('list-example.owl').

processual_part_of(P,W) :- part_of(P,W),process(W).

static_part_of(P,W) :- part_of(P,W),object(W).

part_of(p1,p2).
part_of(ob1,ob2).
process(p1).
process(p2).
object(ob1).
object(ob2).


subClassOf(a,b).

		equivalentClasses([c,b]).

subClassOf(a,a).
subClassOf(b,b).
subClassOf(c,d).
subClassOf(d,e).

classAssertion(c,i).

sameIndividual([i2,i1]).
sameIndividual([i1,i3]).
propertyAssertion(p,i1,v).

symmetricProperty(p).
sameIndividual([b,a]).
differentIndividuals([a,b]).

transitiveProperty(tp).
propertyAssertion(tp,a1,b1).
propertyAssertion(tp,b1,c1).

subPropertyOf(tp,supertp).
equivalentProperties([tp,tp2]).

classAssertion(c,x1).
equivalentClasses([c,intersectionOf([c1,c2])]).
equivalentClasses([b,unionOf([b1,b2,b3])])).
spicy_tomato_pizza == pizza and hasPart some (topping and hasQuality some spicy) and hasPart some tomato.

pizza < hasPart some mozzarella.

spicy_paneer_curry == curry and hasPart some paneer and hasPart some (sauce and derivesFrom some tomato) and hasQuality some spicy.

paneer < cheese.
mozzarella < cheese.

pizza < food.
curry < food.
:- use_module(library(thea2/owl2_model)).
:- use_module(library(thea2/owl2_io)).


load_1st :-
	load_axioms('http://testbed1.gprt.ufpe.br/~ascman/owls-tc4-swrl/services/1.2/BookToPublisherService.owl', owl, [imports(true)]).

load_2nd :-
	load_axioms('http://testbed1.gprt.ufpe.br/~ascman/owls-tc4-swrl/services/1.2/WaysOfOrderService.owl', owl, [imports(true)]).

load_both :-
	load_1st,
	print('now load 2nd'),nl,
	load_2nd.




:- use_module(library(thea2/owl2_model)).
:- use_module(library(thea2/owl2_io)).

import :-
	load_axioms('http://testbed1.gprt.ufpe.br/~ascman/owls-tc4-swrl/ontology/books.owl', owl, [imports(true)]).

no_import:-
	load_axioms('http://testbed1.gprt.ufpe.br/~ascman/owls-tc4-swrl/ontology/books.owl', owl, [imports(false)]).

import1 :-
	owl_parse('http://testbed1.gprt.ufpe.br/~ascman/owls-tc4-swrl/ontology/books.owl', complete, complete, true).
uncle_of(U,C) :- brother_of(U,P),parent_of(P,C).

:-use_module('owl2_model.pl').
:-use_module('owl2_from_rdf.pl').
:-use_module('owl2_export_rdf.pl').
:-use_module('owl2_xml.pl').
:-use_module('owl2_util.pl').
:-use_module('owl2_io.pl').



:- module(dot,
          [
           graph_to_dot_atom/2,
           graph_to_dot_file/2,
           graph_to_dot_file/3,
           graph_nest/3,
           graph_nest_pairs/3,
           graph_display/2,
           graph_display/3
           ]).


solutions(X,Goal,Xs):-
        (   setof(X,Goal^Goal,Xs)
        ->  true
        ;   Xs=[]).




open_t --> ['{'].
close_t --> ['}'].
opena --> ['['].
closea --> [']'].
nl --> ['\n'].
sc --> [';'].

dot(X) --> dot(X,0).

dot(graph(Name,Atts,Elts),0) --> !,[digraph],name(Name),open_t,nl,atts(Atts,1),nl,dot(Elts,1),close_t,nl.
dot(graph(Name,Atts,Elts),I) --> I>0,dot(subgraph(Name,Atts,Elts),I). dot(subgraph(Name,Atts,Elts),I) --> !,{Iplus1 is I+1},tab(I),[subgraph],name(Name),open_t,nl,atts(Atts,Iplus1),dot(Elts,Iplus1),tab(I),close_t,nl.

dot(graph(Name,Elts),I) --> dot(graph(Name,[],Elts),I).
dot(subgraph(Name,Elts),I) --> dot(subgraph(Name,[],Elts),I).

dot([],_) --> [].
dot([H|T],I) --> dot(H,I),nl,dot(T,I).

dot(node(Name,Atts),I) --> tab(I),name(Name),opena,node_atts(Atts),closea,sc,nl.
dot(node(Name),I) --> dot(node(Name,[]),I).

dot(edge(A,B,Atts),I) --> tab(I),name(A),['->'],name(B),opena,node_atts(Atts),closea,sc,nl.
dot(edge(A,B),I) --> dot(edge(A,B,[]),I).

att(T=V) --> !,name(T),['='],quote(V).
att(A) --> att(A=true).

node_atts([]) --> [],!.
node_atts([A]) --> !,att(A).
node_atts([A|L]) --> !,att(A),[','],node_atts(L).
node_atts(X) --> att(X).  
atts([],_) --> [],!.
atts([A|L],I) --> !,tab(I),att(A),[';'],nl,atts(L,I).
atts(X) --> att(X),[';']. 

tab(0) --> !,[].
tab(I) --> ['  '],{Iminus1 is I-1},tab(Iminus1).

quote(cluster(X)) --> !,name(cluster(X)).
quote(X) --> {concat_atom(['"',X,'"'],Q)},[Q].   
name(cluster(N)) --> !,{escape_id(N,X),atom_concat('cluster_',X,C)},[C].
name(N) --> {escape_id(N,X)},[X].


escape_id(ID,ID2):-
        compound(ID),
        !,
        ID=..L,
        maplist(escape_id,L,L2),
        concat_atom(L2,'__',ID2).
escape_id(ID,ID2):-
        atom_chars(ID,L),
        escape_chars(L,L2),
        atom_chars(ID2,L2).

escape_chars([],[]).
escape_chars([H|T],[H|T2]):-
        safe_char(H),
        !,
        escape_chars(T,T2).
escape_chars([_|T],['_','_'|T2]):-
        escape_chars(T,T2).

safe_char(C):- C @>= a, C @=< z,!.
safe_char(C):- C @>= 'A', C @=< 'Z',!.
safe_char(C):- C @>= '0', C @=< '9',!. safe_char('_').


graph_to_dot_atom(G,A):-
        dot(G,Toks,[]),
        concat_atom(Toks,' ',A).

graph_to_dot_file(GraphTerm,File):-
        graph_to_dot_file(GraphTerm,dot,File).

graph_to_dot_file(GraphTerm,Fmt,File):-
        Opts=[],         (nonvar(Fmt) -> true ; Fmt=dot),
        (   nonvar(File) -> true ; tmp_file(Fmt,FileBase),concat_atom([FileBase,Fmt],'.',File)),
        graph_to_dot_atom(GraphTerm,Dot),
        (   Fmt=dot
        ->  DotFile=File
        ;   tmp_file(dot,DotFile)),
        tell(DotFile),
        write(Dot),
        told,
        (   Fmt=dot
        ->  true
        ;   (   member(rankdir(RankDir),Opts)
            ->  true
            ;   RankDir='BT'),
            concat_atom([dot,' -o ',File,' -Grankdir=',RankDir,' -T',Fmt,' ',DotFile],Cmd),
            shell(Cmd)).


graph_display(GraphTerm,DisplayCmd):-
        graph_display(GraphTerm,png,DisplayCmd).

graph_display(GraphTerm,Fmt,DisplayCmd):-
        graph_to_dot_file(GraphTerm,Fmt,File),
        debug(dot,'File: ~w',[File]),
        concat_atom([DisplayCmd,File],' ',FullCmd),
        shell(FullCmd).



graph_nest(G,GX,Relations):-
        G=graph(_,_,Elts),
        findall(A-B,(member(E,Elts),E=edge(A,B,Atts),member(label=Label,Atts),member(Label,Relations)),NestPairs),
        graph_nest_pairs(G,GX,NestPairs).

graph_nest_pairs(graph(G,Atts,Elts),graph(G,[compound=true|Atts],EltsX),NestPairs):-
        
                findall(E,(member(E,Elts),E=edge(A,B,_),\+ member(A-B,NestPairs)),Edges),
        
                findall(N,(member(N,Elts),N=node(A,_), \+ member(_-A,NestPairs), \+ member(A-_,NestPairs)),Nodes),

                solutions(X,(member(_-X,NestPairs),\+ member(X-_,NestPairs)),Roots),

                findall(SubGraph,
                (   member(X,Roots),
                    subgraph(X,Elts,NestPairs,SubGraph)),
                SubGraphs),

        maplist(fix_edge_for_cluster(NestPairs),Edges,EdgesX),

                flatten([Nodes,EdgesX,SubGraphs],EltsX).

        

subgraph(X,OrigElts,NestPairs,subgraph(cluster(X),Atts,SubGraphs)):-
        findall(SubGraph,
                (   member(Child-X,NestPairs),
                    subgraph(Child,OrigElts,NestPairs,SubGraph)),
                SubGraphs),
        SubGraphs\=[],
        !,
                member(node(X,Atts),OrigElts).

subgraph(X,OrigElts,_,N):-
        N=node(X,_),
        member(N,OrigElts).

fix_edge_for_cluster(NestPairs,Edge,EdgeX):-
        Edge=edge(A,B,Atts),
        member(_-A,NestPairs),         member(_-B,NestPairs),         !,                              select_random_terminal_node(A,NestPairs,AX),
        select_random_terminal_node(B,NestPairs,BX),
        EdgeX=edge(AX,BX,[ltail=cluster(A),lhead=cluster(B)|Atts]).
fix_edge_for_cluster(NestPairs,Edge,EdgeX):-
        Edge=edge(A,B,Atts),
        member(_-A,NestPairs),         \+ member(_-B,NestPairs),         !,                              select_random_terminal_node(A,NestPairs,AX),
        EdgeX=edge(AX,B,[ltail=cluster(A)|Atts]).
fix_edge_for_cluster(NestPairs,Edge,EdgeX):-
        Edge=edge(A,B,Atts),
        member(_-B,NestPairs),         \+ member(_-A,NestPairs),         !,                              select_random_terminal_node(B,NestPairs,BX),
        EdgeX=edge(A,BX,[lhead=cluster(B)|Atts]).
fix_edge_for_cluster(_,Edge,Edge). 

select_random_terminal_node(A,NestPairs,A):-
        \+ member(_-A,NestPairs),
        !.
select_random_terminal_node(A,NestPairs,AX):-
        member(Child-A,NestPairs),
        select_random_terminal_node(Child,NestPairs,AX).






:- module(memoization,[
		   table_preds/0,
                   table_pred/1,
		   persistent_table_pred/2,
                   table_call/5,
                   clear_table_pred/1
                   ]).

:- module_transparent table_pred/1.
:- module_transparent table_call/5.
:- module_transparent persistent_table_pred/2.

:- dynamic persist_to/2. :- dynamic persist_to_stream/2. :- dynamic cache_file/1. :- dynamic is_tabled/2.

:- multifile memoize_hook/1.

table_preds :-
	forall(memoize_hook(H),
	       table_pred(H)).


table_pred(M:P):-
	!,
        table_pred(P,M).
table_pred(P):-
	!,
        context_module(M),
        table_pred(P,M).
table_pred(P,M):-
        is_tabled(M,P),
        !,
        debug(tabling,'already tabled: ~w:~w',[M,P]).
table_pred(P,M):-
        debug(tabling,'context mod ~w, tabling ~w',[M,P]),
        P = F/Arity,
        functor(T,F,Arity),                     findall(T-B,clause(M:T,B),Clauses),
                debug(tabling,'abolishing: ~w',[M:P]),
        abolish(M:P),
                        forall(member(H-B,Clauses),
               create_tabled_pred_impl(H,B,M)),
                        create_tabled_pred_wrap(T,M),
        assert(is_tabled(M,P)),
	!.
table_pred(P,M):-
	throw(error(table_pred(P,M))).

persistent_table_pred(MPA,File) :-
	debug(tabling,'peristing ~w to ~w',[MPA,File]),
		(   MPA=_:P/A
	->  true
	;   MPA=P/A),
	assert(persist_to(P/A,File)),
			table_pred(MPA),
		initiate_persistent_stream(P/A,File).

initiate_persistent_stream(P/A,File) :-
	debug(tabling,'  caching ~w in ~w',[P/A,File]),
				(   exists_file(File)
	->  assert(cache_file(File)),
	    open(File,append,IO,[])
	;   open(File,write,IO,[])),
	debug(tabling,'persisting: ~w to stream: ~w',[P/A,IO]),
	retractall(persist_to_stream(P/A,_)),
	assert(persist_to_stream(P/A,IO)).

ensure_cache_loaded :-
	setof(File,cache_file(File),Files),
	!,
	maplist(consult,Files),
	retractall(cache_file(_)).
ensure_cache_loaded.

persistent_retractall(_:T) :-
	functor(T,P,A),
	mapped_pred_name(P_orig,P),
	persist_to(P_orig/A,File),
	exists_file(File),
	!,
	format(user_error,'not tested!!~n',[]),
	delete_file(File).
persistent_retractall(_).

persistent_assert(M:T) :-
	debug(tabling,'persisting assert(~w) to cache',[M:T]),
	functor(T,P,A),
	mapped_pred_name(P_orig,P),
	persist_to_stream(P_orig/A,IO),
	!,
	format(IO,'~q.~n',[M:T]),
	flush_output(IO).
persistent_assert(_).

wrap_assert(T) :-
	assert(T),
	persistent_assert(T).

clear_table_pred(P):-
        context_module(M),
        clear_table_pred(P,M).
clear_table_pred(M:P):-
        clear_table_pred(P,M).
clear_table_pred(P,M):-
        P = F/Arity,
        cached_pred_name(F,Fm),
        called_pred_name(F,Fs),
        pred_to_unground_term(Fm/Arity,Tm),
        pred_to_unground_term(Fs/Arity,Ts),
        retractall(M:Tm),
        retractall(M:Ts),
	persistent_retractall(M:Tm),
        persistent_retractall(M:Ts).

create_tabled_pred_impl(H,B,M):-
        H =.. [F|As],
        tabled_pred_name(F,Ft),
        Ht =.. [Ft|As],
        ImplClause = (Ht :- B),
        debug(tabling,'asserting new clause: ~w',[ImplClause]),
        M:assert( ImplClause ).


tabled_pred_name(N1,N2):-
        concat_atom([N1,'_tabled__'],N2).
cached_pred_name(N1,N2):-
        concat_atom([N1,'_cached__'],N2).
called_pred_name(N1,N2):-
        concat_atom([N1,'_called__'],N2).

mapped_pred_name(N1,N2) :- cached_pred_name(N1,N2).
mapped_pred_name(N1,N2) :- called_pred_name(N1,N2).


create_tabled_pred_wrap(T,M):-
        T =.. [F|As],
        length(As,Arity),

                        tabled_pred_name(F,Ft),
        Tt =.. [Ft|As],                 dynamic((M:Ft/Arity)),

                                cached_pred_name(F,Fm),
        Tm =.. [Fm|As],                 dynamic((M:Fm/Arity)),

                                        called_pred_name(F,Fs),
        Ts =.. [Fs|As],                 dynamic((M:Fs/Arity)),

                        WrapClause = (M:T :- table_call(T,Tt,Tm,Ts,M)),
        debug(tabling,'asserting rewritten clause: ~w',[WrapClause]),
        assert( WrapClause ),
                compile_predicates([M:F/Arity]).

table_call(G,GImpl,GMemo,GSub,M):-
	ensure_cache_loaded,
                \+ goal_subsumed(M:GSub),
        !,
                debug(tabling,'table_call [seed] ~w ~w',[GImpl,GSub]),

                                                findall(GMemo,(M:GImpl,
                       (   M:GMemo
                       ->  true                        ;   wrap_assert(M:GMemo))),
                GMemos),
        debug(tabling,'seeded = ~w  // ~w',[GMemos,G]),

                        wrap_assert(M:GSub),

                member(GMemo,GMemos).

table_call(G,_,GMemo,_,M):-
        debug(tabling,'table_call [memo] ~w ~w',[G,GMemo]),
                        M:GMemo.

goal_subsumed(G):-
        numbervars(G,0,_),
        G.

pred_to_unground_term(Pred/Arity,Term):-
        !,
        unground_list(Arity,L),
        Term =.. [Pred|L].
pred_to_unground_term(Term,Term).

unground_list(N,[]):- N =<0,!.
unground_list(N,[_|L]):-
        N1 is N-1,
        unground_list(N1,L).



unittest(load(go)=
      load_bioresource(go)/[]).

unittest(test(go,
            [_=load(go)],
            (   ensure_loaded(bio(ontol_db)),
                ensure_loaded(bio(tabling)),
                table_pred(ontol_db:parentT/2),
                writeln(testing),
                parentT('GO:0005634','GO:0005575'),
                                findall(PID,parentT('GO:0005634',PID),PIDs1),
                findall(PID,parentT('GO:0005634',PID),PIDs2),
                findall(PID,parentT('GO:0005634',PID),PIDs),
                writeln(pidsA=PIDs),
                table_pred(ontol_db:subclassT/2),
                setof(X,subclassT(X,'GO:0051704'),Xs),                 length(Xs,NumXs),
                writeln(subclasses(NumXs)),
                NumXs>700,
                PIDs=PIDs1,
                PIDs=PIDs2,
                nl
            ),
            true)).

unittest(test(go_untabled,
            [_=load(go)],
            (   ensure_loaded(bio(ontol_db)),
                ensure_loaded(bio(tabling)),
                                                                parentT('GO:0005634','GO:0005575'),
                findall(PID,parentT('GO:0005634',PID),_),
                findall(PID,parentT('GO:0005634',PID),_),
                findall(PID,parentT('GO:0005634',PID),PIDs),
                writeln(pidsA=PIDs),
                setof(X,subclassT(X,'GO:0051704'),Xs),                 length(Xs,NumXs),
                NumXs>700,
                writeln(subclasses(NumXs)),
                nl
            ),
            true)).

unittest(load(sofa)=
      load_biofile(obo,'sofa.obo')/[]).

unittest(test(sofa,
            [_=load(sofa)],
            (   ensure_loaded(bio(ontol_db)),
                ensure_loaded(bio(tabling)),
                table_pred(ontol_db:subclassT/2),
                findall(PID,subclassT('SO:0000704',PID),PIDs),
                writeln(pidsA=PIDs),
                findall(PID,subclassT('SO:0000704',PID),PIDs),
                writeln(pidsB=PIDs),
                nl
                ),
            member('SO:0000000',PIDs))).



